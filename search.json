[{"path":"https://eppicenter.github.io/sampleDB/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 sampleDB authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://eppicenter.github.io/sampleDB/articles/Delete--Archive-Samples.html","id":"the-5-status-of-db","dir":"Articles","previous_headings":"","what":"The 5 status’ of DB","title":"Delete and Archive Samples and Controls","text":"sample uploaded SampleDB 5 statuses can : use. (Default). sample must location plate. Exhausted (empty). physical sample tube thrown away sample left. SampleDB, longer needs location plate. SampleDB needs keep Micronix Barcode, Study Subject, Date, StudyCode, SpecimenType can retrospectively link Micronix Barcode sample metadata. user able see empty/ depleted/ whatever term want use clear used future. Bad. physical sample tube thrown away something wrong sample. example, bacterial growth, left room temp, etc. empty sample, SampleDB longer needs location need keep Micronix Barcode, Study Subject, Date, StudyCode, SpecimenType can retrospectively link Micronix Barcode sample metadata. user able see \"bad.” great also include brief description marked bad “comment.” Missing: useful temporary status flag samples found. means final status; missing samples searched status updated. Shipped: cases, samples need distributed labs collaborators. status helps keep track samples sent others.","code":""},{"path":"https://eppicenter.github.io/sampleDB/articles/Delete--Archive-Samples.html","id":"archiving-samples","dir":"Articles","previous_headings":"","what":"Archiving samples","title":"Delete and Archive Samples and Controls","text":"Archiving samples, e.g. changing “Use” Exhausted, Bad, Missing, Shipped: modify status samples, open “Search, Delete & Archive Samples” panel search samples using aforementioned search techniques (plate, study subject ID, barcode, etc. detailed “Search Samples.” completed, select rows table samples wish modify. selected row highlighted light blue. unselect, click highlighted rows. Choose status selected samples “Status” dropdown table. Finally, click panel tab bottom right hand screen press “Archive Samples button. present selected samples review final archival. required enter status samples listed. may optionally add comment selected samples using ”Comment” field. can cancel something look correct clicking outside dialog closing dialog box.","code":""},{"path":"https://eppicenter.github.io/sampleDB/articles/Delete--Archive-Samples.html","id":"deleting-samples-or-plates","dir":"Articles","previous_headings":"","what":"Deleting samples or plates","title":"Delete and Archive Samples and Controls","text":"Delete used sample(s) plate(s) uploaded incorrectly. PERMANENT decision undone used unless fixing upload error. can search samples delete barcode (single, file multiple barcodes) plate name. selected erroneous samples, click panel tab bottom right hand screen press “Delete Samples” button. present selected samples review final deletion. can cancel something look correct clicking outside dialog closing dialog box.","code":""},{"path":"https://eppicenter.github.io/sampleDB/articles/Delete--Archive-Samples.html","id":"delete-archive-controls","dir":"Articles","previous_headings":"","what":"Delete & Archive Controls","title":"Delete and Archive Samples and Controls","text":"process deleting & archiving controls identical samples, exception dried blood spots stored collections individual tube. first identify blood spots want modify (e.g., SheetID & BagName, Composition, Percentage, Density). done, select collection select ‘Archive Samples’ ‘Delete Samples’ samples. dialog appears give numeric input collection update number spots delete archive. done, select ‘Delete’ ‘Archive’ commit changes. deleting spots, decrease number ‘Total’ spots number entered collection. archiving spots, increase number ‘Exhausted’ spots number entered. changes visible next time search collection. Important: archiving spots, option set status, just like samples. ‘Exhausted’ status reserved spot punched, used automatically system extractions recorded. archive spots, automatically put spots ‘Archive’ state assign ‘Status’ set. can find spots using State Status filters search panel.","code":""},{"path":"https://eppicenter.github.io/sampleDB/articles/How-to-Move-Controls.html","id":"how-to-move-dbs-control-sheets","dir":"Articles","previous_headings":"","what":"How to move DBS Control Sheets","title":"How to Move Controls","text":"move DBS control sheets, need provide following information SheetName - label control sheet SourceBagName - Name bag sheet DestBagName - Name bag sheet moved Batch - control batch ControlUID - control UID controls sheet Exhausted - number exhausted spots information can found using search functionality search panel. NOTE: current implementation allow move sheets blood spots control UID single batch. can updated sheet multiple control UIDs can moved.","code":""},{"path":"https://eppicenter.github.io/sampleDB/articles/How-to-Move-Controls.html","id":"how-to-update-whole-blood","dir":"Articles","previous_headings":"","what":"How to update Whole Blood","title":"How to Move Controls","text":"Moving whole blood tube similar moving cryovial tube, just addition metadata specific controls. Batch ControlUID BoxRow BoxColumn SourceBox Note: potentially updated include barcodes exist.","code":""},{"path":"https://eppicenter.github.io/sampleDB/articles/How-to-Move-Micronix-Samples.html","id":"move-micronic-plate-from-one-location-to-another","dir":"Articles","previous_headings":"","what":"Move micronic plate from one location to another","title":"How to Move Samples and Controls","text":"moving samples new plate SampleDB, “Create Container” first. Enter required information create plate. created new plate moved samples new plate, scan new plate upload using “Browse” button “Move Samples” tab.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://eppicenter.github.io/sampleDB/articles/How-to-Upload-Controls.html","id":"steps-to-upload-controls","dir":"Articles","previous_headings":"","what":"Steps to upload controls:","title":"How to Upload Controls","text":"record Dry Blood Spot Controls (DBS) Whole Blood (WB) controls. bar, press “Upload Specimens”. says “Choose Upload Type”, select “Controls”. Choose Storage Type (“DBS Sheet” “Whole Blood”) select “Create” Action.","code":""},{"path":"https://eppicenter.github.io/sampleDB/articles/How-to-Upload-Controls.html","id":"steps-to-upload-dry-blood-spot-sheets-dbs-sheets","dir":"Articles","previous_headings":"","what":"Steps to Upload Dry Blood Spot Sheets (DBS Sheets):","title":"How to Upload Controls","text":"top nav, hit “Upload Specimens”. says “Choose Upload Type”, select “Controls”. Choose “DBS Sheet” Storage Type select “Create” Action.","code":""},{"path":"https://eppicenter.github.io/sampleDB/articles/How-to-Upload-Controls.html","id":"creating-a-dbs-sheet-upload","dir":"Articles","previous_headings":"Steps to Upload Dry Blood Spot Sheets (DBS Sheets):","what":"Creating a DBS Sheet Upload:","title":"How to Upload Controls","text":"example DBS Sheet Upload. CompositionID: Refers strain types percentages involved (see “Guidelines Controls” ). Find information Update References > Controls. Filter strain percentage. specific identifier “Label” column table. Batch: control batch (see “Guidelines Controls” ) SheetName: sheet identifier. identify sheet dry blood spots . DBS_FreezerName, DBS_BasketName DBS_ShelfName: Location freezer Density: parasitaemia level control. Count: number blood spots added sheet. Comment: optional field leave information DBS Sheet.","code":""},{"path":"https://eppicenter.github.io/sampleDB/articles/How-to-Upload-Controls.html","id":"validation-for-created-dbs","dir":"Articles","previous_headings":"","what":"Validation for Created DBS:","title":"How to Upload Controls","text":"Uploads checked completeness validity. Composition IDs must exist used. Add references (see Guidelines Controls). Message: Composition IDs found database. Batch must exist used. Add references (see Guidelines Controls). Message: Batch found database Location must exist used. Add references Message: \"following DBS_FreezerName, DBS_ShelfName, /DBS_BasketName found database\"","code":""},{"path":"https://eppicenter.github.io/sampleDB/articles/How-to-Upload-Controls.html","id":"uploading-whole-blood-wb-controls","dir":"Articles","previous_headings":"","what":"Uploading Whole Blood (WB) Controls:","title":"How to Upload Controls","text":"Example Whole Blood Upload csv. Density: parasitaemia level control. Use numerical > values use K (k) denote \"thousand\" CompositionID: column, record composition label (see “Guidelines Controls” ). Find going Update     References > Controls. Filter compositions strain percentage. Use ID “Label” column table. Batch: control batch - look like date, must already sample DB (see “Guidelines Controls” ) WB_FreezerName, WB_BasketName WB_ShelfName: Freezer location DBS Bag BoxRow BoxColumn: row column tube within box. BoxName: ID box containing tube. BoxBarcode: optional field barcode can added box, one exists. Comment: optional field user can leave info tube.","code":""},{"path":"https://eppicenter.github.io/sampleDB/articles/How-to-Upload-Controls.html","id":"validation-for-whole-blood-wb-controls","dir":"Articles","previous_headings":"","what":"Validation for Whole Blood (WB) Controls:","title":"How to Upload Controls","text":"Uploads checked completeness validity. CompositionID must exist Sample DB used. Add references (see Guidelines Controls) Message: Composition IDs found database. Batch must exist Sample DB used. Add references (see “Guidelines Controls” ) Message: Batch found database Whole Blood Cryovial Box Location must exist used. Add > references \"following WB_FreezerName, WB_RackName, /WB_RackPosition found database\" Whole Blood Tubes must uploaded empty (existing!) locations Message: “Uploading sample Cryovial well location already active sample”","code":""},{"path":[]},{"path":"https://eppicenter.github.io/sampleDB/articles/How-to-Upload-Extracted-Controls.html","id":"preparing-your-dry-blood-spot-control-extraction-csv","dir":"Articles","previous_headings":"Dry Blood Spot Control Extractions","what":"Preparing your Dry Blood Spot Control-Extraction CSV:","title":"How to Upload Extracted Controls","text":"SampleDB supports recording Dry Blood Spot extractions micronix plates. example CSV six (6) micronix tubes DBS extractions. upload extractions, user select “DBS” “Control Storage Type”, select “Extract” “Action”. columns defined follows: NOTE: Column order matter. Batch: control batch (see “Guidelines Controls”) ControlUID: control exists database want link extraction . UID created automatically sampleDB need looked . can done searching controls “Search” panel using identifying information, e.g. location, composition (strain /percentages). strategy preparing extraction download controls adding remaining columns sheet. Barcode: barcode micronix tube. Row, Column: position micronix tube extraction. PlateName: name micronix plate. PlateBarcode: optional field barcode can added plate, one exists. ExtractedOn: date extraction. SheetName: label sheet DBS Controls sourced . BagLabel: label bag sheet came . DBS_FreezerName, DBS_BasketName DBS_ShelfName: location freezer DBS Control Sheet located. FreezerName, BasketName ShelfName: location freezer micronix plate located.","code":""},{"path":"https://eppicenter.github.io/sampleDB/articles/How-to-Upload-Extracted-Controls.html","id":"dbs-post-extraction-effects","dir":"Articles","previous_headings":"Dry Blood Spot Control Extractions","what":"DBS Post-Extraction Effects:","title":"How to Upload Extracted Controls","text":"record extraction, collection blood spots linked extraction number ‘Exhausted’ spots updated. number exhausted spots equals total extraction, blood spot collection archived ‘Exhausted’ status. Additionally, text “Automatically archived exhausted” appear reason field.","code":""},{"path":"https://eppicenter.github.io/sampleDB/articles/How-to-Upload-Extracted-Controls.html","id":"whole-blood-extractions","dir":"Articles","previous_headings":"","what":"Whole Blood Extractions","title":"How to Upload Extracted Controls","text":"SampleDB supports recording whole blood extractions micronix plates.","code":""},{"path":"https://eppicenter.github.io/sampleDB/articles/How-to-Upload-Extracted-Controls.html","id":"preparing-your-whole-blood-extraction-csv","dir":"Articles","previous_headings":"Whole Blood Extractions","what":"Preparing your Whole Blood Extraction CSV:","title":"How to Upload Extracted Controls","text":"example CSV four (4) whole blood extractions. upload extractions, user select “Whole Blood” “Control Storage Type”, select “Extract” “Action”. columns defined followed: Batch: control batch (see “Guidelines Controls”) ControlUID: control exists database want link extraction . UID created automatically sampleDB need looked . can done searching controls “Search” panel using identifying information, e.g. location, composition (strain /percentages). strategy preparing extraction download controls adding remaining columns sheet. BoxRow, BoxColumn: location whole blood tube control cryovial box. BoxName: id box contains whole blood tube. BoxBarcode: Optional field barcode can added box, one exists. WB_FreezerName, WB_BasketName WB_ShelfName: plates location freezer PlateName: name micronix plate. Row, Column: position micronix tube extraction. Barcode: barcode micronix tube. ExtractedOn: date extraction. NOTE: Column order matter.","code":""},{"path":"https://eppicenter.github.io/sampleDB/articles/How-to-Upload-Extracted-Controls.html","id":"whole-blood-post-extraction-effects","dir":"Articles","previous_headings":"Whole Blood Extractions","what":"Whole Blood Post-Extraction Effects:","title":"How to Upload Extracted Controls","text":"record extraction, linked whole blood control removed database.","code":""},{"path":"https://eppicenter.github.io/sampleDB/articles/Preferences.html","id":"preferences","dir":"Articles","previous_headings":"","what":"Preferences","title":"Preferences","text":"Traxcer Position Override - default column name “Position” Traxcer scanner CSV may different sampleDB expects. ensure column names align, go “Preferences'' type , e.g. ”Tube Position”, push “Save Preferences.” replace ‘Position’ ‘Tube Position’ expected column, preventing need manually change column name within CSV file. done , SampleDB save preference future. Software Component Version Table - table displays versions external components sampleDB depends . purely informational purposes.","code":""},{"path":"https://eppicenter.github.io/sampleDB/articles/Searching-SampleDB.html","id":"search-micronix-samples","dir":"Articles","previous_headings":"","what":"Search Micronix Samples","title":"Searching SampleDB","text":"Purpose: search samples find location Micronix plate. can search barcode StudySubject StudySubject/CollectionDate/SpecimenType/Study. can also search plate. like reset search criteria, may clicking “Reset Search Criteria”.","code":""},{"path":"https://eppicenter.github.io/sampleDB/articles/Searching-SampleDB.html","id":"to-search-by-single-barcode","dir":"Articles","previous_headings":"Search Micronix Samples","what":"To Search by Single Barcode:","title":"Searching SampleDB","text":"Click “Search Samples” Type copy/paste barcode upper right hand ‘Search…’ field table. Search results show window.","code":""},{"path":"https://eppicenter.github.io/sampleDB/articles/Searching-SampleDB.html","id":"to-search-by-multiple-barcodes","dir":"Articles","previous_headings":"Search Micronix Samples","what":"To search by multiple barcodes:","title":"Searching SampleDB","text":"Create CSV one column called “Barcodes” “Barcode”. Put micronix barcodes searching column. Click “Multiple Barcodes” click “Browse” upload CSV created. Search results show window. Download data needed clicking “Download” button. download csv samples found search.","code":""},{"path":"https://eppicenter.github.io/sampleDB/articles/Searching-SampleDB.html","id":"to-search-by-plate","dir":"Articles","previous_headings":"Search Micronix Samples","what":"To Search by Plate:","title":"Searching SampleDB","text":"Click “Search, Delete & Archive Samples” Type plate name “Container” field left hand bar. Search results show window can downloaded.","code":""},{"path":"https://eppicenter.github.io/sampleDB/articles/Searching-SampleDB.html","id":"to-search-by-study-subject","dir":"Articles","previous_headings":"Search Micronix Samples","what":"To Search by Study Subject:","title":"Searching SampleDB","text":"Click “Search, Delete & Archive Samples” Click Sample Type “Micronix” click “Single Study Subject” Type copy/paste Study Subject identifier Search results show window.","code":""},{"path":"https://eppicenter.github.io/sampleDB/articles/Searching-SampleDB.html","id":"to-search-for-multiple-study-subjects---date-study-specimen-type","dir":"Articles","previous_headings":"Search Micronix Samples","what":"To search for multiple study subject(s) (+/- date, study, specimen type):","title":"Searching SampleDB","text":"Create CSV one column called “StudySubject”. Put study subjects searching column. want search StudySubject CollectionDate, create one column StudySubject data one column linked CollectionDate data. Save CSV. may additionally include SpecimenType /StudyCode column refine search . Click “Search Samples” Click Sample Type “Micronix” click “Multiple Study Subjects” Click “Browse” upload CSV created. Search results show window can downloaded using “Download” button.","code":""},{"path":"https://eppicenter.github.io/sampleDB/articles/Searching-SampleDB.html","id":"how-to-use-the-advanced-micronix-barcode-search-utility","dir":"Articles","previous_headings":"Search Micronix Samples","what":"How to use the Advanced Micronix Barcode Search Utility:","title":"Searching SampleDB","text":"times, may discover irregularity plate, want know samples plate match position SampleDB database. Advanced Micronix Barcode search allows scan plate return information detailed . Scan plate using micronix plate scanner, output CSV may optionally create CSV file Barcode, Row, Position columns. Ensure file named plate name. Select “Micronix” sample type “Search, Delete & Archive” tab, select “Advanced…” hyperlink. Choose appropriate micronix file type (NA, Traxcer Visionmate). Hit Run Search. issues file upload, error message appear tell columns expected. Inspect results appear run search. can also download file annotations provides additional detail noted #7 . Gray rows indicate passing test. Red rows indicated failing test, number instances triggered failure. following tests performed, display errors: NotFound - sample plate barcode exist SampleDB occur sample uploaded. Consider creating upload file contains sample(s) correct position plate information. IncorrectLocation - sample scanned plate different position plate () recorded sampleDB. occur sample moved plates within plate, move file provided. Consider uploading new move file plate fix error. Archived - sample “archived” status. Use sample status comment fields guide handle . Optionally download file annotations clicking “Download Error Details”. Additional error statuses may see “Correct” “Empty”. confirm sample barcode position matches database scanned file sample exists position, respectively. columns downloaded file follows: CurrentWell - position corresponds plate wells scanned file. always 96 wells A1−H12A1 - H12. Barcode - micronix barcode sample well scanned file. can NA well empty. Status - can 5 statuses mentioned (NotFound, IncorrectLocation, Archived, Correct, Empty). DBWell - well sample found database. DBPlate - plate sample found database. DBBasket - basket plate (DBPlate) found . DBFreezer - freezer basket (DBBasket) . Study - study sample (Barcode) . ID - study subject linked sample (Barcode). Date - collection date linked sample. may NA. row ‘Empty’ status, columns, excluding CurrentWell Status, NA.","code":""},{"path":"https://eppicenter.github.io/sampleDB/articles/Searching-SampleDB.html","id":"search-for-cryovials","dir":"Articles","previous_headings":"","what":"Search for Cryovials","title":"Searching SampleDB","text":"Cryovials can searched using filters micronix samples.","code":""},{"path":"https://eppicenter.github.io/sampleDB/articles/Searching-SampleDB.html","id":"search-for-controls-and-extractions-dbs-wb","dir":"Articles","previous_headings":"","what":"Search for Controls and Extractions (DBS & WB)","title":"Searching SampleDB","text":"Uploaded Dry Blood Spots Whole Blood tubes can viewed “Search, Archive & Delete” Panel selecting “Controls” “Search Type”. can specify whether search “Dry Blood Spots” “Whole Blood”. either case, able filter controls “Batch”, “Control ID” (generated identifier control), “Composition Type” (number strains), “Strain” “Percentage” (composition). may also search location state status can Samples. search extracted controls, need select “Samples” search option “Search Type”, select “Micronix” “Sample Type”. Currently, uploaded extractions must micronix tubes. can search filtering criteria available micronix samples. Extracted controls tied controls database Control UID Batch. two identifiers, can find exact control extraction derived (vice versa). following go workflows.","code":""},{"path":"https://eppicenter.github.io/sampleDB/articles/Searching-SampleDB.html","id":"find-the-control-used-in-an-extraction","dir":"Articles","previous_headings":"Search for Controls and Extractions (DBS & WB)","what":"Find the control used in an extraction","title":"Searching SampleDB","text":"Set Search Type Samples Sample Type Micronix. Find extraction (always study subject DNA (DBS) DNA (WB). Save StudySubject, StudyCode SpecimenType information somewhere used search controls. Now set Search Type Controls. Depending SpecimenType, choose Whole Blood (DNA (WB)) DBS Sheet (DNA (DBS)). Find control filtering Batch using recorded StudyCode filtering Control UID using recorded StudySubject.","code":""},{"path":"https://eppicenter.github.io/sampleDB/articles/Searching-SampleDB.html","id":"find-an-extraction-of-the-control","dir":"Articles","previous_headings":"Search for Controls and Extractions (DBS & WB)","what":"Find an extraction of the control","title":"Searching SampleDB","text":"Set Search Type Controls Sample Type Micronix. Control Type, choose Whole Blood DBS Sheet. Find control using available filters. Save Control UID Batch information somewhere used search extractions. Now set Search Type Samples Sample Type Micronix. Depending control type, filter Specimen Type DNA (DBS) DNA (WB) control dry blood spot whole blood, respectively. Find extracts filtering StudyCode using recorded Batch filtering StudySubject using recorded Control UID.","code":""},{"path":"https://eppicenter.github.io/sampleDB/articles/Searching-SampleDB.html","id":"downloading-your-search-results","dir":"Articles","previous_headings":"","what":"Downloading your search results","title":"Searching SampleDB","text":"may download search results clicking “Download” button table. may optionally choose limit samples included download selecting table first. Important: download works using filters left hand side. work may expect use top right filter. top right filter part table widget. recommendation use filters left need download data. may change future.","code":""},{"path":"https://eppicenter.github.io/sampleDB/articles/Updating-References.html","id":"freezer-names","dir":"Articles","previous_headings":"","what":"Freezer names","title":"Updating References","text":"SampleDB requires freezers entered system samples can uploaded. Every location 3 levels information. top level FreezerName. freezer identifier. second third level can used coordinates identify samples shelf. Every sample need three levels information upload. exact first, second third level information can found database References > Locations. uploading samples, recommended search freezer locations table get exact position information need upload.","code":""},{"path":"https://eppicenter.github.io/sampleDB/articles/Updating-References.html","id":"specimen-types","dir":"Articles","previous_headings":"","what":"Specimen Types","title":"Updating References","text":"Establish add common specimen types References > Specimen Types. Every uploaded sample must associated specimen type. Specimen types easy understand. examples:","code":""},{"path":"https://eppicenter.github.io/sampleDB/articles/Updating-References.html","id":"adding-a-study","dir":"Articles","previous_headings":"","what":"Adding a study","title":"Updating References","text":"Pick Study Title, Study Description, Lead Person, Study Short Code new study entered SampleDB. adding new studies sure check study already exist, otherwise multiple names study. can different types specimens study use study name. Study title name study, ie. “LLINEUP2” “IMMRSE-U”. study short code need included CSV whenever samples uploaded. example, good study short code PRISM Border Cohort PBC. IMMRSE-U, use IM. LLINEUP2, LN2. study description specific possible, someone unfamiliar study using database understand samples obtained. “IMMRSE-U” described “DBS collected 30 malaria reference centers malaria genomic surveillance 2022-2025”. “LLINEUP2” described “DBS collected repeated cross-sectional surveys 64 sites part cluster-RCT trial bednets 2020-2023”. lead person specific, someone referencing database future, know contact. ***steps must done attempting upload plates study.***","code":""},{"path":[]},{"path":"https://eppicenter.github.io/sampleDB/articles/Uploading-Cryovial-Specimens.html","id":"verify-that-the-physical-samples-sample-metadata-align","dir":"Articles","previous_headings":"Steps to Upload Cryovials","what":"Verify that the physical samples & sample metadata align","title":"Uploading Cryovial Specimens","text":"receive shipment, receive manifest contents box. Either scan barcodes, spot checks ensure order aligns map.","code":""},{"path":"https://eppicenter.github.io/sampleDB/articles/Uploading-Cryovial-Specimens.html","id":"build-csv-and-upload","dir":"Articles","previous_headings":"Steps to Upload Cryovials","what":"Build CSV and upload","title":"Uploading Cryovial Specimens","text":"upload interface, choose “Samples” “Choose Upload Type”, “Cryovial” “Sample Storage Type”. Download template selecting “Download” main page Enter information provided headers (refer “Modify CSV file include metadata” information headers). Make sure date format ”YYYY-MM-DD” entries CollectionDate. Finally, save document CSV.","code":""},{"path":"https://eppicenter.github.io/sampleDB/articles/Uploading-Cryovial-Specimens.html","id":"validation-for-cryovials","dir":"Articles","previous_headings":"","what":"Validation for Cryovials","title":"Uploading Cryovial Specimens","text":"Cryovials similar validation checks micronix samples. example, tube placed location existing, active tube. positions must also letters rows - can introduce confusion manifests may use numbers instead, want convert numbers letters. also tests applied unique cryovials place due different constraints cryovials (barcodes may may exist, barcodes may unique, etc.). Additional validation put place ensure cryovial identifiable. following validation tests applied upload cryovial: Barcode uniqueness: Cryovial barcodes unique Study SpecimenType. Failure meet requirement result warning message - block uploading data. Message: “Barcode must unique Study SpecimenType” Check dates present samples part longitudinal study. Samples fail flagged. Message: “Missing collection date found sample longitudinal study” Check study subjects unique within non-longitudinal study. upload contains study subject introduce duplicate database, sample flagged. Message: \"Study subjects must unique studies longitudinal\" Validate study subjects collection dates unique longitudinal study. Message: \"Study subject collection date must unique within longitudinal study\" Validate study, specimen type, locations exist database. subject missing metadata flagged. NOTE: entered already “references” tab. samples flagged, first look make sure data exists database. Messages: \"Study already exists database\" “Specimen Type Reference Validation\" “following FreezerName, RackName, /RackPosition > found database\" Validate cryovials uploaded empty wells. Samples uploaded position shared another cryovial flagged. Message: \"Uploading sample Cryovial well location already active sample\"","code":""},{"path":[]},{"path":"https://eppicenter.github.io/sampleDB/articles/Uploading-Micronix-Specimens.html","id":"scan-a-plate","dir":"Articles","previous_headings":"Steps to Upload Micronix Plates","what":"Scan a Plate","title":"Uploading Micronix Specimens","text":"Ensure format Micronix Scanner appropriate; example, metadata A01-A12 format, want scanner scan rows; metadata A01-H01 format, want scanner scan columns Change clicking settings . Align A1 Micronix plate A1 scanner. Scan micronix plate, result .csv file columns follows:","code":""},{"path":"https://eppicenter.github.io/sampleDB/articles/Uploading-Micronix-Specimens.html","id":"modify-csv-file-to-include-all-specimen-and-logistical-metadata","dir":"Articles","previous_headings":"Steps to Upload Micronix Plates","what":"Modify CSV file to include all Specimen and Logistical Metadata","title":"Uploading Micronix Specimens","text":"Open .csv using Excel CSV editor (ie. ModernCSV). Add new columns: StudyCode, StudySubject, SpecimenType, CollectionDate. columns hold specimen level metadata needed record sample. StudyCode - study associated sample. must match one study codes database already. find study code study, can go References > Studies, search study using Search bar upper right hand corner. code Study Code. StudySubject - unique identifier participant sample study (e.g. cohort ID PRISM Border Cohort). SpecimenType - Must match exactly one specimen types “References” “Specimen Type” panel. Usually plates hold one specimen type. CollectionDate - Date sample collected (date entered SampleDB). Format “YYYY-MM-DD”. Excel, highlight column, right-click “Format Cells” chose “Date,” “Language” chose “English (UK)” “Type” chose “YYYY-MM-DD” longitudinal study need date link sample correct participant/ date, multiple samples different days. use study subject identifier non-longitudinal study (uniquehas unique study subject identifier), date necessary. collection date, always better include . See example (without CollectionDate): collection date sample longitudinal study, use “UNK” “UNKNOWN” placeholder. Longitudinal studies require CollectionDate column. also need include information location plate. Add new columns: FreezerName, ShelfName, BasketName. columns simply provide way identify plate using three levels information can defined lab. simple example may choose define plate locations freezer. FreezerName - name freezer micronix plate go. ShelfName - shelf micronix plate go. BasketName - part shelf samples go.","code":""},{"path":"https://eppicenter.github.io/sampleDB/articles/Uploading-Micronix-Specimens.html","id":"upload-micronix-tubes-csv","dir":"Articles","previous_headings":"Steps to Upload Micronix Plates","what":"Upload Micronix tubes CSV","title":"Uploading Micronix Specimens","text":"Navigate “Upload Specimens” panel Select “Micronix” “Sample Storage Type” Choose scanner type (Traxcer, Visionmate, NA). Browse CSV. Push “Upload Samples”","code":""},{"path":"https://eppicenter.github.io/sampleDB/articles/Uploading-Micronix-Specimens.html","id":"validation-for-micronix-uploads","dir":"Articles","previous_headings":"","what":"Validation for Micronix Uploads","title":"Uploading Micronix Specimens","text":"soon load file, sample checked series validation functions. validation functions flag samples pass check, block upload happening. happens, see dialog appear provide message failed test, list samples failed particular test. following validation tests applied upload micronix samples: Check micronix barcode uniqueness: micronix barcodes unique. barcode file found database (file), sample flagged: Message: “Micronix barcode already exists database” Validate study, specimen type, locations exist database. subject missing metadata flagged. NOTE: entered already “references” tab. samples flagged, first look make sure data exists database. Messages: \"Study already exists database\" “Specimen Type Reference Validation\" “following FreezerName, ShelfName, /> BasketPosition found database\" Check dates present samples part longitudinal study. Samples fail flagged. Message: “Missing collection date found sample longitudinal study” Check study subjects unique within non-longitudinal study. upload contains study subject introduce duplicate database, sample flagged. Message: \"Study subjects must unique studies longitudinal\" Validate study subjects collection dates unique longitudinal study. Message: \"Study subject collection date must unique within longitudinal study\" Validate micronix uploaded empty wells. Samples uploaded position shared another micronix tube flagged. Message: \"Uploading sample Micronix well location already active sample\"","code":""},{"path":"https://eppicenter.github.io/sampleDB/articles/Validation.html","id":"validation-types","dir":"Articles","previous_headings":"","what":"Validation types","title":"Validation","text":"may encounter Errors Warnings file pass validation. Errors prevent performing action attempting. Warnings appear issues file, prevent performing action. must acknowledge warning proceeding upload. allowed acknowledge warning errors fixed. example error warning. color coded.  need address errors continuing action. Warnings also appear dialog well. addressed, next time perform action, see dialog .  need acknowledge warning fix issue proceeding. acknowledge warning, need perform action , see dialog.","code":""},{"path":"https://eppicenter.github.io/sampleDB/articles/qPCR-Workflow.html","id":"preparing-your-plate-in-sampledb","dir":"Articles","previous_headings":"","what":"Preparing your plate in SampleDB","title":"SampleDB qPCR Workflow","text":"order SampleDB generate qPCR template plate, plate SampleDB must meet following criteria. controls may exist wells A11-E11, must arranged descending order concentration. Wells A12-E12 remain empty. Wells H11 H12 reserved negative control. requirements place ensure samples controls keep metadata linked throughout qPCR process enforcing standard layout. use Biological Replicates controls let SampleDB record replicates wells A12-E12 using information controls wells A11-E11. requirements checked (see ‘Validation Details’ ). may samples, controls empty wells wells A1-H10, F11-F12 G11-G12. scan plate Traxcer scanner generate ‘Move’ file. completed, see plate search panel samples extracted controls.","code":"Please review `How to Move Samples and Controls` page for more information on how to move samples and controls."},{"path":"https://eppicenter.github.io/sampleDB/articles/qPCR-Workflow.html","id":"downloading-a-qpcr-template","dir":"Articles","previous_headings":"","what":"Downloading a qPCR Template","title":"SampleDB qPCR Workflow","text":"begin download, start searching plate. attempt start process without searching plate, SampleDB stop .  allowed missing samples. sample wells A1-H10, see dialog . Press ‘Okay’ continue missing samples reported wells.  Controls expected decrement. wells A11-E11, expected controls densities near 10K, 1K, 100, 10, 1 p / uL, respectively. densities exact. see dialog SampleDB detects specified control expected density given ’s position. everything looks okay, press ‘Okay’ continue.  Finally, see color-coded visualization plate. Wells samples yellow micronix barcode specimen type recorded cell. Wells controls green micronix barcode, specimen type density recorded. Wells empty text grey. negative control (wells H11-H12) say NTC first two rows (wells micronix barcode specimen type), say ‘Negative’ third row density ususally recorded. Proper image added … everything looks correct, press ‘Download qPCR Table’. tab-deliminited text file generated .","code":""},{"path":"https://eppicenter.github.io/sampleDB/articles/qPCR-Workflow.html","id":"how-to-upload-your-template-to-quantstudio3-thermocycler","dir":"Articles","previous_headings":"","what":"How to upload your template to QuantStudio3 ThermoCycler","title":"SampleDB qPCR Workflow","text":"need make sure file located computer controlling thermocycler. ’ve opened application, go ‘File’ > ‘Import Plate Experiment’. Enter file downloaded. see success dialog box, uploaded plate.","code":""},{"path":"https://eppicenter.github.io/sampleDB/articles/qPCR-Workflow.html","id":"validation-details","dir":"Articles","previous_headings":"","what":"Validation Details","title":"SampleDB qPCR Workflow","text":"two validation errors may see.","code":""},{"path":"https://eppicenter.github.io/sampleDB/articles/qPCR-Workflow.html","id":"non-control-in-a-standard-position-","dir":"Articles","previous_headings":"Validation Details","what":"“Non-control in a standard position.”","title":"SampleDB qPCR Workflow","text":"means sample wells A11-E11, reserved controls, wells H11-H12, reserved negative controls.","code":""},{"path":"https://eppicenter.github.io/sampleDB/articles/qPCR-Workflow.html","id":"empty-well-in-a-standard-position-non-ntc-","dir":"Articles","previous_headings":"Validation Details","what":"“Empty well in a standard position (non-NTC).”","title":"SampleDB qPCR Workflow","text":"means control missing wells A11-E11.","code":""},{"path":"https://eppicenter.github.io/sampleDB/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Brian Palmer. Author, maintainer. Severiano Villarruel. Author. EPPIcenter. Funder.","code":""},{"path":"https://eppicenter.github.io/sampleDB/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Palmer B, Villarruel S (2025). sampleDB: Organize Wetlab Samples sampleDB. R package version 2.0.0.","code":"@Manual{,   title = {sampleDB: Organize your Wetlab Samples with sampleDB},   author = {Brian Palmer and Severiano Villarruel},   year = {2025},   note = {R package version 2.0.0}, }"},{"path":[]},{"path":"https://eppicenter.github.io/sampleDB/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Organize your Wetlab Samples with sampleDB","text":"SampleDB Management System Wet Lab Samples.","code":""},{"path":"https://eppicenter.github.io/sampleDB/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Organize your Wetlab Samples with sampleDB","text":"SampleDB can installed upgraded using Docker GitHub. Please see Docker GitHub sections see install upgrade source.","code":""},{"path":[]},{"path":"https://eppicenter.github.io/sampleDB/index.html","id":"first-time-installation","dir":"","previous_headings":"Installation > Docker","what":"First Time Installation","title":"Organize your Wetlab Samples with sampleDB","text":"preferred way setup sampleDB docker image come dependencies needed run application. Please follow steps ensure setup done correctly.","code":""},{"path":"https://eppicenter.github.io/sampleDB/index.html","id":"id_1-create-a-volume","dir":"","previous_headings":"Installation > Docker > First Time Installation","what":"1. Create a volume","title":"Organize your Wetlab Samples with sampleDB","text":"first create volume contain sampleDB database. Start running command :","code":"docker volume create sampledb_database"},{"path":"https://eppicenter.github.io/sampleDB/index.html","id":"id_2-create-the-image","dir":"","previous_headings":"Installation > Docker > First Time Installation","what":"2. Create the image","title":"Organize your Wetlab Samples with sampleDB","text":"two ways obtain sampleDB image. can either pull image DockerHub may build locally. Instructions can found .","code":""},{"path":"https://eppicenter.github.io/sampleDB/index.html","id":"option-1-pull-from-dockerhub","dir":"","previous_headings":"","what":"Organize your Wetlab Samples with sampleDB","title":"Organize your Wetlab Samples with sampleDB","text":"docker image sampleDB can pulled DockerHub. pull DockerHub, run command :","code":"docker pull eppicenter/sampledb:v2.6.0"},{"path":"https://eppicenter.github.io/sampleDB/index.html","id":"option-2-build-the-image","dir":"","previous_headings":"","what":"Organize your Wetlab Samples with sampleDB","title":"Organize your Wetlab Samples with sampleDB","text":"can build image instead pulling DockerHub. , run following command:","code":"docker build -t eppicenter/sampledb:v2.6.0 ."},{"path":"https://eppicenter.github.io/sampleDB/index.html","id":"id_3-create-your-container","dir":"","previous_headings":"Installation > Docker > First Time Installation","what":"3. Create your container","title":"Organize your Wetlab Samples with sampleDB","text":"final step. host localhost port 8080 used access application within container, volumes needed run container passed command line. Notice sampleDB database volume also include list volumes.","code":"docker run -d -p 8080:3838 -v sampledb_database:/usr/local/share/sampleDB --restart unless-stopped --name sampleDB eppicenter/sampledb:v2.6.0"},{"path":"https://eppicenter.github.io/sampleDB/index.html","id":"id_4-access-sampledb","dir":"","previous_headings":"Installation > Docker > First Time Installation","what":"4. Access sampleDB","title":"Organize your Wetlab Samples with sampleDB","text":"may now access sampleDB browser navigating http://localhost:8080/sampleDB/.","code":""},{"path":"https://eppicenter.github.io/sampleDB/index.html","id":"upgrading-sampledb","dir":"","previous_headings":"Installation > Docker","what":"Upgrading SampleDB","title":"Organize your Wetlab Samples with sampleDB","text":"performing upgrade, ’s important create backup database. backup plan already (!), can easily copy database container current directory using: done, can type ls see database (sampledb_database.sqlite) directory. Store file safe place. upgrade sampleDB, pull build image using either commands form Option 2: Build image. done, stop current container optionally remove like . assumes container called sampleDB. removing container, allow reuse container name. database stored volume separate container, impacted removing container. done, run following command create container using new sampleDB image. [!NOTE] possibly prompted upgrade database. upgrade necessary order work application, allowed use application without first upgrading database.","code":"docker cp sampleDB:/usr/local/share/sampleDB/sampledb_database.sqlite . docker stop sampleDB docker rm sampleDB # Optional, this will let you reuse the container name docker run -d -p 8080:3838 -v sampledb_database:/usr/local/share/sampleDB --restart unless-stopped --name sampleDB eppicenter/sampledb:v2.6.0"},{"path":"https://eppicenter.github.io/sampleDB/index.html","id":"github","dir":"","previous_headings":"Installation","what":"GitHub","title":"Organize your Wetlab Samples with sampleDB","text":"Please take second review sections installing application.","code":""},{"path":"https://eppicenter.github.io/sampleDB/index.html","id":"hosted-versus-local-application-instances","dir":"","previous_headings":"Installation > GitHub","what":"Hosted versus local application instances","title":"Organize your Wetlab Samples with sampleDB","text":"sampleDB shiny application can hosted shiny server can run locally. like link application server, must install application site library pathways. Otherwise, okay install package locally (site level) run shiny application using Run_SampleDB().","code":""},{"path":"https://eppicenter.github.io/sampleDB/index.html","id":"data-availability","dir":"","previous_headings":"Installation > GitHub","what":"Data availability","title":"Organize your Wetlab Samples with sampleDB","text":"Data access another important consideration, affect installation choice. like users access database, must install using site library pathway. Local installs install data files operating system’s default location user data, therefore prevent users accessing data. System installs place database default location shared application data accessble anyone uses application.","code":""},{"path":[]},{"path":"https://eppicenter.github.io/sampleDB/index.html","id":"site-install","dir":"","previous_headings":"Installation > GitHub > Command to setup external environment","what":"Site Install","title":"Organize your Wetlab Samples with sampleDB","text":"install sampleDB site level, can run command using R process elevated privileges: run elevated R process, can run sudo R terminal. can also launch elevated rstudio instance opening terminal running sudo rstudio.","code":"remotes::install_github(     \"https://github.com/EPPIcenter/sampleDB-rpackage\",      ref = \"v2.6.0\",     lib = .libPaths()[1] )"},{"path":"https://eppicenter.github.io/sampleDB/index.html","id":"local-install","dir":"","previous_headings":"Installation > GitHub > Command to setup external environment","what":"Local Install","title":"Organize your Wetlab Samples with sampleDB","text":"local install, command sufficient within regular RStudio terminal launch:","code":"remotes::install_github(     \"https://github.com/EPPIcenter/sampleDB-rpackage\",      ref = \"v2.6.0\" )"},{"path":"https://eppicenter.github.io/sampleDB/index.html","id":"set-up-and-upgrades","dir":"","previous_headings":"Installation > GitHub","what":"Set Up and Upgrades","title":"Organize your Wetlab Samples with sampleDB","text":"set upgrade sampleDB, run command . previously mentioned, variety ways install application. example output SampleDB_Setup() site install shiny server installed: ✔ indicates successful installation directory file, whereas ✖ indicates process run sucessfully. see ✖ issue linking application shiny server. setup processes always run: Deploying sampleDB Environment runs first, followed Deploying sampleDB Shiny Application. always see processes setup - currently way turn second process.","code":"SampleDB_Setup() ── Deploying sampleDB Environment ────────────────────────────────────────────── ✔ Database location set [/usr/local/share/sampleDB/sampledb_database.sqlite] ✔ Database installed [/usr/local/share/sampleDB/sampledb_database.sqlite] ✔ Subdirectory installed [/usr/local/share/sampleDB/backups] ✔ Subdirectory installed [/usr/local/share/sampleDB/upload_files] ✔ Subdirectory installed [/usr/local/share/sampleDB/move_files] ── Deploying sampleDB Shiny Application ──────────────────────────────────────── ✖ Shiny server is not installed."},{"path":"https://eppicenter.github.io/sampleDB/index.html","id":"database-backups","dir":"","previous_headings":"","what":"Database Backups","title":"Organize your Wetlab Samples with sampleDB","text":"database backup time session begins, unless database changed since last backup. recent 10 backups kept. location backup folder can found running SampleDB_Setup() (function overwrite), recommended keep additional copies backups. One easiest ways create backup Backup_SampleDB() function provided package. function default creates backup default backup folder, although may pass filepath backup_dest (e.g. /path//file.backup) overwrite default behavior.","code":""},{"path":[]},{"path":"https://eppicenter.github.io/sampleDB/index.html","id":"macos-permission-issues","dir":"","previous_headings":"FAQ","what":"MacOS Permission Issues","title":"Organize your Wetlab Samples with sampleDB","text":"working Mac run permission issues, may need run SampleDB elevated permissions. run Rstudio administrator: - Go Applications, right click RStudio Select “Show Package Contents” - Navigate Contents > MacOS, directory see RStudio.exec - Terminal, enter sudo path RStudio.exec (alternatively can drag drop RStudio.exec Terminal). press enter. Example: Now RStudio launch admin access","code":"sudo /Applications/RStudio.app/Contents/MacOS/RStudio"},{"path":"https://eppicenter.github.io/sampleDB/index.html","id":"i-ran-run_sampledb-but-the-i-see-an-error-message","dir":"","previous_headings":"FAQ","what":"I ran Run_SampleDB() but the I see an error message","title":"Organize your Wetlab Samples with sampleDB","text":"First run SampleDB_Setup(). create database setup dependencies.","code":""},{"path":"https://eppicenter.github.io/sampleDB/index.html","id":"i-installed-the-application-but-i-cannot-upload-files","dir":"","previous_headings":"FAQ","what":"I installed the application but I cannot upload files","title":"Organize your Wetlab Samples with sampleDB","text":"Locations, studies, specimen types need defined first can referenced upload files. can find panels Update References tab.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/ArchiveAndDeleteControls.html","id":null,"dir":"Reference","previous_headings":"","what":"Archive and Delete Wetlab EPPIcenter Samples — ArchiveAndDeleteControls","title":"Archive and Delete Wetlab EPPIcenter Samples — ArchiveAndDeleteControls","text":"Archive delete wetlab samples.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/ArchiveAndDeleteControls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Archive and Delete Wetlab EPPIcenter Samples — ArchiveAndDeleteControls","text":"","code":"ArchiveAndDeleteControls(   operation,   control_type,   data,   comment,   status,   verification = TRUE,   database = Sys.getenv(\"SDB_PATH\") )"},{"path":"https://eppicenter.github.io/sampleDB/reference/ArchiveAndDeleteControls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Archive and Delete Wetlab EPPIcenter Samples — ArchiveAndDeleteControls","text":"operation string specifying type operation perform. Valid operations archive delete. archive used delete external data sample (cryovial_tube/paper/rdt information, container information, storage location) preserve internal data (sample id, specimen information, study subject information). operation can used example micronix cryovial_tube emptied rancid needs discarded. delete used remove traces sample (internal external data). Deletions recursive sense sample ids associated samples entire cryovial_box deleted cryovial_box automatically deleted. verification logical value. set TRUE user verification operation required. set false user verification bypassed. Default set TRUE. sample_id numeric vector one sample IDs (also referred storage container IDs). Can accessed using SearchSamples().","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/ArchiveAndDeleteControls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Archive and Delete Wetlab EPPIcenter Samples — ArchiveAndDeleteControls","text":"","code":"if (FALSE) { # \\dontrun{ ArchiveAndDeleteSamples(operation = \"delete\", sample_id = c(7:10)) ArchiveAndDeleteSamples(operation = \"archive\", sample_id = 100) } # }"},{"path":"https://eppicenter.github.io/sampleDB/reference/ArchiveAndDeleteSamples.html","id":null,"dir":"Reference","previous_headings":"","what":"Archive and Delete Samples — ArchiveAndDeleteSamples","title":"Archive and Delete Samples — ArchiveAndDeleteSamples","text":"Archive Delete Samples","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/ArchiveAndDeleteSamples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Archive and Delete Samples — ArchiveAndDeleteSamples","text":"","code":"ArchiveAndDeleteSamples(   operation,   data,   comment,   status_id,   verification = TRUE )"},{"path":"https://eppicenter.github.io/sampleDB/reference/ArchiveAndDeleteSamples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Archive and Delete Samples — ArchiveAndDeleteSamples","text":"None","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/Backup_SampleDB.html","id":null,"dir":"Reference","previous_headings":"","what":"Backup Sample Database — Backup_SampleDB","title":"Backup Sample Database — Backup_SampleDB","text":"Backs sample database optionally compares latest backup detect changes. function automatically compresses backup file.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/Backup_SampleDB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Backup Sample Database — Backup_SampleDB","text":"","code":"Backup_SampleDB(   database = Sys.getenv(\"SDB_PATH\"),   backup_dir = NULL,   checksum = TRUE )"},{"path":"https://eppicenter.github.io/sampleDB/reference/Backup_SampleDB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Backup Sample Database — Backup_SampleDB","text":"database Path sample database, defaults \"SDB_PATH\" environment variable. backup_dir Directory store backups; NULL, defaults subdirectory 'backups' database directory. checksum Logical; TRUE, checks new backup different last one.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/ColumnData.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a ColumnData S3 object — ColumnData","title":"Create a ColumnData S3 object — ColumnData","text":"function serves constructor ColumnData S3 class. used represent column information structured manner.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/ColumnData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a ColumnData S3 object — ColumnData","text":"","code":"ColumnData(required = NULL, conditional = NULL, optional = NULL)"},{"path":"https://eppicenter.github.io/sampleDB/reference/ColumnData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a ColumnData S3 object — ColumnData","text":"required vector NULL. Represents required columns. conditional vector NULL. Represents conditional columns. optional vector NULL. Represents optional columns.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/ColumnData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a ColumnData S3 object — ColumnData","text":"S3 object class 'ColumnData'.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/DeleteEmptyContainer.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete Empty Wetlab Containers in the EPPIcenter SampleDB database — DeleteEmptyContainer","title":"Delete Empty Wetlab Containers in the EPPIcenter SampleDB database — DeleteEmptyContainer","text":"Delete Empty Wetlab Containers EPPIcenter SampleDB database","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/DeleteEmptyContainer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete Empty Wetlab Containers in the EPPIcenter SampleDB database — DeleteEmptyContainer","text":"","code":"DeleteEmptyContainer(type, container_name, conn)"},{"path":"https://eppicenter.github.io/sampleDB/reference/DeleteWholeBloodSamples.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete Whole Blood Controls — DeleteWholeBloodSamples","title":"Delete Whole Blood Controls — DeleteWholeBloodSamples","text":"function deletes whole blood controls database based provided list whole_blood_tube IDs. also handles deletion associated records whole blood sample last one study subject.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/DeleteWholeBloodSamples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete Whole Blood Controls — DeleteWholeBloodSamples","text":"","code":"DeleteWholeBloodSamples(whole_blood_tube_ids)"},{"path":"https://eppicenter.github.io/sampleDB/reference/DeleteWholeBloodSamples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete Whole Blood Controls — DeleteWholeBloodSamples","text":"whole_blood_tube_ids vector containing IDs whole blood tubes deleted.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/DeleteWholeBloodSamples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete Whole Blood Controls — DeleteWholeBloodSamples","text":"None","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/DeleteWholeBloodSamples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete Whole Blood Controls — DeleteWholeBloodSamples","text":"","code":"if (FALSE) { # \\dontrun{ # Delete whole blood controls with IDs 1, 2, and 3 DeleteWholeBloodSamples(c(1, 2, 3)) } # }"},{"path":"https://eppicenter.github.io/sampleDB/reference/ErrorData.html","id":null,"dir":"Reference","previous_headings":"","what":"ErrorData class — ErrorData","title":"ErrorData class — ErrorData","text":"class represents individual error found data. includes error description row numbers column names error found.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/ErrorData.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"ErrorData class — ErrorData","text":"description character string describing error. columns character vector column names error found. rows integer vector row numbers error found. data_frame dataframe samples triggered error.","code":""},{"path":[]},{"path":"https://eppicenter.github.io/sampleDB/reference/ErrorData.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"ErrorData class — ErrorData","text":"ErrorData$new() ErrorData$clone()","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/ErrorData.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"ErrorData class — ErrorData","text":"Initialize method ErrorData class.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/ErrorData.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ErrorData class — ErrorData","text":"","code":"ErrorData$new(   description = NULL,   columns = NULL,   rows = NULL,   data_frame = NULL )"},{"path":"https://eppicenter.github.io/sampleDB/reference/ErrorData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ErrorData class — ErrorData","text":"description character string describing error. Default NULL. columns character vector column names error found. Default NULL. rows integer vector row numbers error found. Default NULL. data_frame data.frame invalid data. Can used instead providing rows columns. Default NULL.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/ErrorData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ErrorData class — ErrorData","text":"method sets new ErrorData object. data.frame provided, use column names 'RowNumber' column columns rows, respectively. , columns rows arguments used. stop error neither data.frame provided columns rows.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/ErrorData.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"ErrorData class — ErrorData","text":"initialized ErrorData object.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/ErrorData.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"ErrorData class — ErrorData","text":"objects class cloneable method.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/ErrorData.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"ErrorData class — ErrorData","text":"","code":"ErrorData$clone(deep = FALSE)"},{"path":"https://eppicenter.github.io/sampleDB/reference/ErrorData.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"ErrorData class — ErrorData","text":"deep Whether make deep clone.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/MoveContainers.html","id":null,"dir":"Reference","previous_headings":"","what":"Move Wetlab Containers in the EPPIcenter SampleDB database — MoveContainers","title":"Move Wetlab Containers in the EPPIcenter SampleDB database — MoveContainers","text":"Move Wetlab Containers EPPIcenter SampleDB database","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/MoveContainers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Move Wetlab Containers in the EPPIcenter SampleDB database — MoveContainers","text":"","code":"MoveContainers(sample_type, container_name, freezer, conn)"},{"path":"https://eppicenter.github.io/sampleDB/reference/MoveContainers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Move Wetlab Containers in the EPPIcenter SampleDB database — MoveContainers","text":"sample_type string specifying type samples moved. Options include: micronix, cryovial, rdt paper container_name vector specifying name container moved freezer list specifying vector name, level_I, /orlevel_II","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/MoveSpecimens.html","id":null,"dir":"Reference","previous_headings":"","what":"Move Wetlab Samples — MoveSpecimens","title":"Move Wetlab Samples — MoveSpecimens","text":"MoveSamples() can used move existing wetlab samples : two () existing containers one () existing container one () existing container","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/MoveSpecimens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Move Wetlab Samples — MoveSpecimens","text":"","code":"MoveSpecimens(sample_type, move_data)"},{"path":"https://eppicenter.github.io/sampleDB/reference/MoveSpecimens.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Move Wetlab Samples — MoveSpecimens","text":"sample_type string specifying type samples moved. Options include: micronix, cryovial, whole_blood, rdt, paper. move_data list SampleDB move dataframes, name dataframe item container samples move.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/MoveSpecimens.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Move Wetlab Samples — MoveSpecimens","text":"","code":"if (FALSE) { # \\dontrun{ move_data <- list(\"move_csv1_container_name\" = dataframe(), \"move_csv2_container_name\" = dataframe()) MoveSamples(sample_type = \"micronix\", move_data = move_data) } # }"},{"path":"https://eppicenter.github.io/sampleDB/reference/RenameContainers.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename Wetlab Containers in the EPPIcenter SampleDB database — RenameContainers","title":"Rename Wetlab Containers in the EPPIcenter SampleDB database — RenameContainers","text":"Rename Wetlab Containers EPPIcenter SampleDB database","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/RenameContainers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename Wetlab Containers in the EPPIcenter SampleDB database — RenameContainers","text":"","code":"RenameContainers(sample_type, new_container_name, current_container_name, conn)"},{"path":"https://eppicenter.github.io/sampleDB/reference/RenameContainers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename Wetlab Containers in the EPPIcenter SampleDB database — RenameContainers","text":"sample_type string specifying type samples moved. Options include: micronix, cryovial, rdt paper new_container_name vector specifying name container moved current_container_name vector specifying name container moved","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/Run_SampleDB.html","id":null,"dir":"Reference","previous_headings":"","what":"Run sampleDB as a R Shiny App — Run_SampleDB","title":"Run sampleDB as a R Shiny App — Run_SampleDB","text":"Launch sampleDB R Shiny application.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/Run_SampleDB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run sampleDB as a R Shiny App — Run_SampleDB","text":"","code":"Run_SampleDB(host = \"0.0.0.0\", port = 3838)"},{"path":"https://eppicenter.github.io/sampleDB/reference/Run_SampleDB.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run sampleDB as a R Shiny App — Run_SampleDB","text":"","code":"if (FALSE) { # \\dontrun{ RunSampleDB() } # }"},{"path":"https://eppicenter.github.io/sampleDB/reference/SampleDB_Setup.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up and deploy the SampleDB environment, database, and Shiny server. — SampleDB_Setup","title":"Set up and deploy the SampleDB environment, database, and Shiny server. — SampleDB_Setup","text":"function orchestrates deployment SampleDB environment, database, Shiny server based user preferences. function calls appropriate helper functions achieve steps.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/SampleDB_Setup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up and deploy the SampleDB environment, database, and Shiny server. — SampleDB_Setup","text":"","code":"SampleDB_Setup(   env = TRUE,   db = TRUE,   server = TRUE,   reset_env_variables = FALSE )"},{"path":"https://eppicenter.github.io/sampleDB/reference/SampleDB_Setup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up and deploy the SampleDB environment, database, and Shiny server. — SampleDB_Setup","text":"env Logical flag indicating whether setup environment. Defaults TRUE. db Logical flag indicating whether setup database. Defaults TRUE. server Logical flag indicating whether deploy Shiny server. Defaults TRUE.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/SampleDB_Setup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up and deploy the SampleDB environment, database, and Shiny server. — SampleDB_Setup","text":"NULL (function primarily called side effects).","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/SampleDB_Setup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set up and deploy the SampleDB environment, database, and Shiny server. — SampleDB_Setup","text":"","code":"if (FALSE) { # \\dontrun{   SampleDB_Setup(env = TRUE, db = TRUE, server = TRUE) } # }"},{"path":"https://eppicenter.github.io/sampleDB/reference/SearchByType.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for Wetlab Samples in the EPPIcenter SampleDB database — SearchByType","title":"Search for Wetlab Samples in the EPPIcenter SampleDB database — SearchByType","text":"Search wetlab samples.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/SearchByType.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for Wetlab Samples in the EPPIcenter SampleDB database — SearchByType","text":"","code":"SearchByType(   sample_storage_type = NULL,   control_type = NULL,   filters = NULL,   format = NULL,   database = Sys.getenv(\"SDB_PATH\"),   config_yml = Sys.getenv(\"SDB_CONFIG\"),   include_internal_sample_id = FALSE )"},{"path":"https://eppicenter.github.io/sampleDB/reference/SearchByType.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for Wetlab Samples in the EPPIcenter SampleDB database — SearchByType","text":"sample_type string specifying type EPPIcenter sample. (micronix, cryovile, rdt /paper) sample_label list vectors specifying vector micronix, cryovile, rdt, paper label names (micronix.label_name, cryovile.label_name, rdt.label_name /paper.label_name) container_name list vectors specifying vector micronix, cryovile, rdt, paper container names (micronix.container_name, cryovile.container_name, rdt.container_name /paper.container_name) study_subject study subjects string vector study name strings. study_subject.file TRUE path .csv file containing one column named study_subject can uploaded used search database study subjects. specimen_type specimen type string vector specimen type strings. study study short code string vector study short code strings. collection_dates list date values strings (date.date.) can used filter EPPIcenter samples archived logical value. TRUE filters archived samples FALSE filters active samples freezer list specifying vector name, level_I, /orlevel_II return_sample_ids logical value. Setting return_sample_ids TRUE means SearchSamples returns sample ids well search results. Setting return_sample_ids FALSE means SearchSamples returns search results. Default value FALSE.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/SearchByType.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search for Wetlab Samples in the EPPIcenter SampleDB database — SearchByType","text":"","code":"if (FALSE) { # \\dontrun{ SearchSamples(study = \"KAM06\", study_subject = \"subject_1\") } # }"},{"path":"https://eppicenter.github.io/sampleDB/reference/SearchControls.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all malaria blood controls — SearchControls","title":"Get all malaria blood controls — SearchControls","text":"SearchControls() can used upload controls sampleDB database. function returns lazy-sql.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/SearchControls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all malaria blood controls — SearchControls","text":"","code":"SearchControls(   filters,   control_type = NULL,   database = Sys.getenv(\"SDB_PATH\"),   include_internal_control_id = FALSE )"},{"path":"https://eppicenter.github.io/sampleDB/reference/SearchControls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all malaria blood controls — SearchControls","text":"con dplyr dbConnect() connection object","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/UpdateReferences.html","id":null,"dir":"Reference","previous_headings":"","what":"Update References in the EPPIcenter SampleDB database — UpdateReferences","title":"Update References in the EPPIcenter SampleDB database — UpdateReferences","text":"Update References EPPIcenter SampleDB database","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/UpdateReferences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update References in the EPPIcenter SampleDB database — UpdateReferences","text":"","code":"UpdateReferences(reference, operation, identifier = NULL, update = NULL)"},{"path":"https://eppicenter.github.io/sampleDB/reference/UpdateReferences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update References in the EPPIcenter SampleDB database — UpdateReferences","text":"reference string specifying type EPPIcenter reference (freezer, specimen_type, study). operation string specifying type update operation perform (add, modify, delete). identifier reference-specific list identifies reference item updated. reference freezer identifier list must include: freezer_name: string specifying freezer name freezer_levelI: string specifying freezer levelI name freezer_levelII: string specifying freezer levelII name reference specimen_type identifier list must include: specimen_type_name: string specifying specimen type name reference study identifier list must include: study_short_code: string specifying study short code update reference-specific list contains reference update information reference freezer update, add operations list must include: freezer_name: string specifying freezer name freezer_type: string specifying freezer type freezer_levelI: string specifying freezer levelI name freezer_levelII: string specifying freezer levelII name reference specimen_type update, add operations list must include: specimen_type_name: string specifying specimen type name reference study update, add operations list must include: study_title: string specifying study title study_description: string specifying study description study_short_code: string specifying study short code study_lead_person: string specifying study lead person study_longitudinal: logical value. TRUE study longitudinal FALSE study longitudinal modify operations update items optional","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/UpdateReferences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update References in the EPPIcenter SampleDB database — UpdateReferences","text":"","code":"if (FALSE) { # \\dontrun{ UpdateReferences(reference = \"freezer\", operation = \"add\", update = list(freezer_name = \"Ruth\", freezer_type = \"-80\", freezer_levelI = \"rack1\", freezer_levelII = \"position_C1\")) } # }"},{"path":"https://eppicenter.github.io/sampleDB/reference/UploadSpecimens.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload Wetlab Samples — UploadSpecimens","title":"Upload Wetlab Samples — UploadSpecimens","text":"UploadSamples() can used upload wetlab samples sampleDB database.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/UploadSpecimens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload Wetlab Samples — UploadSpecimens","text":"","code":"UploadSpecimens(   user_data,   storage_type_id = NULL,   database = Sys.getenv(\"SDB_PATH\") )"},{"path":"https://eppicenter.github.io/sampleDB/reference/UploadSpecimens.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload Wetlab Samples — UploadSpecimens","text":"storage_type_id string specifying type samples uploaded Options include: micronix, cryovial dbs upload_data dataframe SampleDB Upload data. Required upload_data columns :position: row column sample storage housing label: sample's label barcode study_subject_id: StudySubject id subject cohort (ie study) study_short_code: code study specimen_type: sample type collection_date: (optional) date sample first collected cohort StudySubject #' upload data example without collection_date upload data example collection_date container_name string specifying name container samples . Names must unique within sample type. container_barcode string specifying barcode container samples . Container barcodes optional. Barcodes must unique within sample type. freezer_address list specifying freezer address used store samples.  Required items freezer_address list name, level_I level_II. freezer_address type minus eighty level_I level_II items specify rack position, respecively. freezer_address type minus twenty level_I level_II items specify shelf basket, respecively.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/UploadSpecimens.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upload Wetlab Samples — UploadSpecimens","text":"","code":"if (FALSE) { # \\dontrun{ UploadSamples(sample_type = \"micronix\",               upload_data = tibble(position = c(\"A0\"),                                    label = c(\"XXX 1\"),                                    study_subject_id = c(\"1\"),                                    specimen_type = c(\"PLASMA\"),                                    study_short_code = c(\"KAM06\"),                                    collection_date = c(\"2021-04-10\")),                container_name = \"test_container\",                freezer_address = list(name = \"TBD\",                                       level_I = \"TBD\",                                       level_II = \"seve's working basket\")) } # }"},{"path":"https://eppicenter.github.io/sampleDB/reference/ValidationErrorCollection.html","id":null,"dir":"Reference","previous_headings":"","what":"ValidationErrorCollection class — ValidationErrorCollection","title":"ValidationErrorCollection class — ValidationErrorCollection","text":"class manages collection ErrorData objects. can used add new ErrorData objects, export collection errors CSV file.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/ValidationErrorCollection.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"ValidationErrorCollection class — ValidationErrorCollection","text":"error_data_list list ErrorData objects representing collection errors. user_data original data frame errors found.","code":""},{"path":[]},{"path":"https://eppicenter.github.io/sampleDB/reference/ValidationErrorCollection.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"ValidationErrorCollection class — ValidationErrorCollection","text":"ValidationErrorCollection$new() ValidationErrorCollection$add_error() ValidationErrorCollection$get_error_details_by_index() ValidationErrorCollection$length() ValidationErrorCollection$get_combined_error_data() ValidationErrorCollection$clone()","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/ValidationErrorCollection.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"ValidationErrorCollection class — ValidationErrorCollection","text":"method receives list ErrorData objects.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/ValidationErrorCollection.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ValidationErrorCollection class — ValidationErrorCollection","text":"","code":"ValidationErrorCollection$new(errors = list(), user_data = NULL)"},{"path":"https://eppicenter.github.io/sampleDB/reference/ValidationErrorCollection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ValidationErrorCollection class — ValidationErrorCollection","text":"errors list ErrorData objects added. user_data user data error data came .","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/ValidationErrorCollection.html","id":"method-add-error-","dir":"Reference","previous_headings":"","what":"Method add_error()","title":"ValidationErrorCollection class — ValidationErrorCollection","text":"method adds ErrorData object.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/ValidationErrorCollection.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"ValidationErrorCollection class — ValidationErrorCollection","text":"","code":"ValidationErrorCollection$add_error(error_data)"},{"path":"https://eppicenter.github.io/sampleDB/reference/ValidationErrorCollection.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"ValidationErrorCollection class — ValidationErrorCollection","text":"error_data ErrorData object added.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/ValidationErrorCollection.html","id":"method-get-error-details-by-index-","dir":"Reference","previous_headings":"","what":"Method get_error_details_by_index()","title":"ValidationErrorCollection class — ValidationErrorCollection","text":"Gets error index.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/ValidationErrorCollection.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"ValidationErrorCollection class — ValidationErrorCollection","text":"","code":"ValidationErrorCollection$get_error_details_by_index(index)"},{"path":"https://eppicenter.github.io/sampleDB/reference/ValidationErrorCollection.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"ValidationErrorCollection class — ValidationErrorCollection","text":"index index specify error.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/ValidationErrorCollection.html","id":"method-length-","dir":"Reference","previous_headings":"","what":"Method length()","title":"ValidationErrorCollection class — ValidationErrorCollection","text":"method returns number ErrorData objects list.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/ValidationErrorCollection.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"ValidationErrorCollection class — ValidationErrorCollection","text":"","code":"ValidationErrorCollection$length()"},{"path":"https://eppicenter.github.io/sampleDB/reference/ValidationErrorCollection.html","id":"method-get-combined-error-data-","dir":"Reference","previous_headings":"","what":"Method get_combined_error_data()","title":"ValidationErrorCollection class — ValidationErrorCollection","text":"method combines error details user data returns data frame.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/ValidationErrorCollection.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"ValidationErrorCollection class — ValidationErrorCollection","text":"","code":"ValidationErrorCollection$get_combined_error_data()"},{"path":"https://eppicenter.github.io/sampleDB/reference/ValidationErrorCollection.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"ValidationErrorCollection class — ValidationErrorCollection","text":"objects class cloneable method.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/ValidationErrorCollection.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"ValidationErrorCollection class — ValidationErrorCollection","text":"","code":"ValidationErrorCollection$clone(deep = FALSE)"},{"path":"https://eppicenter.github.io/sampleDB/reference/ValidationErrorCollection.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"ValidationErrorCollection class — ValidationErrorCollection","text":"deep Whether make deep clone.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/add_bags_if_not_exist.html","id":null,"dir":"Reference","previous_headings":"","what":"Add new bags to the database if they don't exist — add_bags_if_not_exist","title":"Add new bags to the database if they don't exist — add_bags_if_not_exist","text":"Add new bags database exist","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/add_bags_if_not_exist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add new bags to the database if they don't exist — add_bags_if_not_exist","text":"","code":"add_bags_if_not_exist(df.payload, con, manifest_name_col)"},{"path":"https://eppicenter.github.io/sampleDB/reference/add_bags_if_not_exist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add new bags to the database if they don't exist — add_bags_if_not_exist","text":"df.payload dataframe payload data. con database connection object. manifest_name_col Column name df.payload manifest name.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/add_bags_if_not_exist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add new bags to the database if they don't exist — add_bags_if_not_exist","text":"result dbAppendTable indicating bags added successfully.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/add_malaria_blood_controls_if_not_exist.html","id":null,"dir":"Reference","previous_headings":"","what":"Add malaria blood controls to the database if they don't exist — add_malaria_blood_controls_if_not_exist","title":"Add malaria blood controls to the database if they don't exist — add_malaria_blood_controls_if_not_exist","text":"Add malaria blood controls database exist","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/add_malaria_blood_controls_if_not_exist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add malaria blood controls to the database if they don't exist — add_malaria_blood_controls_if_not_exist","text":"","code":"add_malaria_blood_controls_if_not_exist(df.payload, con, density_col)"},{"path":"https://eppicenter.github.io/sampleDB/reference/add_malaria_blood_controls_if_not_exist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add malaria blood controls to the database if they don't exist — add_malaria_blood_controls_if_not_exist","text":"df.payload dataframe payload data. con database connection object. density User Data Density Column","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/add_malaria_blood_controls_if_not_exist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add malaria blood controls to the database if they don't exist — add_malaria_blood_controls_if_not_exist","text":"result dbAppendTable indicating controls added successfully.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/add_new_blood_spot_collections.html","id":null,"dir":"Reference","previous_headings":"","what":"Add New Blood Spot Collections — add_new_blood_spot_collections","title":"Add New Blood Spot Collections — add_new_blood_spot_collections","text":"Add New Blood Spot Collections","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/add_new_blood_spot_collections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add New Blood Spot Collections — add_new_blood_spot_collections","text":"","code":"add_new_blood_spot_collections(df.payload, con, count_col)"},{"path":"https://eppicenter.github.io/sampleDB/reference/add_new_blood_spot_collections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add New Blood Spot Collections — add_new_blood_spot_collections","text":"df.payload dataframe containing payload data. con database connection object. count_col Column name df.payload count. dbs_control_sheet_id Column name df.payload DBS control sheet ID.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/add_new_blood_spot_collections.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add New Blood Spot Collections — add_new_blood_spot_collections","text":"Result dbAppendTable indicating collections added successfully.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/add_new_dbs_control_sheets.html","id":null,"dir":"Reference","previous_headings":"","what":"Add new DBS control sheets to the database — add_new_dbs_control_sheets","title":"Add new DBS control sheets to the database — add_new_dbs_control_sheets","text":"Add new DBS control sheets database","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/add_new_dbs_control_sheets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add new DBS control sheets to the database — add_new_dbs_control_sheets","text":"","code":"add_new_dbs_control_sheets(con, df.payload, dbs_sheet_name_col)"},{"path":"https://eppicenter.github.io/sampleDB/reference/add_new_dbs_control_sheets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add new DBS control sheets to the database — add_new_dbs_control_sheets","text":"con database connection object. df.payload dataframe payload data. dbs_sheet_name_col Column name df.payload DBS Sheet name.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/add_new_dbs_control_sheets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add new DBS control sheets to the database — add_new_dbs_control_sheets","text":"result dbAppendTable indicating sheets added successfully.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/add_position_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a position column based on column attributes — add_position_column","title":"Add a position column based on column attributes — add_position_column","text":"Add position column based column attributes","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/add_position_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a position column based on column attributes — add_position_column","text":"","code":"add_position_column(df, col_attributes)"},{"path":"https://eppicenter.github.io/sampleDB/reference/add_position_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a position column based on column attributes — add_position_column","text":"df dataframe modify. col_attributes named list column attributes exceptions.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/add_position_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a position column based on column attributes — add_position_column","text":"dataframe, potentially new 'position' column.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/add_row_numbers.html","id":null,"dir":"Reference","previous_headings":"","what":"Add row numbers to a dataframe — add_row_numbers","title":"Add row numbers to a dataframe — add_row_numbers","text":"Add row numbers dataframe","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/add_row_numbers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add row numbers to a dataframe — add_row_numbers","text":"","code":"add_row_numbers(df, row_number_col = \"RowNumber\")"},{"path":"https://eppicenter.github.io/sampleDB/reference/add_row_numbers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add row numbers to a dataframe — add_row_numbers","text":"df dataframe.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/add_row_numbers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add row numbers to a dataframe — add_row_numbers","text":"dataframe additional 'RowNumber' column.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/add_to_errors.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an Error to the Error List — add_to_errors","title":"Add an Error to the Error List — add_to_errors","text":"utility function checks error exists , , appends provided error list.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/add_to_errors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an Error to the Error List — add_to_errors","text":"","code":"add_to_errors(errors, err)"},{"path":"https://eppicenter.github.io/sampleDB/reference/add_to_errors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an Error to the Error List — add_to_errors","text":"errors list object contains current errors. err error object added error list. can NULL, case action taken.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/add_to_errors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an Error to the Error List — add_to_errors","text":"updated errors list.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/add_to_errors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add an Error to the Error List — add_to_errors","text":"","code":"if (FALSE) { # \\dontrun{   errors <- list()     new_error <- list(description = \"Some error\")  # Hypothetical error structure.   errors <- add_to_errors(errors, new_error) } # }"},{"path":"https://eppicenter.github.io/sampleDB/reference/append_boxes_if_not_exist.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Whole Blood Box Data — append_boxes_if_not_exist","title":"Process Whole Blood Box Data — append_boxes_if_not_exist","text":"function check locations add new boxes exist. return boxes locations IDs.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/append_boxes_if_not_exist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Whole Blood Box Data — append_boxes_if_not_exist","text":"","code":"append_boxes_if_not_exist(   con,   user_data,   created_col,   last_updated_col,   box_name_col,   box_barcode_col )"},{"path":"https://eppicenter.github.io/sampleDB/reference/append_boxes_if_not_exist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Whole Blood Box Data — append_boxes_if_not_exist","text":"con database connection object. user_data dataframe containing payload data. created_col Column name user_data created date. last_updated_col Column name user_data last updated date. box_name_col Column name user_data box name. box_barcode_col Column name user_data box barcode.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/append_boxes_if_not_exist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process Whole Blood Box Data — append_boxes_if_not_exist","text":"result dbAppendTable indicating boxes added successfully.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/append_strains_to_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Append Strains to the Database Table — append_strains_to_db","title":"Append Strains to the Database Table — append_strains_to_db","text":"function appends new strains 'strain' table database.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/append_strains_to_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append Strains to the Database Table — append_strains_to_db","text":"","code":"append_strains_to_db(user_file, database = Sys.getenv(\"SDB_PATH\"))"},{"path":"https://eppicenter.github.io/sampleDB/reference/append_strains_to_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append Strains to the Database Table — append_strains_to_db","text":"user_file data frame containing column named 'strain'. database path SQLite database.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/append_strains_to_db.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append Strains to the Database Table — append_strains_to_db","text":"boolean indicating success (TRUE) failure (FALSE).","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/append_strains_to_db.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Append Strains to the Database Table — append_strains_to_db","text":"","code":"# Assuming you have a data frame named user_data with a strain column and a valid SQLite database at \"/path/to/db\" result <- append_strains_to_db(user_data, \"/path/to/db\") #> Error: Could not connect to database: #> unable to open database file"},{"path":"https://eppicenter.github.io/sampleDB/reference/append_study_to_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Append Studies to the Database Table — append_study_to_db","title":"Append Studies to the Database Table — append_study_to_db","text":"function appends new strains 'strain' table database.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/append_study_to_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append Studies to the Database Table — append_study_to_db","text":"","code":"append_study_to_db(   title,   short_code,   description,   lead_person,   is_longitudinal,   database )"},{"path":"https://eppicenter.github.io/sampleDB/reference/append_study_to_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append Studies to the Database Table — append_study_to_db","text":"database path SQLite database. user_file data frame containing column named 'strain'.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/append_study_to_db.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append Studies to the Database Table — append_study_to_db","text":"boolean indicating success (TRUE) failure (FALSE).","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/append_study_to_db.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Append Studies to the Database Table — append_study_to_db","text":"","code":"# Assuming you have a data frame named user_data with a strain column and a valid SQLite database at \"/path/to/db\" result <- append_strains_to_db(user_data, \"/path/to/db\") #> Error: Could not connect to database: #> unable to open database file"},{"path":"https://eppicenter.github.io/sampleDB/reference/append_whole_blood_tubes.html","id":null,"dir":"Reference","previous_headings":"","what":"Add whole blood tubes to the database if they don't exist — append_whole_blood_tubes","title":"Add whole blood tubes to the database if they don't exist — append_whole_blood_tubes","text":"Add whole blood tubes database exist","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/append_whole_blood_tubes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add whole blood tubes to the database if they don't exist — append_whole_blood_tubes","text":"","code":"append_whole_blood_tubes(   user_data,   con,   barcode_col,   position_col,   comment_col )"},{"path":"https://eppicenter.github.io/sampleDB/reference/append_whole_blood_tubes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add whole blood tubes to the database if they don't exist — append_whole_blood_tubes","text":"user_data dataframe containing payload data. con database connection object. barcode_col Column name user_data barcode. position_col Column name user_data position. comment_col Column name user_data comment.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/append_whole_blood_tubes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add whole blood tubes to the database if they don't exist — append_whole_blood_tubes","text":"result dbAppendTable indicating tubes added successfully.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/bind_new_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Data to User Data — bind_new_data","title":"Add Data to User Data — bind_new_data","text":"function takes named list appends values new column dataframe. name named list matched dataframe's column names.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/bind_new_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Data to User Data — bind_new_data","text":"","code":"bind_new_data(df, named_list)"},{"path":"https://eppicenter.github.io/sampleDB/reference/bind_new_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Data to User Data — bind_new_data","text":"df dataframe data added. named_list named list whose elements added new column dataframe.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/bind_new_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Data to User Data — bind_new_data","text":"dataframe added column.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/bind_new_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Data to User Data — bind_new_data","text":"","code":"df <- data.frame(Name = c(\"John\", \"Doe\"), Age = c(25, 30)) new_data <- list(Designation = \"Manager\") df <- bind_new_data(df, new_data)"},{"path":"https://eppicenter.github.io/sampleDB/reference/check_control_exists.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for Control Existence — check_control_exists","title":"Check for Control Existence — check_control_exists","text":"function checks unmatched rows based control IDs specified table compared study_subject table. returns error data unmatched rows.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/check_control_exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for Control Existence — check_control_exists","text":"","code":"check_control_exists(   con,   table_name,   row_number_col,   control_col,   batch_col,   error_if_exists = FALSE )"},{"path":"https://eppicenter.github.io/sampleDB/reference/check_control_exists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for Control Existence — check_control_exists","text":"con database connection. table_name name table check. row_number_col name row number column. control_col name control column. batch_col name batch column. error_if_exists TRUE, returns error control ID exists. FALSE, returns error control ID exist.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/check_control_exists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for Control Existence — check_control_exists","text":"NULL error, otherwise ErrorData object appropriate description data frame.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/check_cryovial_barcodes_exist.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Cryovial Barcodes in Database — check_cryovial_barcodes_exist","title":"Check Cryovial Barcodes in Database — check_cryovial_barcodes_exist","text":"Check Cryovial Barcodes Database","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/check_cryovial_barcodes_exist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Cryovial Barcodes in Database — check_cryovial_barcodes_exist","text":"","code":"check_cryovial_barcodes_exist(   con,   user_data,   row_number_col,   cryovial_col,   cryovial_box_col,   error_if_exists = TRUE )"},{"path":"https://eppicenter.github.io/sampleDB/reference/check_cryovial_barcodes_exist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Cryovial Barcodes in Database — check_cryovial_barcodes_exist","text":"con database connection object. user_data name table user data temporarily stored database. row_number_col column row number user_data. cryovial_col column Cryovial barcodes user_data. cryovial_box_col column Cryovial box IDs user_data. error_if_exists Logical. TRUE, error returned barcode exists database. cryovial_box_barcode_col column Cryovial box barcodes user_data.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/check_cryovial_barcodes_exist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Cryovial Barcodes in Database — check_cryovial_barcodes_exist","text":"instance ErrorData class NULL.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/check_cryovial_box_exists.html","id":null,"dir":"Reference","previous_headings":"","what":"Check If Cryovial Box Exists in the Database — check_cryovial_box_exists","title":"Check If Cryovial Box Exists in the Database — check_cryovial_box_exists","text":"function checks whether cryovial containers provided user-uploaded table exist main cryovial tube database.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/check_cryovial_box_exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check If Cryovial Box Exists in the Database — check_cryovial_box_exists","text":"","code":"check_cryovial_box_exists(   con,   table_name,   row_number_col,   box_name_col,   box_barcode_col )"},{"path":"https://eppicenter.github.io/sampleDB/reference/check_cryovial_box_exists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check If Cryovial Box Exists in the Database — check_cryovial_box_exists","text":"con database connection object. table_name name table containing user-uploaded data. row_number_col name column user-uploaded table contains row numbers. box_name_col name column user-uploaded table contains cryovial container names. box_barcode_col name column user-uploaded table contains manifest barcodes linked cryovial.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/check_cryovial_box_exists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check If Cryovial Box Exists in the Database — check_cryovial_box_exists","text":"instance ErrorData class errors found, NULL errors.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/check_duplicated_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for duplicated rows in a data frame — check_duplicated_rows","title":"Check for duplicated rows in a data frame — check_duplicated_rows","text":"Check duplicated rows data frame","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/check_duplicated_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for duplicated rows in a data frame — check_duplicated_rows","text":"","code":"check_duplicated_rows(formatted_csv, col_attributes = NULL)"},{"path":"https://eppicenter.github.io/sampleDB/reference/check_duplicated_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for duplicated rows in a data frame — check_duplicated_rows","text":"formatted_csv user-provided data frame check duplicated rows. col_attributes named list expected column attributes. want check specific columns duplicates, include names . Otherwise, check columns.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/check_duplicated_rows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for duplicated rows in a data frame — check_duplicated_rows","text":"ErrorData object duplicated rows found, otherwise NULL.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/check_for_duplicates_in_a_row.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for duplicates in row — check_for_duplicates_in_a_row","title":"Check for duplicates in row — check_for_duplicates_in_a_row","text":"function check duplicated values row. function used identify users file duplicated column headers setting column names.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/check_for_duplicates_in_a_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for duplicates in row — check_for_duplicates_in_a_row","text":"","code":"check_for_duplicates_in_a_row(user_data, row_number)"},{"path":"https://eppicenter.github.io/sampleDB/reference/check_for_duplicates_in_a_row.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for duplicates in row — check_for_duplicates_in_a_row","text":"user_data user data data.frame. row_number Numerical value indicating row check duplicates","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/check_for_duplicates_in_a_row.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for duplicates in row — check_for_duplicates_in_a_row","text":"list column names found .","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/check_longitudinal_study_dates.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if collection dates are missing for samples in a longitudinal study — check_longitudinal_study_dates","title":"Check if collection dates are missing for samples in a longitudinal study — check_longitudinal_study_dates","text":"Check collection dates missing samples longitudinal study","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/check_longitudinal_study_dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if collection dates are missing for samples in a longitudinal study — check_longitudinal_study_dates","text":"","code":"check_longitudinal_study_dates(   con,   table_name,   row_number_col,   study_short_code_col,   collection_date_col )"},{"path":"https://eppicenter.github.io/sampleDB/reference/check_longitudinal_study_dates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if collection dates are missing for samples in a longitudinal study — check_longitudinal_study_dates","text":"con database connection object. table_name name table user data temporarily stored database. row_number_col name column containing row number. study_short_code_col name column containing study short code. collection_date_col name column containing collection date.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/check_longitudinal_study_dates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if collection dates are missing for samples in a longitudinal study — check_longitudinal_study_dates","text":"instance ErrorData class NULL.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/check_micronix_barcodes_exist.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Micronix Barcodes in Database — check_micronix_barcodes_exist","title":"Check Micronix Barcodes in Database — check_micronix_barcodes_exist","text":"function checks whether Micronix barcodes provided user-uploaded table exist exist (based error_if_exists parameter) main database.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/check_micronix_barcodes_exist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Micronix Barcodes in Database — check_micronix_barcodes_exist","text":"","code":"check_micronix_barcodes_exist(   con,   user_data,   row_number_col,   micronix_col,   error_if_exists = TRUE )"},{"path":"https://eppicenter.github.io/sampleDB/reference/check_micronix_barcodes_exist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Micronix Barcodes in Database — check_micronix_barcodes_exist","text":"con database connection object. user_data name table containing user-uploaded data. row_number_col name column user-uploaded table contains row numbers. micronix_col name column user-uploaded table contains Micronix barcodes. error_if_exists logical value. TRUE, function returns error barcode exists database, FALSE, function returns error barcode exist.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/check_micronix_barcodes_exist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Micronix Barcodes in Database — check_micronix_barcodes_exist","text":"instance ErrorData class errors found, NULL errors.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/check_micronix_plate_exists.html","id":null,"dir":"Reference","previous_headings":"","what":"Check If Micronix Plate Exists in the Database — check_micronix_plate_exists","title":"Check If Micronix Plate Exists in the Database — check_micronix_plate_exists","text":"function checks whether Micronix plates provided user-uploaded table exist main micronix plate database.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/check_micronix_plate_exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check If Micronix Plate Exists in the Database — check_micronix_plate_exists","text":"","code":"check_micronix_plate_exists(   con,   table_name,   row_number_col,   plate_name_col,   plate_barcode_col = NULL )"},{"path":"https://eppicenter.github.io/sampleDB/reference/check_micronix_plate_exists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check If Micronix Plate Exists in the Database — check_micronix_plate_exists","text":"con database connection object. table_name name table containing user-uploaded data. row_number_col name column user-uploaded table contains row numbers. plate_name_col name column user-uploaded table contains Micronix container names. plate_barcode_col name column user-uploaded table contains Micronix container barcodes.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/check_micronix_plate_exists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check If Micronix Plate Exists in the Database — check_micronix_plate_exists","text":"instance ErrorData class errors found, NULL errors.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/check_missing_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for missing data in required fields — check_missing_data","title":"Check for missing data in required fields — check_missing_data","text":"Check missing data required fields","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/check_missing_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for missing data in required fields — check_missing_data","text":"","code":"check_missing_data(formatted_csv, col_attributes)"},{"path":"https://eppicenter.github.io/sampleDB/reference/check_missing_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for missing data in required fields — check_missing_data","text":"formatted_csv user provided dataframe check. col_attributes named list expected column attributes.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/check_missing_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for missing data in required fields — check_missing_data","text":"ErrorData object required data missing, otherwise NULL.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/check_strain_percentage_match.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate that the strain and percentage columns have matching semicolon counts — check_strain_percentage_match","title":"Validate that the strain and percentage columns have matching semicolon counts — check_strain_percentage_match","text":"Validate strain percentage columns matching semicolon counts","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/check_strain_percentage_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate that the strain and percentage columns have matching semicolon counts — check_strain_percentage_match","text":"","code":"check_strain_percentage_match(data, percentage_col, strain_col)"},{"path":"https://eppicenter.github.io/sampleDB/reference/check_strain_percentage_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate that the strain and percentage columns have matching semicolon counts — check_strain_percentage_match","text":"data users data. percentage_col name column containing percentages. strain_col name column containing strains.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/check_strain_percentage_match.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate that the strain and percentage columns have matching semicolon counts — check_strain_percentage_match","text":"NULL ErrorData.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/check_unique_positions.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Unique Positions — check_unique_positions","title":"Check Unique Positions — check_unique_positions","text":"Check Unique Positions","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/check_unique_positions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Unique Positions — check_unique_positions","text":"","code":"check_unique_positions(   user_data,   position_col,   container_name_col,   container_barcode_col )"},{"path":"https://eppicenter.github.io/sampleDB/reference/check_unique_positions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Unique Positions — check_unique_positions","text":"user_data data frame contianer user data position_col position column container_name_col container name column container_barcode_col container barcode column","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/collapse_and_nest_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse and Nest Strain and Percentage Columns — collapse_and_nest_columns","title":"Collapse and Nest Strain and Percentage Columns — collapse_and_nest_columns","text":"function takes data frame collapses provided strain percentage columns using semicolon (;). individual strains percentages row combined single, semicolon-separated strings. commonly used manipulating analyzing strains corresponding compositions.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/collapse_and_nest_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse and Nest Strain and Percentage Columns — collapse_and_nest_columns","text":"","code":"collapse_and_nest_columns(   user_data,   row_number_col,   strains_col,   percentage_col )"},{"path":"https://eppicenter.github.io/sampleDB/reference/collapse_and_nest_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse and Nest Strain and Percentage Columns — collapse_and_nest_columns","text":"user_data data frame specified strain percentage columns. strains_col column name data frame containing strain data. percentage_col column name data frame containing percentage data.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/collapse_and_nest_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse and Nest Strain and Percentage Columns — collapse_and_nest_columns","text":"data frame nested strain percentage columns.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/collapse_and_nest_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collapse and Nest Strain and Percentage Columns — collapse_and_nest_columns","text":"","code":"if (FALSE) { # \\dontrun{ result <- collapse_and_nest_columns(df, \"strain_column_name\", \"percentage_column_name\") } # }"},{"path":"https://eppicenter.github.io/sampleDB/reference/concat_position.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate Position from Column and Row Information — concat_position","title":"Concatenate Position from Column and Row Information — concat_position","text":"function takes column (character) row (numeric) returns formatted string concatenating column row values.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/concat_position.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate Position from Column and Row Information — concat_position","text":"","code":"concat_position(col, row)"},{"path":"https://eppicenter.github.io/sampleDB/reference/concat_position.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenate Position from Column and Row Information — concat_position","text":"col character vector indicating column. row numeric vector indicating row.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/concat_position.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Concatenate Position from Column and Row Information — concat_position","text":"character vector concatenated position.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/concat_position.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Concatenate Position from Column and Row Information — concat_position","text":"","code":"concat_position(\"A\", 5) # \"A05\" #> [1] \"A05\" concat_position(\"B\", 1) # \"B01\" #> [1] \"B01\" concat_position(\"AA\", 23) # \"AA23\" #> [1] \"AA23\""},{"path":"https://eppicenter.github.io/sampleDB/reference/convert_density_representations.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Density Representations to Real Numbers — convert_density_representations","title":"Convert Density Representations to Real Numbers — convert_density_representations","text":"function processes dataframe convert density values might various representations (e.g., \"10K\", \"10k\") real number equivalents. instance, \"10K\" \"10k\" converted 10000.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/convert_density_representations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Density Representations to Real Numbers — convert_density_representations","text":"","code":"convert_density_representations(user_data, density_col)"},{"path":"https://eppicenter.github.io/sampleDB/reference/convert_density_representations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Density Representations to Real Numbers — convert_density_representations","text":"user_data dataframe containing user data density values. density_col string specifying column name density values user_data.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/convert_density_representations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Density Representations to Real Numbers — convert_density_representations","text":"dataframe converted density values. Special values 0 ('Negative Control') -1 ('Value known'). values returned numerics. cases 'K' 'k' appended, numeric value front multiplied 1000.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/convert_density_representations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert Density Representations to Real Numbers — convert_density_representations","text":"density value \"neg\" \"unk\", converted 0 -1, respectively.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/convert_density_representations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Density Representations to Real Numbers — convert_density_representations","text":"","code":"user_df <- data.frame(Density = c(\"1\", \"10k\", \"100K\")) convert_density_representations(user_df, \"Density\") #>   Density #> 1   1e+00 #> 2   1e+04 #> 3   1e+05"},{"path":"https://eppicenter.github.io/sampleDB/reference/convert_density_to_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert string values with 'k' or 'K' to numeric values — convert_density_to_numeric","title":"Convert string values with 'k' or 'K' to numeric values — convert_density_to_numeric","text":"Convert string values 'k' 'K' numeric values","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/convert_density_to_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert string values with 'k' or 'K' to numeric values — convert_density_to_numeric","text":"","code":"convert_density_to_numeric(data)"},{"path":"https://eppicenter.github.io/sampleDB/reference/convert_density_to_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert string values with 'k' or 'K' to numeric values — convert_density_to_numeric","text":"data data frame column named 'density'.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/convert_density_to_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert string values with 'k' or 'K' to numeric values — convert_density_to_numeric","text":"list processed data potential ErrorData.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/copy_database.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy SQLite Database — copy_database","title":"Copy SQLite Database — copy_database","text":"function copies existing SQLite database new location.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/copy_database.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy SQLite Database — copy_database","text":"","code":"copy_database(database, new_database)"},{"path":"https://eppicenter.github.io/sampleDB/reference/copy_database.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy SQLite Database — copy_database","text":"database Path original SQLite database. new_database Path destination SQLite database copy.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/copy_database.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copy SQLite Database — copy_database","text":"TRUE copy successful, otherwise FALSE.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/copy_database.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copy SQLite Database — copy_database","text":"","code":"if (FALSE) { # \\dontrun{   success <- copy_database(\"path_to_original.db\", \"path_to_new.db\")   if (!success) {     stop(\"Failed to copy the database.\")   } } # }"},{"path":"https://eppicenter.github.io/sampleDB/reference/copy_if_not_exists.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy a file to a destination if it does not exist there. — copy_if_not_exists","title":"Copy a file to a destination if it does not exist there. — copy_if_not_exists","text":"Copy file destination exist .","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/copy_if_not_exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy a file to a destination if it does not exist there. — copy_if_not_exists","text":"","code":"copy_if_not_exists(src, dest)"},{"path":"https://eppicenter.github.io/sampleDB/reference/copy_if_not_exists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy a file to a destination if it does not exist there. — copy_if_not_exists","text":"src source file path. dest destination file path.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/copy_if_not_exists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copy a file to a destination if it does not exist there. — copy_if_not_exists","text":"Returns TRUE file copied, FALSE otherwise.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/copy_if_not_exists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copy a file to a destination if it does not exist there. — copy_if_not_exists","text":"","code":"copy_if_not_exists(\"source.txt\", \"destination.txt\") #> [1] TRUE"},{"path":"https://eppicenter.github.io/sampleDB/reference/create_control_label.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Control Label with Density and Composition Values — create_control_label","title":"Create Control Label with Density and Composition Values — create_control_label","text":"function takes vectors density composition creates control label combining values. Densities greater 999 divided 1000 appended 'K'.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/create_control_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Control Label with Density and Composition Values — create_control_label","text":"","code":"create_control_label(dens_values, comp_values)"},{"path":"https://eppicenter.github.io/sampleDB/reference/create_control_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Control Label with Density and Composition Values — create_control_label","text":"dens_values numeric vector specifying density values. comp_values character vector specifying composition values.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/create_control_label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Control Label with Density and Composition Values — create_control_label","text":"character vector control labels.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/create_control_label.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Control Label with Density and Composition Values — create_control_label","text":"","code":"dens <- c(100, 1000, 1500) comp <- c(\"S1_1\", \"S3_2\", \"S2_2\") create_control_label(dens, comp) #> [1] \"100_S1_1\"  \"1K_S3_2\"   \"1.5K_S2_2\""},{"path":"https://eppicenter.github.io/sampleDB/reference/create_controls_for_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Controls for the batch — create_controls_for_batch","title":"Create Controls for the batch — create_controls_for_batch","text":"function prepares user data, appends study subjects database table, rejoins get study_subject_id.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/create_controls_for_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Controls for the batch — create_controls_for_batch","text":"","code":"create_controls_for_batch(   user_data,   con,   density_col,   study_short_code_col,   control_col )"},{"path":"https://eppicenter.github.io/sampleDB/reference/create_controls_for_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Controls for the batch — create_controls_for_batch","text":"user_data dataframe containing user data process. con database connection object. density_col Column name user_data density value. study_short_code_col Name column user_data corresponding \"Batch\". control_col Name column user-dta correspond \"Control\" (system made)","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/create_controls_for_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Controls for the batch — create_controls_for_batch","text":"dataframe study_subject_id added.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/create_flat_view_by_sample_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Flatten all database tables by sample type — create_flat_view_by_sample_type","title":"Flatten all database tables by sample type — create_flat_view_by_sample_type","text":"function utility function pull samples database.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/create_flat_view_by_sample_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flatten all database tables by sample type — create_flat_view_by_sample_type","text":"","code":"create_flat_view_by_sample_type(   sample_storage_type,   database = Sys.getenv(\"SDB_PATH\") )"},{"path":"https://eppicenter.github.io/sampleDB/reference/create_flat_view_by_sample_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flatten all database tables by sample type — create_flat_view_by_sample_type","text":"sample_storage_type Samples view type. Options 'micronix' 'cryovial'. database path database.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/create_flat_view_of_extractions.html","id":null,"dir":"Reference","previous_headings":"","what":"View all extractions in the database — create_flat_view_of_extractions","title":"View all extractions in the database — create_flat_view_of_extractions","text":"function utility function pull extractions database.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/create_flat_view_of_extractions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View all extractions in the database — create_flat_view_of_extractions","text":"","code":"create_flat_view_of_extractions(database = Sys.getenv(\"SDB_PATH\"))"},{"path":"https://eppicenter.github.io/sampleDB/reference/create_flat_view_of_extractions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View all extractions in the database — create_flat_view_of_extractions","text":"database path database.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/create_unique_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a unique identifier for compositions — create_unique_id","title":"Create a unique identifier for compositions — create_unique_id","text":"function creates unique identifier given strains respective percentages. strains percentages sorted based percentages ensure consistency unique ID creation.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/create_unique_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a unique identifier for compositions — create_unique_id","text":"","code":"create_unique_id(strains, percentages)"},{"path":"https://eppicenter.github.io/sampleDB/reference/create_unique_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a unique identifier for compositions — create_unique_id","text":"strains character vector containing strain names. percentages numeric vector containing percentages strain.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/create_unique_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a unique identifier for compositions — create_unique_id","text":"character string representing unique identifier composition.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/create_unique_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a unique identifier for compositions — create_unique_id","text":"","code":"strains <- c(\"D6\", \"3D7\", \"HB3\") percentages <- c(0.32, 0.33, 0.35) create_unique_id(strains, percentages) #> Error in create_unique_id(strains, percentages): could not find function \"create_unique_id\""},{"path":"https://eppicenter.github.io/sampleDB/reference/create_unique_id_from_sorted.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a unique identifier from sorted strains and percentages — create_unique_id_from_sorted","title":"Create a unique identifier from sorted strains and percentages — create_unique_id_from_sorted","text":"function generates unique identifier combining sorted strains percentages.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/create_unique_id_from_sorted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a unique identifier from sorted strains and percentages — create_unique_id_from_sorted","text":"","code":"create_unique_id_from_sorted(sorted_strains, sorted_percentages)"},{"path":"https://eppicenter.github.io/sampleDB/reference/create_unique_id_from_sorted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a unique identifier from sorted strains and percentages — create_unique_id_from_sorted","text":"sorted_strains character vector sorted strains. sorted_percentages numeric vector sorted percentages.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/create_unique_id_from_sorted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a unique identifier from sorted strains and percentages — create_unique_id_from_sorted","text":"character string representing unique identifier.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/cryovial_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Cryovial NA — cryovial_na","title":"Cryovial NA — cryovial_na","text":"example upload file single Cryovial sample using NA file format","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/cryovial_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cryovial NA — cryovial_na","text":"","code":"cryovial_na"},{"path":[]},{"path":"https://eppicenter.github.io/sampleDB/reference/cryovial_na.html","id":"micronix-na","dir":"Reference","previous_headings":"","what":"micronix_na","title":"Cryovial NA — cryovial_na","text":"data frame 1 rows 13 columns: Barcode 10 digit unique identifier sample BoxRow character denoting row position sample BoxColumn integer denoting column position sample SpecimenType specimen contained sample StudySubject identifier study subject sample collected CollectionDate date sample collected. field required sample part longitudinal study, MUST YYYY-MM-DD format BoxName name plate FreezerName name freezer sample RackNumber shelf sample located RackPosition place shelf sample located StudyCode code associated study sample part Comment optional field leave comment sample BoxBarcode optional field provide barcode container sample located ","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/cryovial_na.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Cryovial NA — cryovial_na","text":"EPPIcenter","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/denormalize_composition_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Denormalize Composition IDs from User Data — denormalize_composition_ids","title":"Denormalize Composition IDs from User Data — denormalize_composition_ids","text":"function processes dataframe combine separate columns (Label, Index, LegacyLabel) back single composition ID column based format.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/denormalize_composition_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Denormalize Composition IDs from User Data — denormalize_composition_ids","text":"","code":"denormalize_composition_ids(   user_data,   in_label_col,   in_index_col,   in_legacy_col,   out_composition_id_col )"},{"path":"https://eppicenter.github.io/sampleDB/reference/denormalize_composition_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Denormalize Composition IDs from User Data — denormalize_composition_ids","text":"user_data dataframe containing user data split composition IDs. in_label_col string specifying column name labels user_data. Default \"Label\". in_index_col string specifying column name indexes user_data. Default \"Index\". in_legacy_col string specifying column name indicating composition ID legacy user_data. Default \"LegacyLabel\". out_composition_id_col string specifying name new column combined composition IDs stored.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/denormalize_composition_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Denormalize Composition IDs from User Data — denormalize_composition_ids","text":"dataframe new column (specified composition_id_col) containing combined composition ID.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/deploy_or_notify_existing_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Deploy the Shiny app or notify if already deployed. — deploy_or_notify_existing_app","title":"Deploy the Shiny app or notify if already deployed. — deploy_or_notify_existing_app","text":"Deploy Shiny app notify already deployed.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/deploy_or_notify_existing_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deploy the Shiny app or notify if already deployed. — deploy_or_notify_existing_app","text":"","code":"deploy_or_notify_existing_app(shiny_server_path, pkgname, pkg_path)"},{"path":"https://eppicenter.github.io/sampleDB/reference/deploy_or_notify_existing_app.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deploy the Shiny app or notify if already deployed. — deploy_or_notify_existing_app","text":"shiny_server_path Path Shiny server. pkgname Name package. pkg_path Path package installation.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/deploy_shiny_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Deploy Shiny Application — deploy_shiny_app","title":"Deploy Shiny Application — deploy_shiny_app","text":"function checks environment meets requirements deploy Shiny application attempts deploy conditions met.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/deploy_shiny_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deploy Shiny Application — deploy_shiny_app","text":"","code":"deploy_shiny_app(pkgname, site_install)"},{"path":"https://eppicenter.github.io/sampleDB/reference/deploy_shiny_app.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deploy Shiny Application — deploy_shiny_app","text":"pkgname name package containing Shiny application deployed. site_install Logical indicating site installation.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/deploy_shiny_app.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deploy Shiny Application — deploy_shiny_app","text":"","code":"if (FALSE) { # \\dontrun{ deploy_shiny_app(\"my_package\", TRUE) } # }"},{"path":"https://eppicenter.github.io/sampleDB/reference/detect_missing_control_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect Missing Columns in Control CSV File — detect_missing_control_columns","title":"Detect Missing Columns in Control CSV File — detect_missing_control_columns","text":"function examines user's control CSV file identify essential control columns may absent. checks given control column attributes ensure required columns present CSV.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/detect_missing_control_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect Missing Columns in Control CSV File — detect_missing_control_columns","text":"","code":"detect_missing_control_columns(   control_file,   control_column_attributes,   database = Sys.getenv(\"SDB_PATH\") )"},{"path":"https://eppicenter.github.io/sampleDB/reference/detect_missing_control_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect Missing Columns in Control CSV File — detect_missing_control_columns","text":"control_file data frame representing user's control CSV file. control_column_attributes object containing attributes control columns, specifically required columns.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/detect_missing_control_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect Missing Columns in Control CSV File — detect_missing_control_columns","text":"character vector control columns missing user's CSV file.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/detect_missing_control_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect Missing Columns in Control CSV File — detect_missing_control_columns","text":"","code":"if (FALSE) { # \\dontrun{ control_data <- data.frame(ControlCode = c(\"CT001\"), ControlName = c(\"CTRL_A\")) control_column_attrs <- ControlColumnAttributes$new() # Assuming such an object exists detect_missing_control_columns(control_data, control_column_attrs) } # }"},{"path":"https://eppicenter.github.io/sampleDB/reference/detect_missing_reference_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect Missing Columns in Reference CSV File — detect_missing_reference_columns","title":"Detect Missing Columns in Reference CSV File — detect_missing_reference_columns","text":"function examines user's control CSV file identify essential control columns may absent. checks given control column attributes ensure required columns present CSV.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/detect_missing_reference_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect Missing Columns in Reference CSV File — detect_missing_reference_columns","text":"","code":"detect_missing_reference_columns(control_file, reference_column_attributes)"},{"path":"https://eppicenter.github.io/sampleDB/reference/detect_missing_reference_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect Missing Columns in Reference CSV File — detect_missing_reference_columns","text":"reference_column_attributes object containing attributes control columns, specifically required columns. reference_file data frame representing user's control CSV file.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/detect_missing_reference_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect Missing Columns in Reference CSV File — detect_missing_reference_columns","text":"character vector control columns missing user's CSV file.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/detect_missing_reference_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect Missing Columns in Reference CSV File — detect_missing_reference_columns","text":"","code":"if (FALSE) { # \\dontrun{ control_data <- data.frame(ControlCode = c(\"CT001\"), ControlName = c(\"CTRL_A\")) control_column_attrs <- ControlColumnAttributes$new() # Assuming such an object exists detect_missing_control_columns(control_data, control_column_attrs) } # }"},{"path":"https://eppicenter.github.io/sampleDB/reference/detect_missing_specimen_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect Missing Specimen Columns in User's CSV File — detect_missing_specimen_columns","title":"Detect Missing Specimen Columns in User's CSV File — detect_missing_specimen_columns","text":"function examines user's specimen CSV file essential specimen columns may absent. Additionally, verifies specific conditions existence \"CollectionDate\" specimens belong longitudinal studies.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/detect_missing_specimen_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect Missing Specimen Columns in User's CSV File — detect_missing_specimen_columns","text":"","code":"detect_missing_specimen_columns(   specimen_file,   specimen_column_attributes,   database = Sys.getenv(\"SDB_PATH\") )"},{"path":"https://eppicenter.github.io/sampleDB/reference/detect_missing_specimen_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect Missing Specimen Columns in User's CSV File — detect_missing_specimen_columns","text":"specimen_file data frame representing user's specimen CSV file. specimen_column_attributes object containing attributes specimen columns, including required, conditional, action. database character string indicating path SQLite database specimen information.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/detect_missing_specimen_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect Missing Specimen Columns in User's CSV File — detect_missing_specimen_columns","text":"character vector specimen columns absent user's CSV file.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/detect_missing_specimen_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect Missing Specimen Columns in User's CSV File — detect_missing_specimen_columns","text":"","code":"if (FALSE) { # \\dontrun{ specimen_data <- data.frame(StudyCode = c(\"ST001\"), SpecimenID = c(\"SP001\")) specimen_column_attrs <- SpecimenColumnAttributes$new() database_path <- \"path_to_database.sqlite\" detect_missing_specimen_columns(specimen_data, specimen_column_attrs, database_path) } # }"},{"path":"https://eppicenter.github.io/sampleDB/reference/display_app_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Display the URL of the deployed Shiny application. — display_app_url","title":"Display the URL of the deployed Shiny application. — display_app_url","text":"Display URL deployed Shiny application.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/display_app_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display the URL of the deployed Shiny application. — display_app_url","text":"","code":"display_app_url()"},{"path":"https://eppicenter.github.io/sampleDB/reference/dot-Backup.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to backup a SQLite database — .Backup","title":"Internal function to backup a SQLite database — .Backup","text":"Internal function backup SQLite database","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/dot-Backup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to backup a SQLite database — .Backup","text":"","code":".Backup(database, backup_dest)"},{"path":"https://eppicenter.github.io/sampleDB/reference/dot-Backup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function to backup a SQLite database — .Backup","text":"database Path SQLite database file. backup_dest Destination path backup file.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/dot-Backup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function to backup a SQLite database — .Backup","text":"Returns TRUE backup file exists, FALSE otherwise.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/dot-Compress.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to compress a file — .Compress","title":"Internal function to compress a file — .Compress","text":"Internal function compress file","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/dot-Compress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to compress a file — .Compress","text":"","code":".Compress(source_file, destination_file)"},{"path":"https://eppicenter.github.io/sampleDB/reference/dot-Compress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function to compress a file — .Compress","text":"source_file original file compressed. destination_file destination path compressed file.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/dot-Compress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function to compress a file — .Compress","text":"path compressed file.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/dot-Uncompress.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to uncompress a file — .Uncompress","title":"Internal function to uncompress a file — .Uncompress","text":"Internal function uncompress file","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/dot-Uncompress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to uncompress a file — .Uncompress","text":"","code":".Uncompress(source_file, destination_file)"},{"path":"https://eppicenter.github.io/sampleDB/reference/dot-Uncompress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function to uncompress a file — .Uncompress","text":"source_file Compressed file path. destination_file Destination path uncompressed file.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/dot-Uncompress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function to uncompress a file — .Uncompress","text":"Returns TRUE destination file exists decompression.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/dot-UpdateActiveControlCount.html","id":null,"dir":"Reference","previous_headings":"","what":"Update the Number of Extracted DNA Controls After Extraction — .UpdateActiveControlCount","title":"Update the Number of Extracted DNA Controls After Extraction — .UpdateActiveControlCount","text":"internal function updates number active controls given type DNA extraction extraction performed.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/dot-UpdateActiveControlCount.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update the Number of Extracted DNA Controls After Extraction — .UpdateActiveControlCount","text":"","code":".UpdateActiveControlCount(user_data, control_extraction, con)"},{"path":"https://eppicenter.github.io/sampleDB/reference/dot-UpdateActiveControlCount.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update the Number of Extracted DNA Controls After Extraction — .UpdateActiveControlCount","text":"user_data data frame containing DNA extraction data. control_extraction character string specifying type control extraction. con database connection object.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/dot-UploadSpecimens.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload Specimens to SampleDB — .UploadSpecimens","title":"Upload Specimens to SampleDB — .UploadSpecimens","text":"internal function uploads specimen data SampleDB database. validates data checks existing entries updating database.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/dot-UploadSpecimens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload Specimens to SampleDB — .UploadSpecimens","text":"","code":".UploadSpecimens(upload_data, sample_type_id, conn, extraction = FALSE)"},{"path":"https://eppicenter.github.io/sampleDB/reference/dot-UploadSpecimens.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload Specimens to SampleDB — .UploadSpecimens","text":"upload_data data frame containing specimen data. sample_type_id character numeric identifier sample type. conn database connection object. extraction extraction control, regular sample. enforce checks make sure writing database reading certain tables. example study subject table, read extraction.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/execute_sql.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute SQL Queries on a Database — execute_sql","title":"Execute SQL Queries on a Database — execute_sql","text":"Execute SQL Queries Database","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/execute_sql.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute SQL Queries on a Database — execute_sql","text":"","code":"execute_sql(con, sql)"},{"path":"https://eppicenter.github.io/sampleDB/reference/execute_sql.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute SQL Queries on a Database — execute_sql","text":"con Database connection. sql List SQL queries execute.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/execute_upgrade_sql_script.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute sql — execute_upgrade_sql_script","title":"Execute sql — execute_upgrade_sql_script","text":"Execute sql","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/execute_upgrade_sql_script.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute sql — execute_upgrade_sql_script","text":"","code":"execute_upgrade_sql_script(con, upgrade_script_path)"},{"path":"https://eppicenter.github.io/sampleDB/reference/execute_upgrade_sql_script.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute sql — execute_upgrade_sql_script","text":"con Database connection upgrade_script_path Upgrade script path.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/extract_search_criteria.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Search Criteria from User CSV File — extract_search_criteria","title":"Extract Search Criteria from User CSV File — extract_search_criteria","text":"function reads CSV file provided user extracts search criteria based specified search type (either \"barcode\" \"study_subject\").","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/extract_search_criteria.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Search Criteria from User CSV File — extract_search_criteria","text":"","code":"extract_search_criteria(user_csv, search_type)"},{"path":"https://eppicenter.github.io/sampleDB/reference/extract_search_criteria.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Search Criteria from User CSV File — extract_search_criteria","text":"user_csv path user-provided CSV file. search_type string indicating type search (\"barcode\" \"study_subject\").","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/extract_search_criteria.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Search Criteria from User CSV File — extract_search_criteria","text":"message indicating whether required columns detected.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/finalize_upgrade.html","id":null,"dir":"Reference","previous_headings":"","what":"Finalize the database upgrade — finalize_upgrade","title":"Finalize the database upgrade — finalize_upgrade","text":"function finalizes database upgrade : Removing unused pages. Closing database connection. Copying new database original path. Changing file permissions.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/finalize_upgrade.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finalize the database upgrade — finalize_upgrade","text":"","code":"finalize_upgrade(database, new_database, con)"},{"path":"https://eppicenter.github.io/sampleDB/reference/finalize_upgrade.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finalize the database upgrade — finalize_upgrade","text":"database Path original database. new_database Path upgraded database. con Connection new database","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/finalize_upgrade.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finalize the database upgrade — finalize_upgrade","text":"None.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/find_column_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Find First Matching Column Name — find_column_name","title":"Find First Matching Column Name — find_column_name","text":"function checks presence potential column names within data frame returns first one matches, NA_character_ none found.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/find_column_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find First Matching Column Name — find_column_name","text":"","code":"find_column_name(data, potential_names)"},{"path":"https://eppicenter.github.io/sampleDB/reference/find_column_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find First Matching Column Name — find_column_name","text":"data data frame tibble. potential_names character vector containing potential column names search .","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/find_column_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find First Matching Column Name — find_column_name","text":"string representing first matching column name, NA_character_ none found.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/find_column_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find First Matching Column Name — find_column_name","text":"","code":"df <- data.frame(   Barcode = 1:5,   FreezerName = 6:10 ) find_column_name(df, c(\"Barcode\", \"Tube ID\", \"TubeCode\")) #> [1] \"Barcode\" find_column_name(df, c(\"FreezerName\", \"FreezerName\")) #> [1] \"FreezerName\""},{"path":"https://eppicenter.github.io/sampleDB/reference/find_header.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify the row in a CSV file that matches the header based on required column names. — find_header","title":"Identify the row in a CSV file that matches the header based on required column names. — find_header","text":"Identify row CSV file matches header based required column names.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/find_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify the row in a CSV file that matches the header based on required column names. — find_header","text":"","code":"find_header(user_file, required_user_column_names, valid_header_rows = 1:2)"},{"path":"https://eppicenter.github.io/sampleDB/reference/find_header.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify the row in a CSV file that matches the header based on required column names. — find_header","text":"user_file data frame representing CSV file. required_user_column_names character vector required column names. valid_header_rows numeric vector row numbers consider potential header rows. default, considers first two rows.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/find_header.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify the row in a CSV file that matches the header based on required column names. — find_header","text":"integer representing row number header found, NULL found.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/find_header.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify the row in a CSV file that matches the header based on required column names. — find_header","text":"","code":"if (FALSE) { # \\dontrun{ user_data <- read.csv(\"path_to_user_file.csv\", header = FALSE) find_header(user_data, c(\"Name\", \"Age\")) } # }"},{"path":"https://eppicenter.github.io/sampleDB/reference/format_composition_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Format composition types — format_composition_types","title":"Format composition types — format_composition_types","text":"Format composition types","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/format_composition_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format composition types — format_composition_types","text":"","code":"format_composition_types(n)"},{"path":"https://eppicenter.github.io/sampleDB/reference/format_composition_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format composition types — format_composition_types","text":"n numeric vector represents number strains found composition","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/format_composition_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format composition types — format_composition_types","text":"character vector monoclonal polyclonal types database (1-strain, 2-strain, etc.)","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/format_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Formatting Error Data Frame — format_error","title":"Create Formatting Error Data Frame — format_error","text":"function creates data frame detailing formatting errors required columns missing.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/format_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Formatting Error Data Frame — format_error","text":"","code":"format_error(   required,   reason = \"Always Required\",   trigger = \"Not detected in file\" )"},{"path":"https://eppicenter.github.io/sampleDB/reference/format_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Formatting Error Data Frame — format_error","text":"required character vector required column names detected.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/format_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Formatting Error Data Frame — format_error","text":"data frame detailing formatting errors.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/format_error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Formatting Error Data Frame — format_error","text":"","code":"if (FALSE) { # \\dontrun{ format_error(c(\"Name\", \"Age\")) } # }"},{"path":"https://eppicenter.github.io/sampleDB/reference/format_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Format labels for compositions in a dplyr pipeline — format_labels","title":"Format labels for compositions in a dplyr pipeline — format_labels","text":"function formats labels given compositions based legacy status index. function designed work within dplyr pipeline.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/format_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format labels for compositions in a dplyr pipeline — format_labels","text":"","code":"format_labels(   data,   legacy_col = \"legacy\",   label_col = \"label\",   index_col = \"index\" )"},{"path":"https://eppicenter.github.io/sampleDB/reference/format_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format labels for compositions in a dplyr pipeline — format_labels","text":"data tibble containing compositions labeled. dataframe contain columns legacy, label, index. legacy_col name column contains legacy flag. Default \"legacy\". label_col name column contains labels. Default \"label\". index_col name column contains index. Default \"index\".","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/format_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format labels for compositions in a dplyr pipeline — format_labels","text":"tibble containing formatted labels.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/format_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format labels for compositions in a dplyr pipeline — format_labels","text":"","code":"df <- tibble(legacy = c(1, 0), label = c(\"S1\", \"S2\"), index = c(1, 2)) #> Error in tibble(legacy = c(1, 0), label = c(\"S1\", \"S2\"), index = c(1,     2)): could not find function \"tibble\" df %>% format_labels() #> Error in df %>% format_labels(): could not find function \"%>%\""},{"path":"https://eppicenter.github.io/sampleDB/reference/fuzzy_merge_unique_compositions.html","id":null,"dir":"Reference","previous_headings":"","what":"Fuzzy Merge Unique Compositions — fuzzy_merge_unique_compositions","title":"Fuzzy Merge Unique Compositions — fuzzy_merge_unique_compositions","text":"function performs fuzzy merge unique compositions based sorted strains percentages. compares percentages within given tolerance decide whether considered . function performs full join without filtering, user filter afterwards want 'inner join' behavior.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/fuzzy_merge_unique_compositions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fuzzy Merge Unique Compositions — fuzzy_merge_unique_compositions","text":"","code":"fuzzy_merge_unique_compositions(user_data, db_data, tolerance = 0.01)"},{"path":"https://eppicenter.github.io/sampleDB/reference/fuzzy_merge_unique_compositions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fuzzy Merge Unique Compositions — fuzzy_merge_unique_compositions","text":"user_data Data frame containing sorted_strains_key sorted_percentages columns, typically output get_unique_compositions_from_user_data. db_data Data frame containing sorted_strains_key sorted_percentages columns, typically output get_unique_compositions_from_database. tolerance Numeric tolerance within two percentages considered similar. Default 0.01.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/fuzzy_merge_unique_compositions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fuzzy Merge Unique Compositions — fuzzy_merge_unique_compositions","text":"data frame logical column 'match' indicating whether compositions user_data db_data match within given tolerance.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/generate_upgrade_script_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Path to Database Upgrade Script — generate_upgrade_script_path","title":"Generate Path to Database Upgrade Script — generate_upgrade_script_path","text":"function generates file path SQL upgrade script based current version index, available database versions, package name.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/generate_upgrade_script_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Path to Database Upgrade Script — generate_upgrade_script_path","text":"","code":"generate_upgrade_script_path(current_version_idx, db_versions, pkgname)"},{"path":"https://eppicenter.github.io/sampleDB/reference/generate_upgrade_script_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Path to Database Upgrade Script — generate_upgrade_script_path","text":"current_version_idx Index current database version. db_versions vector available database versions. pkgname Name package SQL scripts located.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/generate_upgrade_script_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Path to Database Upgrade Script — generate_upgrade_script_path","text":"string representing file path SQL upgrade script.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_all_control_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all control types — get_all_control_types","title":"Get all control types — get_all_control_types","text":"Get control types","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_all_control_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all control types — get_all_control_types","text":"","code":"get_all_control_types(control_file = \"controls.json\", app_file = \"app.json\")"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_all_control_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all control types — get_all_control_types","text":"control_file character string indicating path controls.json file. app_file character string indicating path app.json file.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_all_control_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all control types — get_all_control_types","text":"named list control types.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_all_control_types.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all control types — get_all_control_types","text":"","code":"get_all_control_types() #>     DBS Sheet   Whole Blood  #>   \"dbs_sheet\" \"whole_blood\""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_all_sample_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all sample types — get_all_sample_types","title":"Get all sample types — get_all_sample_types","text":"Get sample types","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_all_sample_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all sample types — get_all_sample_types","text":"","code":"get_all_sample_types(sample_file = \"samples.json\", app_file = \"app.json\")"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_all_sample_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all sample types — get_all_sample_types","text":"sample_file character string indicating path samples.json file. app_file character string indicating path app.json file.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_all_sample_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all sample types — get_all_sample_types","text":"named list sample types.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_all_sample_types.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all sample types — get_all_sample_types","text":"","code":"get_all_sample_types() #>     Micronix     Cryovial          DBS  #>   \"micronix\"   \"cryovial\" \"dbs_sample\""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_batches.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all batches from the database — get_batches","title":"Get all batches from the database — get_batches","text":"Get batches database","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_batches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all batches from the database — get_batches","text":"","code":"get_batches(con)"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_batches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all batches from the database — get_batches","text":"con database connection","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_batches.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all batches from the database — get_batches","text":"character vector batches database character vector studies database","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_batches.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all batches from the database — get_batches","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\") #> Error in dbConnect(RSQLite::SQLite(), \":memory:\"): could not find function \"dbConnect\" get_batches(con) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'conn' in selecting a method for function 'dbReadTable': object 'con' not found dbDisconnect(con) #> Error in dbDisconnect(con): could not find function \"dbDisconnect\""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_composition_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all composition type from the database — get_composition_types","title":"Get all composition type from the database — get_composition_types","text":"Get composition type database","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_composition_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all composition type from the database — get_composition_types","text":"","code":"get_composition_types(con)"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_composition_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all composition type from the database — get_composition_types","text":"con database connection","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_composition_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all composition type from the database — get_composition_types","text":"character vector monoclonal polyclonal types database","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_container_by_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Get containers by specified sample type — get_container_by_control","title":"Get containers by specified sample type — get_container_by_control","text":"Get containers specified sample type","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_container_by_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get containers by specified sample type — get_container_by_control","text":"","code":"get_container_by_control(control_type)"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_container_by_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get containers by specified sample type — get_container_by_control","text":"control_type character string specifying type sample.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_container_by_control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get containers by specified sample type — get_container_by_control","text":"named list containers specified sample type.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_container_by_control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get containers by specified sample type — get_container_by_control","text":"","code":"get_container_by_sample(sample_type = \"micronix\") #> $position_keys #> $position_keys[[1]] #> [1] \"Row\"    \"Column\" #>  #>  #> $container_name_key #> [1] \"PlateName\" #>  #> $container_barcode_key #> NULL #>"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_container_by_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Get containers by specified sample type — get_container_by_sample","title":"Get containers by specified sample type — get_container_by_sample","text":"Get containers specified sample type","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_container_by_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get containers by specified sample type — get_container_by_sample","text":"","code":"get_container_by_sample(   sample_type,   sample_file = \"samples.json\",   app_file = \"app.json\" )"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_container_by_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get containers by specified sample type — get_container_by_sample","text":"sample_type character string specifying type sample. sample_file character string indicating path samples.json file. app_file character string indicating path app.json file.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_container_by_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get containers by specified sample type — get_container_by_sample","text":"named list containers specified sample type.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_container_by_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get containers by specified sample type — get_container_by_sample","text":"","code":"get_container_by_sample(sample_type = \"micronix\") #> $position_keys #> $position_keys[[1]] #> [1] \"Row\"    \"Column\" #>  #>  #> $container_name_key #> [1] \"PlateName\" #>  #> $container_barcode_key #> NULL #>"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_container_table_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Relevant Table Name Based on Container Class — get_container_table_name","title":"Get the Relevant Table Name Based on Container Class — get_container_table_name","text":"function returns name relevant database table based provided container class.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_container_table_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Relevant Table Name Based on Container Class — get_container_table_name","text":"","code":"get_container_table_name(container_class)"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_container_table_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the Relevant Table Name Based on Container Class — get_container_table_name","text":"container_class string representing container class. Currently supports \"micronix_tube\" \"cryovial_tube\".","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_container_table_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Relevant Table Name Based on Container Class — get_container_table_name","text":"string representing name relevant table. stop throw error invalid unsupported container classes.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_container_table_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the Relevant Table Name Based on Container Class — get_container_table_name","text":"","code":"get_container_table_name(\"micronix_tube\") # Should return \"micronix_plate\" #> [1] \"micronix_plate\" get_container_table_name(\"cryovial_tube\") # Should return \"cryovial_plate\" #> [1] \"cryovial_plate\""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_control_action_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Get action types for a specific control — get_control_action_types","title":"Get action types for a specific control — get_control_action_types","text":"Get action types specific control","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_control_action_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get action types for a specific control — get_control_action_types","text":"","code":"get_control_action_types(   control_type,   control_file = \"controls.json\",   app_file = \"app.json\" )"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_control_action_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get action types for a specific control — get_control_action_types","text":"control_type character string representing type control. control_file character string indicating path controls.json file. app_file character string indicating path app.json file.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_control_action_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get action types for a specific control — get_control_action_types","text":"named list action types NULL actions defined.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_control_action_types.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get action types for a specific control — get_control_action_types","text":"","code":"get_control_action_types(\"dbs_sheet\") #>       Create      Extract  #>     \"create\" \"extraction\""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_control_file_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve ColumnData for a given control type and action — get_control_file_columns","title":"Retrieve ColumnData for a given control type and action — get_control_file_columns","text":"function provides ColumnData S3 object specific control type action.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_control_file_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve ColumnData for a given control type and action — get_control_file_columns","text":"","code":"get_control_file_columns(   control_type,   action,   file_type = \"na\",   config_yml = Sys.getenv(\"SDB_CONFIG\"),   controls_file = \"controls.json\" )"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_control_file_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve ColumnData for a given control type and action — get_control_file_columns","text":"control_type Type control columns needed. action Desired action. file_type file type used. Default 'na'. config_yml (default: Sys.getenv(\"SDB_CONFIG\")) Path application config file. controls_file (default: \"controls.json\") Path JSON file containing controls data.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_control_file_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve ColumnData for a given control type and action — get_control_file_columns","text":"ColumnData S3 object.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_control_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Get control types from a JSON file — get_control_types","title":"Get control types from a JSON file — get_control_types","text":"Retrieves named list control types \"name\" names list \"type\" values.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_control_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get control types from a JSON file — get_control_types","text":"","code":"get_control_types(controls_file = \"controls.json\")"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_control_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get control types from a JSON file — get_control_types","text":"controls_file Name controls JSON file. Default \"controls.json\".","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_control_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get control types from a JSON file — get_control_types","text":"named list control types.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_db_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Current Database Version — get_db_version","title":"Retrieve Current Database Version — get_db_version","text":"Retrieve Current Database Version","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_db_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Current Database Version — get_db_version","text":"","code":"get_db_version(db_or_conn = Sys.getenv(\"SDB_PATH\"))"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_db_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Current Database Version — get_db_version","text":"db_or_conn Either connection string SQLite database active connection.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_db_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Current Database Version — get_db_version","text":"Character string indicating current version database.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_densities.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all densities from the database — get_densities","title":"Get all densities from the database — get_densities","text":"Get densities database","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_densities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all densities from the database — get_densities","text":"","code":"get_densities(con)"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_densities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all densities from the database — get_densities","text":"con database connection","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_densities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all densities from the database — get_densities","text":"character vector batches database character vector studies database","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_densities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all densities from the database — get_densities","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\") #> Error in dbConnect(RSQLite::SQLite(), \":memory:\"): could not find function \"dbConnect\" get_batches(con) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'conn' in selecting a method for function 'dbReadTable': object 'con' not found dbDisconnect(con) #> Error in dbDisconnect(con): could not find function \"dbDisconnect\""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_dereferenced_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Get dereferenced values using sample_values and shared_values — get_dereferenced_values","title":"Get dereferenced values using sample_values and shared_values — get_dereferenced_values","text":"function retrieves values based keys provided.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_dereferenced_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get dereferenced values using sample_values and shared_values — get_dereferenced_values","text":"","code":"get_dereferenced_values(dereferenced_keys, sample_values, shared_values)"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_dereferenced_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get dereferenced values using sample_values and shared_values — get_dereferenced_values","text":"dereferenced_keys List keys look . sample_values List primary values. shared_values List secondary values.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_dereferenced_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get dereferenced values using sample_values and shared_values — get_dereferenced_values","text":"flattened list values.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_destination_container_by_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Get destination container by specified control type — get_destination_container_by_control","title":"Get destination container by specified control type — get_destination_container_by_control","text":"Get destination container specified control type","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_destination_container_by_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get destination container by specified control type — get_destination_container_by_control","text":"","code":"get_destination_container_by_control(   control_type,   control_file = \"controls.json\",   app_file = \"app.json\" )"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_destination_container_by_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get destination container by specified control type — get_destination_container_by_control","text":"control_type character string specifying type control. control_file character string indicating path controls.json file. app_file character string indicating path app.json file.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_destination_container_by_control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get destination container by specified control type — get_destination_container_by_control","text":"named list destination containers specified control type.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_destination_container_by_control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get destination container by specified control type — get_destination_container_by_control","text":"","code":"get_destination_container_by_control(control_type = \"DBS Sheet\") #> Error in get_destination_container_by_control(control_type = \"DBS Sheet\"): Specified control type not found."},{"path":"https://eppicenter.github.io/sampleDB/reference/get_destination_location_by_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Get destination location by specified control type — get_destination_location_by_control","title":"Get destination location by specified control type — get_destination_location_by_control","text":"Get destination location specified control type","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_destination_location_by_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get destination location by specified control type — get_destination_location_by_control","text":"","code":"get_destination_location_by_control(   control_type,   control_file = \"controls.json\",   app_file = \"app.json\" )"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_destination_location_by_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get destination location by specified control type — get_destination_location_by_control","text":"control_type character string specifying type control. control_file character string indicating path controls.json file. app_file character string indicating path app.json file.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_destination_location_by_control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get destination location by specified control type — get_destination_location_by_control","text":"named list destination locations specified control type.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_destination_location_by_control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get destination location by specified control type — get_destination_location_by_control","text":"","code":"get_destination_location_by_control(control_type = \"DBS Sheet\") #> Error in get_destination_location_by_control(control_type = \"DBS Sheet\"): Specified control type not found."},{"path":"https://eppicenter.github.io/sampleDB/reference/get_duplicated_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Find duplicate rows in a data frame — get_duplicated_rows","title":"Find duplicate rows in a data frame — get_duplicated_rows","text":"Find duplicate rows data frame","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_duplicated_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find duplicate rows in a data frame — get_duplicated_rows","text":"","code":"get_duplicated_rows(data)"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_duplicated_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find duplicate rows in a data frame — get_duplicated_rows","text":"data data frame. cols character vector column names check duplicates.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_environ_file_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Get environ file path — get_environ_file_path","title":"Get environ file path — get_environ_file_path","text":"Get environ file path","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_environ_file_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get environ file path — get_environ_file_path","text":"","code":"get_environ_file_path(site_install)"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_environ_file_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get environ file path — get_environ_file_path","text":"site_install Logical indicating whether installation site-wide.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_environ_file_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get environ file path — get_environ_file_path","text":"character string environment file path.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_expected_versions.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Expected Versions from JSON File — get_expected_versions","title":"Retrieve Expected Versions from JSON File — get_expected_versions","text":"function gets expected versions specified package external 'versions.json' file within package's 'extdata' directory.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_expected_versions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Expected Versions from JSON File — get_expected_versions","text":"","code":"get_expected_versions(pkgname)"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_expected_versions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Expected Versions from JSON File — get_expected_versions","text":"pkgname name package expected versions retrieved.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_expected_versions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Expected Versions from JSON File — get_expected_versions","text":"list containing expected versions described 'versions.json' file.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_expected_versions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Expected Versions from JSON File — get_expected_versions","text":"","code":"if (FALSE) { # \\dontrun{ get_expected_versions(\"sampleDB\") } # }"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_extractions.html","id":null,"dir":"Reference","previous_headings":"","what":"Get extractions — get_extractions","title":"Get extractions — get_extractions","text":"Get extractions","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_extractions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get extractions — get_extractions","text":"","code":"get_extractions(database = Sys.getenv(\"SDB_PATH\"))"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_extractions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get extractions — get_extractions","text":"database database path","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_extractions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get extractions — get_extractions","text":"tibble extractions","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_extractions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get extractions — get_extractions","text":"","code":"database <- Sys.getenv(\"SDB_PATH\") get_extractions(database) #> Error in db_query_fields.DBIConnection(con, ...): Can't query fields. #> ℹ Using SQL: SELECT * FROM `storage_container` AS `q01` WHERE (0 = 1) #> Caused by error: #> ! no such table: storage_container"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_file_types_for_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Get file types for a specific control — get_file_types_for_control","title":"Get file types for a specific control — get_file_types_for_control","text":"Get file types specific control","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_file_types_for_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get file types for a specific control — get_file_types_for_control","text":"","code":"get_file_types_for_control(   control_type,   control_file = \"controls.json\",   app_file = \"app.json\" )"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_file_types_for_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get file types for a specific control — get_file_types_for_control","text":"control_type character string representing type control. control_file character string indicating path controls.json file. app_file character string indicating path app.json file.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_file_types_for_control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get file types for a specific control — get_file_types_for_control","text":"named list file types list \"NA\" specified.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_file_types_for_control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get file types for a specific control — get_file_types_for_control","text":"","code":"get_file_types_for_control(\"dbs_sheet\") #> $control_type #> $control_type$<NA> #> NULL #>  #>"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_file_types_for_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Get file types for a specific sample — get_file_types_for_sample","title":"Get file types for a specific sample — get_file_types_for_sample","text":"Get file types specific sample","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_file_types_for_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get file types for a specific sample — get_file_types_for_sample","text":"","code":"get_file_types_for_sample(   sample_type,   sample_file = \"samples.json\",   app_file = \"app.json\" )"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_file_types_for_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get file types for a specific sample — get_file_types_for_sample","text":"sample_type character string representing type sample. sample_file character string indicating path samples.json file. app_file character string indicating path app.json file.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_file_types_for_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get file types for a specific sample — get_file_types_for_sample","text":"named list file types list \"NA\" specified.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_file_types_for_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get file types for a specific sample — get_file_types_for_sample","text":"","code":"get_file_types_for_sample(\"micronix\") #>           NA   VisionMate      Traxcer  #>         \"na\" \"visionmate\"    \"traxcer\""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_location_by_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Get locations by specified sample type — get_location_by_sample","title":"Get locations by specified sample type — get_location_by_sample","text":"Get locations specified sample type","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_location_by_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get locations by specified sample type — get_location_by_sample","text":"","code":"get_location_by_sample(   sample_type,   sample_file = \"samples.json\",   app_file = \"app.json\" )"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_location_by_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get locations by specified sample type — get_location_by_sample","text":"sample_type character string specifying type sample. sample_file character string indicating path samples.json file. app_file character string indicating path app.json file.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_location_by_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get locations by specified sample type — get_location_by_sample","text":"named list locations specified sample type.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_location_by_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get locations by specified sample type — get_location_by_sample","text":"","code":"get_location_by_sample(sample_type = \"micronix\") #> $location_root #> [1] \"FreezerName\" #>  #> $level_i #> [1] \"ShelfName\" #>  #> $level_ii #> [1] \"BasketName\" #>"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_matched_studies.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Matched Studies from the Database — get_matched_studies","title":"Retrieve Matched Studies from the Database — get_matched_studies","text":"function connects specified SQLite database, retrieves study records match StudyCode present user's file, returns matched studies.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_matched_studies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Matched Studies from the Database — get_matched_studies","text":"","code":"get_matched_studies(user_file, database)"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_matched_studies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Matched Studies from the Database — get_matched_studies","text":"user_file data frame representing user's CSV file. database character string specifying path SQLite database.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_matched_studies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Matched Studies from the Database — get_matched_studies","text":"data frame containing matched study records.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_matched_studies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Matched Studies from the Database — get_matched_studies","text":"","code":"if (FALSE) { # \\dontrun{ user_file <- data.frame(StudyCode = c(\"ST001\", \"ST002\")) database_path <- \"path_to_database.sqlite\" get_matched_studies(user_file, database_path) } # }"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_normalized_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Get normalized path — get_normalized_path","title":"Get normalized path — get_normalized_path","text":"Get normalized path","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_normalized_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get normalized path — get_normalized_path","text":"","code":"get_normalized_path(site_install, pkgname, dir_type, filename)"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_normalized_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get normalized path — get_normalized_path","text":"site_install Logical indicating whether installation site-wide. pkgname Character string package name. dir_type Character string specifying type directory. Valid values \"config\" \"data\". filename File add.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_normalized_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get normalized path — get_normalized_path","text":"character string normalized path.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_package_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Installation Path of a Package — get_package_path","title":"Get Installation Path of a Package — get_package_path","text":"Retrieves installation path given package.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_package_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Installation Path of a Package — get_package_path","text":"","code":"get_package_path(pkgname)"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_package_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Installation Path of a Package — get_package_path","text":"pkgname Character string specifying name package.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_package_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Installation Path of a Package — get_package_path","text":"Character string indicating installation path package, NULL package found.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_package_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Installation Path of a Package — get_package_path","text":"","code":"get_package_path(\"sampleDB\") #> Error in get_package_path(\"sampleDB\"): could not find function \"get_package_path\""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_percentages.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all batches from the database — get_percentages","title":"Get all batches from the database — get_percentages","text":"Get batches database","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_percentages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all batches from the database — get_percentages","text":"","code":"get_percentages(con)"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_percentages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all batches from the database — get_percentages","text":"con database connection","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_percentages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all batches from the database — get_percentages","text":"character vector batches database character vector studies database","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_percentages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all batches from the database — get_percentages","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\") #> Error in dbConnect(RSQLite::SQLite(), \":memory:\"): could not find function \"dbConnect\" get_batches(con) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'conn' in selecting a method for function 'dbReadTable': object 'con' not found dbDisconnect(con) #> Error in dbDisconnect(con): could not find function \"dbDisconnect\""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_position_column_by_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the expected position column for a sample type — get_position_column_by_sample","title":"Get the expected position column for a sample type — get_position_column_by_sample","text":"Micronix different file formats report sample positioning different ways. function makes easy look information.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_position_column_by_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the expected position column for a sample type — get_position_column_by_sample","text":"","code":"get_position_column_by_sample(   sample_type,   file_type = \"na\",   sample_file = \"samples.json\",   app_file = \"app.json\" )"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_position_column_by_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the expected position column for a sample type — get_position_column_by_sample","text":"sample_type character string specifying type sample. file_type file type (default: \"na\") sample_file character string indicating path samples.json file. (default: \"samples.json\") control_file character string specifying path controls.json file. (default: \"app.json\")","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_position_column_by_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the expected position column for a sample type — get_position_column_by_sample","text":"position column sample type.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_reference_file_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve ColumnData for a given reference type. — get_reference_file_columns","title":"Retrieve ColumnData for a given reference type. — get_reference_file_columns","text":"function provides ColumnData S3 object specific reference type.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_reference_file_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve ColumnData for a given reference type. — get_reference_file_columns","text":"","code":"get_reference_file_columns(   reference_type,   config_yml = Sys.getenv(\"SDB_CONFIG\"),   references_file = \"references.json\" )"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_reference_file_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve ColumnData for a given reference type. — get_reference_file_columns","text":"reference_type Type reference columns needed. config_yml (default: Sys.getenv(\"SDB_CONFIG\")) Path application config file references_file (default: \"references.json\") Path JSON file containing references data.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_reference_file_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve ColumnData for a given reference type. — get_reference_file_columns","text":"ColumnData S3 object.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_sample_action_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Get action types for a specific sample — get_sample_action_types","title":"Get action types for a specific sample — get_sample_action_types","text":"Get action types specific sample","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_sample_action_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get action types for a specific sample — get_sample_action_types","text":"","code":"get_sample_action_types(   sample_type,   sample_file = \"samples.json\",   app_file = \"app.json\" )"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_sample_action_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get action types for a specific sample — get_sample_action_types","text":"sample_type character string representing type sample. sample_file character string indicating path samples.json file. app_file character string indicating path app.json file.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_sample_action_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get action types for a specific sample — get_sample_action_types","text":"named list action types NULL actions defined.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_sample_action_types.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get action types for a specific sample — get_sample_action_types","text":"","code":"get_sample_action_types(\"micronix\") #>   Upload     Move  #> \"upload\"   \"move\""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_sample_file_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve ColumnData for a given sample type and action. — get_sample_file_columns","title":"Retrieve ColumnData for a given sample type and action. — get_sample_file_columns","text":"function provides ColumnData S3 object specific sample type action.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_sample_file_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve ColumnData for a given sample type and action. — get_sample_file_columns","text":"","code":"get_sample_file_columns(   sample_type,   action,   file_type = \"na\",   config_yml = Sys.getenv(\"SDB_CONFIG\"),   samples_file = \"samples.json\" )"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_sample_file_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve ColumnData for a given sample type and action. — get_sample_file_columns","text":"sample_type Type sample columns needed. action Desired action. file_type file type used. Default 'na'. config_yml (default: Sys.getenv(\"SDB_PATH\")) Path application config file samples_file (default: \"samples.json\") Path JSON file containing samples data.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_sample_file_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve ColumnData for a given sample type and action. — get_sample_file_columns","text":"ColumnData S3 object.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_sample_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Get sample types from a JSON file — get_sample_types","title":"Get sample types from a JSON file — get_sample_types","text":"Retrieves named list sample types \"name\" names list \"type\" values.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_sample_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get sample types from a JSON file — get_sample_types","text":"","code":"get_sample_types(samples_file = \"samples.json\")"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_sample_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get sample types from a JSON file — get_sample_types","text":"samples_file Name samples JSON file. Default \"samples.json\".","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_sample_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get sample types from a JSON file — get_sample_types","text":"named list sample types.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_sample_types_by_action.html","id":null,"dir":"Reference","previous_headings":"","what":"Get sample types from a JSON file by action — get_sample_types_by_action","title":"Get sample types from a JSON file by action — get_sample_types_by_action","text":"Retrieves named list sample types \"name\" names list \"type\" values, filtered action.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_sample_types_by_action.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get sample types from a JSON file by action — get_sample_types_by_action","text":"","code":"get_sample_types_by_action(action, samples_file = \"samples.json\")"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_sample_types_by_action.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get sample types from a JSON file by action — get_sample_types_by_action","text":"samples_file Name samples JSON file. Default \"samples.json\".","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_sample_types_by_action.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get sample types from a JSON file by action — get_sample_types_by_action","text":"named list sample types.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_storage_container_by_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Get source container by specified control type — get_storage_container_by_control","title":"Get source container by specified control type — get_storage_container_by_control","text":"Get source container specified control type","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_storage_container_by_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get source container by specified control type — get_storage_container_by_control","text":"","code":"get_storage_container_by_control(   control_type,   control_file = \"controls.json\",   app_file = \"app.json\" )"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_storage_container_by_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get source container by specified control type — get_storage_container_by_control","text":"control_type character string specifying type control. control_file character string indicating path controls.json file. app_file character string indicating path app.json file.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_storage_container_by_control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get source container by specified control type — get_storage_container_by_control","text":"named list extraction containers specified control type.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_storage_container_by_control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get source container by specified control type — get_storage_container_by_control","text":"","code":"get_extraction_container_by_control(control_type = \"DBS Sheet\") #> Error in get_extraction_container_by_control(control_type = \"DBS Sheet\"): could not find function \"get_extraction_container_by_control\""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_storage_location_by_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Get source location by specified control type — get_storage_location_by_control","title":"Get source location by specified control type — get_storage_location_by_control","text":"Get source location specified control type","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_storage_location_by_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get source location by specified control type — get_storage_location_by_control","text":"","code":"get_storage_location_by_control(   control_type,   control_file = \"controls.json\",   app_file = \"app.json\" )"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_storage_location_by_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get source location by specified control type — get_storage_location_by_control","text":"control_type character string specifying type control. control_file character string indicating path controls.json file. app_file character string indicating path app.json file.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_storage_location_by_control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get source location by specified control type — get_storage_location_by_control","text":"named list extraction locations specified control type.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_storage_location_by_control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get source location by specified control type — get_storage_location_by_control","text":"","code":"get_extraction_location_by_control(control_type = \"DBS Sheet\") #> Error in get_extraction_location_by_control(control_type = \"DBS Sheet\"): could not find function \"get_extraction_location_by_control\""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_strains.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all strains from the database — get_strains","title":"Get all strains from the database — get_strains","text":"Get strains database","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_strains.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all strains from the database — get_strains","text":"","code":"get_strains(con)"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_strains.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all strains from the database — get_strains","text":"con database connection","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_strains.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all strains from the database — get_strains","text":"character vector strains database character vector strains database","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_strains.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all strains from the database — get_strains","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\") #> Error in dbConnect(RSQLite::SQLite(), \":memory:\"): could not find function \"dbConnect\" get_strains(con) #> Error: object 'con' not found dbDisconnect(con) #> Error in dbDisconnect(con): could not find function \"dbDisconnect\""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_studies.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all studies from the database — get_studies","title":"Get all studies from the database — get_studies","text":"Get studies database","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_studies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all studies from the database — get_studies","text":"","code":"get_studies(con)"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_studies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all studies from the database — get_studies","text":"con database connection","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_studies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all studies from the database — get_studies","text":"character vector studies database character vector studies database","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_studies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all studies from the database — get_studies","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\") #> Error in dbConnect(RSQLite::SQLite(), \":memory:\"): could not find function \"dbConnect\" get_studies(con) #> Error: object 'con' not found dbDisconnect(con) #> Error in dbDisconnect(con): could not find function \"dbDisconnect\""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_unique_compositions_from_database.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract unique compositions from the database — get_unique_compositions_from_database","title":"Extract unique compositions from the database — get_unique_compositions_from_database","text":"function queries database collect process data, generating unique composition key based sorted strains percentages.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_unique_compositions_from_database.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract unique compositions from the database — get_unique_compositions_from_database","text":"","code":"get_unique_compositions_from_database(con)"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_unique_compositions_from_database.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract unique compositions from the database — get_unique_compositions_from_database","text":"con database connection object.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_unique_compositions_from_database.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract unique compositions from the database — get_unique_compositions_from_database","text":"data frame containing sorted_strains_key composition database associated strains percentages.","code":""},{"path":[]},{"path":"https://eppicenter.github.io/sampleDB/reference/get_unique_compositions_from_user_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize Percentages by Group — get_unique_compositions_from_user_data","title":"Normalize Percentages by Group — get_unique_compositions_from_user_data","text":"Normalize percentage column groups Extract unique compositions user data","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_unique_compositions_from_user_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize Percentages by Group — get_unique_compositions_from_user_data","text":"","code":"get_unique_compositions_from_user_data(user_data)"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_unique_compositions_from_user_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize Percentages by Group — get_unique_compositions_from_user_data","text":"user_data data frame least two columns: 'Strains' 'Percentages', containing semicolon-separated values (polyclonal controls).","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_unique_compositions_from_user_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize Percentages by Group — get_unique_compositions_from_user_data","text":"data frame containing sorted_strains_key row user data.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_unique_compositions_from_user_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Normalize Percentages by Group — get_unique_compositions_from_user_data","text":"function processes user data generate unique composition key based sorted strains percentages.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Get values with priority to sample_values over shared_values. — get_values","title":"Get values with priority to sample_values over shared_values. — get_values","text":"function prioritizes fetches values either sample_values shared_values.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get values with priority to sample_values over shared_values. — get_values","text":"","code":"get_values(keys, sample_values, shared_values)"},{"path":"https://eppicenter.github.io/sampleDB/reference/get_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get values with priority to sample_values over shared_values. — get_values","text":"keys List keys values needed. sample_values List sample values. shared_values List shared values.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/get_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get values with priority to sample_values over shared_values. — get_values","text":"vector values prioritized sample_values, available.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/handle_unknown_date_tokens.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle Unknown Date Tokens — handle_unknown_date_tokens","title":"Handle Unknown Date Tokens — handle_unknown_date_tokens","text":"Adjusts date column rows user signified tokens dates unknown.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/handle_unknown_date_tokens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle Unknown Date Tokens — handle_unknown_date_tokens","text":"","code":"handle_unknown_date_tokens(data, date_col, parsed_dates, token_mask)"},{"path":"https://eppicenter.github.io/sampleDB/reference/handle_unknown_date_tokens.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle Unknown Date Tokens — handle_unknown_date_tokens","text":"data data frame. date_col name date column. parsed_dates vector parsed dates. token_mask logical mask identifying rows recognized tokens indicating unknown dates.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/handle_unknown_date_tokens.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle Unknown Date Tokens — handle_unknown_date_tokens","text":"adjusted data frame.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/handle_upgrade_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle any errors during the database upgrade — handle_upgrade_error","title":"Handle any errors during the database upgrade — handle_upgrade_error","text":"function provides way handle errors might arise database upgrade. clean temporary files disconnect database.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/handle_upgrade_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle any errors during the database upgrade — handle_upgrade_error","text":"","code":"handle_upgrade_error(new_database, e)"},{"path":"https://eppicenter.github.io/sampleDB/reference/handle_upgrade_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle any errors during the database upgrade — handle_upgrade_error","text":"new_database Path temporary new database. e Error message.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/handle_upgrade_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle any errors during the database upgrade — handle_upgrade_error","text":"Stops error message.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/init_and_copy_to_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize Database Connection and Copy User Data — init_and_copy_to_db","title":"Initialize Database Connection and Copy User Data — init_and_copy_to_db","text":"function initializes connection specified database copies user data predefined table database.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/init_and_copy_to_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize Database Connection and Copy User Data — init_and_copy_to_db","text":"","code":"init_and_copy_to_db(database, user_data)"},{"path":"https://eppicenter.github.io/sampleDB/reference/init_and_copy_to_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize Database Connection and Copy User Data — init_and_copy_to_db","text":"database path name SQLite database connect . user_data dataframe containing user data copied database.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/init_and_copy_to_db.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize Database Connection and Copy User Data — init_and_copy_to_db","text":"connection object representing active database connection.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/init_and_copy_to_db.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize Database Connection and Copy User Data — init_and_copy_to_db","text":"","code":"if (FALSE) { # \\dontrun{   database_path <- Sys.getenv(\"DB_PATH\")   user_df <- data.frame(id = 1:3, name = c(\"Alice\", \"Bob\", \"Charlie\"))   conn <- init_and_copy_to_db(database_path, user_df) } # }"},{"path":"https://eppicenter.github.io/sampleDB/reference/init_db_conn.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a Database Connection — init_db_conn","title":"Initialize a Database Connection — init_db_conn","text":"function establishes returns connection SQLite database.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/init_db_conn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a Database Connection — init_db_conn","text":"","code":"init_db_conn(db_path = Sys.getenv(\"SDB_PATH\"))"},{"path":"https://eppicenter.github.io/sampleDB/reference/init_db_conn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a Database Connection — init_db_conn","text":"db_path path SQLite database (default \"SDB_PATH\" env variable).","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/init_db_conn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize a Database Connection — init_db_conn","text":"connection object SQLite database.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/init_db_conn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize a Database Connection — init_db_conn","text":"","code":"if (FALSE) { # \\dontrun{   conn <- init_db_conn(Sys.getenv(\"SDB_PATH\")) } # }"},{"path":"https://eppicenter.github.io/sampleDB/reference/initialize_database_with_base_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize Database with Base Version — initialize_database_with_base_version","title":"Initialize Database with Base Version — initialize_database_with_base_version","text":"function initializes SQLite database using base version.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/initialize_database_with_base_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize Database with Base Version — initialize_database_with_base_version","text":"","code":"initialize_database_with_base_version(con, pkgname, base_version = \"1.0.0\")"},{"path":"https://eppicenter.github.io/sampleDB/reference/initialize_database_with_base_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize Database with Base Version — initialize_database_with_base_version","text":"con Connection new temporary SQLite database. pkgname Name package containing database upgrade scripts. db_versions Vector available database versions.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/initialize_database_with_base_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize Database with Base Version — initialize_database_with_base_version","text":"None (primarily called side effects).","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/initialize_database_with_base_version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize Database with Base Version — initialize_database_with_base_version","text":"","code":"if (FALSE) { # \\dontrun{   initialize_database_with_base_version(tempfile(), \"my_package\", c(\"1.0.0\", \"2.0.0\")) } # }"},{"path":"https://eppicenter.github.io/sampleDB/reference/is_linux_platform.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the system platform is Linux. — is_linux_platform","title":"Check if the system platform is Linux. — is_linux_platform","text":"Check system platform Linux.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/is_linux_platform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the system platform is Linux. — is_linux_platform","text":"","code":"is_linux_platform()"},{"path":"https://eppicenter.github.io/sampleDB/reference/is_linux_platform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the system platform is Linux. — is_linux_platform","text":"Logical value indicating platform Linux.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/is_shiny_server_installed.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Shiny server is installed. — is_shiny_server_installed","title":"Check if Shiny server is installed. — is_shiny_server_installed","text":"Check Shiny server installed.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/is_shiny_server_installed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Shiny server is installed. — is_shiny_server_installed","text":"","code":"is_shiny_server_installed(shiny_server_path)"},{"path":"https://eppicenter.github.io/sampleDB/reference/is_shiny_server_installed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if Shiny server is installed. — is_shiny_server_installed","text":"shiny_server_path Path Shiny server.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/is_shiny_server_installed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if Shiny server is installed. — is_shiny_server_installed","text":"Logical value indicating Shiny server installed.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/is_system_installed.html","id":null,"dir":"Reference","previous_headings":"","what":"Check If Package Is Installed System-wide — is_system_installed","title":"Check If Package Is Installed System-wide — is_system_installed","text":"Determines given package installed system-wide library location. assessed based whether package's installation path matches common system library paths (retrieved via .libPaths()).","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/is_system_installed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check If Package Is Installed System-wide — is_system_installed","text":"","code":"is_system_installed(pkgname)"},{"path":"https://eppicenter.github.io/sampleDB/reference/is_system_installed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check If Package Is Installed System-wide — is_system_installed","text":"pkgname Character string specifying name package check.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/is_system_installed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check If Package Is Installed System-wide — is_system_installed","text":"Logical value indicating package installed system-wide location (TRUE) (FALSE).","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/is_system_installed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check If Package Is Installed System-wide — is_system_installed","text":"","code":"is_system_installed(\"sampleDB\") #> Error in is_system_installed(\"sampleDB\"): could not find function \"is_system_installed\" is_system_installed(\"nonexistentPackage\") #> Error in is_system_installed(\"nonexistentPackage\"): could not find function \"is_system_installed\""},{"path":"https://eppicenter.github.io/sampleDB/reference/join_blood_spot_collections.html","id":null,"dir":"Reference","previous_headings":"","what":"Join Blood Spot Collections — join_blood_spot_collections","title":"Join Blood Spot Collections — join_blood_spot_collections","text":"Join Blood Spot Collections","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/join_blood_spot_collections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join Blood Spot Collections — join_blood_spot_collections","text":"","code":"join_blood_spot_collections(df.payload, con)"},{"path":"https://eppicenter.github.io/sampleDB/reference/join_blood_spot_collections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join Blood Spot Collections — join_blood_spot_collections","text":"df.payload dataframe containing payload data. con database connection object.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/join_blood_spot_collections.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join Blood Spot Collections — join_blood_spot_collections","text":"dataframe joining blood spot collections.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/join_composition_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Process user data to handle malaria blood control details — join_composition_ids","title":"Process user data to handle malaria blood control details — join_composition_ids","text":"Process user data handle malaria blood control details","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/join_composition_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process user data to handle malaria blood control details — join_composition_ids","text":"","code":"join_composition_ids(df.payload, con, composition_id_col)"},{"path":"https://eppicenter.github.io/sampleDB/reference/join_composition_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process user data to handle malaria blood control details — join_composition_ids","text":"df.payload dataframe payload data. con database connection object. composition_id_col Column representing CompositionID.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/join_composition_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process user data to handle malaria blood control details — join_composition_ids","text":"dataframe processed malaria blood control details.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/join_dbs_control_sheets.html","id":null,"dir":"Reference","previous_headings":"","what":"Join DBS control sheets based on bag ID and label — join_dbs_control_sheets","title":"Join DBS control sheets based on bag ID and label — join_dbs_control_sheets","text":"Join DBS control sheets based bag ID label","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/join_dbs_control_sheets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join DBS control sheets based on bag ID and label — join_dbs_control_sheets","text":"","code":"join_dbs_control_sheets(df.payload, con, sheet_name_col)"},{"path":"https://eppicenter.github.io/sampleDB/reference/join_dbs_control_sheets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join DBS control sheets based on bag ID and label — join_dbs_control_sheets","text":"df.payload dataframe payload data. con database connection object. dbs_bag_id_col Column name df.payload DBS bag ID. label_col Column name df.payload label.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/join_dbs_control_sheets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join DBS control sheets based on bag ID and label — join_dbs_control_sheets","text":"dataframe joined DBS control sheets.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/join_locations_and_bags.html","id":null,"dir":"Reference","previous_headings":"","what":"Join locations and bags from user data to the database — join_locations_and_bags","title":"Join locations and bags from user data to the database — join_locations_and_bags","text":"Join locations bags user data database","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/join_locations_and_bags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join locations and bags from user data to the database — join_locations_and_bags","text":"","code":"join_locations_and_bags(   df.payload,   con,   location_root_col,   level_I_col,   level_II_col,   dbs_bag_col )"},{"path":"https://eppicenter.github.io/sampleDB/reference/join_locations_and_bags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join locations and bags from user data to the database — join_locations_and_bags","text":"df.payload dataframe payload data. con database connection object. location_root_col Column name df.payload root location. level_I_col Column name df.payload level location. level_II_col Column name df.payload level II location. dbs_bag_col Column name df.payload DBS bag name.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/join_locations_and_bags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join locations and bags from user data to the database — join_locations_and_bags","text":"dataframe joined location bag details.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/join_locations_and_boxes.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Whole Blood Box Data — join_locations_and_boxes","title":"Process Whole Blood Box Data — join_locations_and_boxes","text":"function check locations add new boxes exist. return boxes locations IDs.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/join_locations_and_boxes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Whole Blood Box Data — join_locations_and_boxes","text":"","code":"join_locations_and_boxes(   con,   user_data,   box_name_col,   box_barcode_col,   location_root_col,   level_I_col,   level_II_col )"},{"path":"https://eppicenter.github.io/sampleDB/reference/join_locations_and_boxes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Whole Blood Box Data — join_locations_and_boxes","text":"con database connection object. user_data dataframe containing payload data. box_name_col Column name user_data box name. box_barcode_col Column name user_data box barcode.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/join_malaria_controls.html","id":null,"dir":"Reference","previous_headings":"","what":"Join malaria controls based on density and study subject ID — join_malaria_controls","title":"Join malaria controls based on density and study subject ID — join_malaria_controls","text":"Join malaria controls based density study subject ID","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/join_malaria_controls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join malaria controls based on density and study subject ID — join_malaria_controls","text":"","code":"join_malaria_controls(df.payload, con)"},{"path":"https://eppicenter.github.io/sampleDB/reference/join_malaria_controls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join malaria controls based on density and study subject ID — join_malaria_controls","text":"df.payload dataframe payload data. con database connection object.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/join_malaria_controls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join malaria controls based on density and study subject ID — join_malaria_controls","text":"dataframe joined malaria controls.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/lock_database.html","id":null,"dir":"Reference","previous_headings":"","what":"Lock a SQLite Database — lock_database","title":"Lock a SQLite Database — lock_database","text":"function locks existing SQLite database prevent modifications performing operations.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/lock_database.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lock a SQLite Database — lock_database","text":"","code":"lock_database(database)"},{"path":"https://eppicenter.github.io/sampleDB/reference/lock_database.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lock a SQLite Database — lock_database","text":"database Path SQLite database locked.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/lock_database.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lock a SQLite Database — lock_database","text":"Database connection object locking operation.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/lock_database.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lock a SQLite Database — lock_database","text":"","code":"if (FALSE) { # \\dontrun{   con <- lock_database(\"path_to_original.db\")   # Do other operations...   DBI::dbDisconnect(con)  # Remember to disconnect when done. } # }"},{"path":"https://eppicenter.github.io/sampleDB/reference/merge_configs.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge Configuration Lists — merge_configs","title":"Merge Configuration Lists — merge_configs","text":"function merges two configuration lists: current configuration new configuration. return merged configuration, preferring values current configuration exist NA.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/merge_configs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge Configuration Lists — merge_configs","text":"","code":"merge_configs(current_config, new_config)"},{"path":"https://eppicenter.github.io/sampleDB/reference/merge_configs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge Configuration Lists — merge_configs","text":"current_config list representing current configuration. new_config list representing new configuration.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/merge_configs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge Configuration Lists — merge_configs","text":"merged list containing elements configurations.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/merge_configs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge Configuration Lists — merge_configs","text":"","code":"if (FALSE) { # \\dontrun{ current <- list(version = \"1.0.0\", key = \"old_value\") new <- list(version = \"1.1.0\", key = NA, new_key = \"new_value\") merged <- merge_configs(current, new) print(merged) } # }"},{"path":"https://eppicenter.github.io/sampleDB/reference/message_not_site_install.html","id":null,"dir":"Reference","previous_headings":"","what":"Display a message indicating the need for a site install. — message_not_site_install","title":"Display a message indicating the need for a site install. — message_not_site_install","text":"Display message indicating need site install.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/message_not_site_install.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display a message indicating the need for a site install. — message_not_site_install","text":"","code":"message_not_site_install()"},{"path":"https://eppicenter.github.io/sampleDB/reference/message_not_supported_platform.html","id":null,"dir":"Reference","previous_headings":"","what":"Display a message indicating Shiny server isn't supported. — message_not_supported_platform","title":"Display a message indicating Shiny server isn't supported. — message_not_supported_platform","text":"Display message indicating Shiny server supported.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/message_not_supported_platform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display a message indicating Shiny server isn't supported. — message_not_supported_platform","text":"","code":"message_not_supported_platform()"},{"path":"https://eppicenter.github.io/sampleDB/reference/message_shiny_not_installed.html","id":null,"dir":"Reference","previous_headings":"","what":"Display a message indicating Shiny server isn't installed. — message_shiny_not_installed","title":"Display a message indicating Shiny server isn't installed. — message_shiny_not_installed","text":"Display message indicating Shiny server installed.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/message_shiny_not_installed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display a message indicating Shiny server isn't installed. — message_shiny_not_installed","text":"","code":"message_shiny_not_installed()"},{"path":"https://eppicenter.github.io/sampleDB/reference/micronix_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Micronix NA — micronix_na","title":"Micronix NA — micronix_na","text":"example upload file single Micronix sample using NA file format","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/micronix_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Micronix NA — micronix_na","text":"","code":"micronix_na"},{"path":[]},{"path":"https://eppicenter.github.io/sampleDB/reference/micronix_na.html","id":"micronix-na","dir":"Reference","previous_headings":"","what":"micronix_na","title":"Micronix NA — micronix_na","text":"data frame 1 rows 13 columns: Barcode 10 digit unique identifier sample Row character denoting row position sample Column integer denoting column position sample StudyCode code associated study sample part StudySubject identifier study subject sample collected SpecimenType specimen contained sample PlateName name plate FreezerName name freezer sample ShelfName shelf sample located BasketName place shelf sample located CollectionDate date sample collected. field required sample part longitudinal study, MUST YYYY-MM-DD format Comment optional field leave comment sample PlateBarcode optional field provide barcode container sample located ","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/micronix_na.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Micronix NA — micronix_na","text":"EPPIcenter","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/normalize_composition_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize Composition IDs from User Data — normalize_composition_ids","title":"Normalize Composition IDs from User Data — normalize_composition_ids","text":"function processes dataframe extract split composition IDs separate columns (Label, Index, LegacyLabel) based format.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/normalize_composition_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize Composition IDs from User Data — normalize_composition_ids","text":"","code":"normalize_composition_ids(   user_data,   in_composition_id_col,   out_label_col,   out_index_col,   out_legacy_col )"},{"path":"https://eppicenter.github.io/sampleDB/reference/normalize_composition_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize Composition IDs from User Data — normalize_composition_ids","text":"user_data dataframe containing user data composition IDs. in_composition_id_col string specifying column name composition IDs user_data. out_label_col string specifying name new column labels stored. Default \"Label\". out_index_col string specifying name new column indexes stored. Default \"Index\". out_legacy_col string specifying name new column legacy status (TRUE FALSE) stored. Default \"LegacyLabel\".","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/normalize_composition_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize Composition IDs from User Data — normalize_composition_ids","text":"dataframe new columns (specified label_col, index_col, legacy_col) containing split composition ID components.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/perform_batch_db_validations.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Database-Related Validations for Batches — perform_batch_db_validations","title":"Perform Database-Related Validations for Batches — perform_batch_db_validations","text":"function conducts database-related validation checks Strains data. initiates database connection, performs create extraction validations based action provided.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/perform_batch_db_validations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Database-Related Validations for Batches — perform_batch_db_validations","text":"","code":"perform_batch_db_validations(database, user_data, action)"},{"path":"https://eppicenter.github.io/sampleDB/reference/perform_batch_db_validations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Database-Related Validations for Batches — perform_batch_db_validations","text":"database database connection specification validation. user_data users data. action action performed, either \"create\" \"extraction\".","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/perform_batch_db_validations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Database-Related Validations for Batches — perform_batch_db_validations","text":"list containing validation errors, .","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/perform_composition_db_validations.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Database-Related Validations for Compositions — perform_composition_db_validations","title":"Perform Database-Related Validations for Compositions — perform_composition_db_validations","text":"function conducts database-related validation checks Compositions data. initiates database connection, performs create extraction validations based action provided.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/perform_composition_db_validations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Database-Related Validations for Compositions — perform_composition_db_validations","text":"","code":"perform_composition_db_validations(database, user_data, action)"},{"path":"https://eppicenter.github.io/sampleDB/reference/perform_composition_db_validations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Database-Related Validations for Compositions — perform_composition_db_validations","text":"database database connection specification validation. user_data users data. action action performed, either \"create\" \"extraction\".","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/perform_composition_db_validations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Database-Related Validations for Compositions — perform_composition_db_validations","text":"list containing validation errors, .","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/perform_cryovial_db_validations.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Database-Related Validations for Cryovials — perform_cryovial_db_validations","title":"Perform Database-Related Validations for Cryovials — perform_cryovial_db_validations","text":"function conducts database-related validation checks Cryovial specimen data. initiates database connection, performs upload move validations based action provided.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/perform_cryovial_db_validations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Database-Related Validations for Cryovials — perform_cryovial_db_validations","text":"","code":"perform_cryovial_db_validations(database, user_data, action)"},{"path":"https://eppicenter.github.io/sampleDB/reference/perform_cryovial_db_validations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Database-Related Validations for Cryovials — perform_cryovial_db_validations","text":"database database connection specification validation. user_data users data. action action performed, either \"upload\" \"move\".","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/perform_cryovial_db_validations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Database-Related Validations for Cryovials — perform_cryovial_db_validations","text":"list containing validation errors, .","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/perform_dbs_sample_db_validations.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Database-Related Validations for DBS Samples — perform_dbs_sample_db_validations","title":"Perform Database-Related Validations for DBS Samples — perform_dbs_sample_db_validations","text":"function conducts database-related validation checks DBS specimen data. initiates database connection, performs upload move validations based action provided.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/perform_dbs_sample_db_validations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Database-Related Validations for DBS Samples — perform_dbs_sample_db_validations","text":"","code":"perform_dbs_sample_db_validations(database, user_data, action)"},{"path":"https://eppicenter.github.io/sampleDB/reference/perform_dbs_sample_db_validations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Database-Related Validations for DBS Samples — perform_dbs_sample_db_validations","text":"database database connection specification validation. user_data users data. action action performed, either \"upload\" \"move\".","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/perform_dbs_sample_db_validations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Database-Related Validations for DBS Samples — perform_dbs_sample_db_validations","text":"list containing validation errors, .","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/perform_dbs_sheet_db_validations.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Database-Related Validations for DBS Sheets — perform_dbs_sheet_db_validations","title":"Perform Database-Related Validations for DBS Sheets — perform_dbs_sheet_db_validations","text":"function conducts database-related validation checks DBS sheet control data. initiates database connection, performs create extraction validations based action provided.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/perform_dbs_sheet_db_validations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Database-Related Validations for DBS Sheets — perform_dbs_sheet_db_validations","text":"","code":"perform_dbs_sheet_db_validations(database, user_data, action)"},{"path":"https://eppicenter.github.io/sampleDB/reference/perform_dbs_sheet_db_validations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Database-Related Validations for DBS Sheets — perform_dbs_sheet_db_validations","text":"database database connection specification validation. user_data users data. action action performed, either \"create\" \"extraction\".","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/perform_dbs_sheet_db_validations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Database-Related Validations for DBS Sheets — perform_dbs_sheet_db_validations","text":"list containing validation errors, .","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/perform_micronix_db_validations.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Database-Related Validations for Micronix — perform_micronix_db_validations","title":"Perform Database-Related Validations for Micronix — perform_micronix_db_validations","text":"function conducts database-related validation checks Micronix specimen data. initiates database connection, performs upload move validations based action provided.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/perform_micronix_db_validations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Database-Related Validations for Micronix — perform_micronix_db_validations","text":"","code":"perform_micronix_db_validations(database, user_data, action, variable_colnames)"},{"path":"https://eppicenter.github.io/sampleDB/reference/perform_micronix_db_validations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Database-Related Validations for Micronix — perform_micronix_db_validations","text":"database database connection specification validation. user_data users data. action action performed, either \"upload\" \"move\".","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/perform_micronix_db_validations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Database-Related Validations for Micronix — perform_micronix_db_validations","text":"list containing validation errors, .","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/perform_strain_db_validations.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Database-Related Validations for Strains — perform_strain_db_validations","title":"Perform Database-Related Validations for Strains — perform_strain_db_validations","text":"function conducts database-related validation checks Strains data. initiates database connection, performs create extraction validations based action provided.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/perform_strain_db_validations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Database-Related Validations for Strains — perform_strain_db_validations","text":"","code":"perform_strain_db_validations(database, user_data, action)"},{"path":"https://eppicenter.github.io/sampleDB/reference/perform_strain_db_validations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Database-Related Validations for Strains — perform_strain_db_validations","text":"database database connection specification validation. user_data users data. action action performed, either \"create\" \"extraction\".","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/perform_strain_db_validations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Database-Related Validations for Strains — perform_strain_db_validations","text":"list containing validation errors, .","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/perform_whole_blood_db_validations.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Database-Related Validations for Whole Blood Controls — perform_whole_blood_db_validations","title":"Perform Database-Related Validations for Whole Blood Controls — perform_whole_blood_db_validations","text":"function conducts database-related validation checks whole blood control data. initiates database connection, performs create extraction validations based action provided.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/perform_whole_blood_db_validations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Database-Related Validations for Whole Blood Controls — perform_whole_blood_db_validations","text":"","code":"perform_whole_blood_db_validations(database, user_data, action)"},{"path":"https://eppicenter.github.io/sampleDB/reference/perform_whole_blood_db_validations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Database-Related Validations for Whole Blood Controls — perform_whole_blood_db_validations","text":"database database connection specification validation. user_data users data. action action performed, either \"create\" \"extraction\".","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/perform_whole_blood_db_validations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Database-Related Validations for Whole Blood Controls — perform_whole_blood_db_validations","text":"list containing validation errors, .","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/prepare_control_data_for_validation.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare DataFrame for Control Validation — prepare_control_data_for_validation","title":"Prepare DataFrame for Control Validation — prepare_control_data_for_validation","text":"function pre-processes input data frame based given column mappings. renames columns also applies column-specific transformations needed.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/prepare_control_data_for_validation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare DataFrame for Control Validation — prepare_control_data_for_validation","text":"","code":"prepare_control_data_for_validation(   control_type,   user_data,   action,   file_column_attr )"},{"path":"https://eppicenter.github.io/sampleDB/reference/prepare_control_data_for_validation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare DataFrame for Control Validation — prepare_control_data_for_validation","text":"user_data data frame columns renamed. file_column_attr ColumnData object containing column mappings.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/prepare_control_data_for_validation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare DataFrame for Control Validation — prepare_control_data_for_validation","text":"pre-processed data frame.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/prepare_control_data_for_validation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare DataFrame for Control Validation — prepare_control_data_for_validation","text":"","code":"if (FALSE) { # \\dontrun{ user_data <- data.frame(   StudyCode = c(1,2),   StudySubject = c('X', 'Y'),   Row = c(1, 2),   Column = c('A', 'A') )  # Assuming file_column_attr is an instantiated ColumnData object  new_df <- prepare_control_data_for_validation(user_data, file_column_attr) } # }"},{"path":"https://eppicenter.github.io/sampleDB/reference/prepare_control_for_upload.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Control for Upload — prepare_control_for_upload","title":"Prepare Control for Upload — prepare_control_for_upload","text":"function prepares user_data dataframe upload adding 'Control' column (generated Density CompositionID values), adding 'Created' 'LastUpdated' columns current timestamp.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/prepare_control_for_upload.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Control for Upload — prepare_control_for_upload","text":"","code":"prepare_control_for_upload(user_data, now)"},{"path":"https://eppicenter.github.io/sampleDB/reference/prepare_control_for_upload.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Control for Upload — prepare_control_for_upload","text":"user_data dataframe user data containing 'Density' 'CompositionID' columns. now timestamp indicating current time.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/prepare_control_for_upload.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare Control for Upload — prepare_control_for_upload","text":"dataframe additional columns 'Control', 'Created', 'LastUpdated'.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/prepare_control_for_upload.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare Control for Upload — prepare_control_for_upload","text":"","code":"test_data <- data.frame(Density = c(100, 1000, 1500),                         CompositionID = c(\"S1_1\", \"S3_2\", \"S2_2\")) prepare_control_for_upload(test_data, Sys.time()) #>   Density CompositionID   Control             Created         LastUpdated #> 1     100          S1_1  100_S1_1 2025-04-11 22:41:49 2025-04-11 22:41:49 #> 2    1000          S3_2   1K_S3_2 2025-04-11 22:41:49 2025-04-11 22:41:49 #> 3    1500          S2_2 1.5K_S2_2 2025-04-11 22:41:49 2025-04-11 22:41:49"},{"path":"https://eppicenter.github.io/sampleDB/reference/prepare_matrix_position_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify the user column for validation purposes — prepare_matrix_position_column","title":"Modify the user column for validation purposes — prepare_matrix_position_column","text":"Modify user column validation purposes","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/prepare_matrix_position_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify the user column for validation purposes — prepare_matrix_position_column","text":"","code":"prepare_matrix_position_column(   user_data,   dimensions,   expected_position_column,   position_col )"},{"path":"https://eppicenter.github.io/sampleDB/reference/prepare_matrix_position_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify the user column for validation purposes — prepare_matrix_position_column","text":"user_data users uploaded formatted data. dimensions Dimensions matrix check . expected_position_column Expected position column names(s) position_col name concatenated position used validation","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/prepare_matrix_position_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify the user column for validation purposes — prepare_matrix_position_column","text":"users updated data frame.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/prepare_new_compositions.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare new compositions for database upload — prepare_new_compositions","title":"Prepare new compositions for database upload — prepare_new_compositions","text":"Compositions consist strains percentages, can multiple single strains sum strain must close 1 (tolerance allowed). composition descriptive identifier case new monoclonal polyclonal, monoclonal label name strain, polyclonal label formatted string number strains unique, incrementing index. example, \"W2\" monoclonal 'W2' composition \"2S_1\" dual strain composition need collect information database. Monoclonal compositions always considered legacy.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/prepare_new_compositions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare new compositions for database upload — prepare_new_compositions","text":"","code":"prepare_new_compositions(user_data)"},{"path":"https://eppicenter.github.io/sampleDB/reference/prepare_new_compositions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare new compositions for database upload — prepare_new_compositions","text":"user_data data frame containing user compositions.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/prepare_new_compositions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare new compositions for database upload — prepare_new_compositions","text":"dataframe updated compositions legacy labels.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/prepare_reference_data_for_validation.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare DataFrame for Reference Validation — prepare_reference_data_for_validation","title":"Prepare DataFrame for Reference Validation — prepare_reference_data_for_validation","text":"Prepare DataFrame Reference Validation","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/prepare_reference_data_for_validation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare DataFrame for Reference Validation — prepare_reference_data_for_validation","text":"","code":"prepare_reference_data_for_validation(   user_data,   reference_type,   file_column_attr )"},{"path":"https://eppicenter.github.io/sampleDB/reference/prepare_specimen_data_for_validation.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare DataFrame for Specimen Validation — prepare_specimen_data_for_validation","title":"Prepare DataFrame for Specimen Validation — prepare_specimen_data_for_validation","text":"function pre-processes input data frame based given column mappings. renames columns also applies column-specific transformations needed.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/prepare_specimen_data_for_validation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare DataFrame for Specimen Validation — prepare_specimen_data_for_validation","text":"","code":"prepare_specimen_data_for_validation(   sample_type,   user_data,   file_type,   file_column_attr )"},{"path":"https://eppicenter.github.io/sampleDB/reference/prepare_specimen_data_for_validation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare DataFrame for Specimen Validation — prepare_specimen_data_for_validation","text":"user_data data frame columns renamed. file_type Parameter needed internal function. (NOTE: make information available different way since need file_column_attr) file_column_attr ColumnData object containing column mappings.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/prepare_specimen_data_for_validation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare DataFrame for Specimen Validation — prepare_specimen_data_for_validation","text":"pre-processed data frame.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/prepare_specimen_data_for_validation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare DataFrame for Specimen Validation — prepare_specimen_data_for_validation","text":"","code":"if (FALSE) { # \\dontrun{ user_data <- data.frame(   StudyCode = c(1,2),   StudySubject = c('X', 'Y'),   Row = c(1, 2),   Column = c('A', 'A') )  # Assuming file_column_attr is an instantiated ColumnData object  new_df <- prepare_specimen_data_for_validation(user_data, file_column_attr) } # }"},{"path":"https://eppicenter.github.io/sampleDB/reference/print.ColumnData.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for ColumnData objects — print.ColumnData","title":"Print method for ColumnData objects — print.ColumnData","text":"method provides custom print representation objects class 'ColumnData'. displays required, conditional, optional columns separately.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/print.ColumnData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for ColumnData objects — print.ColumnData","text":"","code":"# S3 method for class 'ColumnData' print(x, ...)"},{"path":"https://eppicenter.github.io/sampleDB/reference/print.ColumnData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for ColumnData objects — print.ColumnData","text":"x object class 'ColumnData'. ... arguments passed methods.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/process_and_append_compositions.html","id":null,"dir":"Reference","previous_headings":"","what":"Process and append new compositions to the database — process_and_append_compositions","title":"Process and append new compositions to the database — process_and_append_compositions","text":"Process append new compositions database","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/process_and_append_compositions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process and append new compositions to the database — process_and_append_compositions","text":"","code":"process_and_append_compositions(con, user_data)"},{"path":"https://eppicenter.github.io/sampleDB/reference/process_and_append_compositions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process and append new compositions to the database — process_and_append_compositions","text":"con database connection object. user_data data frame containing user compositions.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/process_and_append_compositions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process and append new compositions to the database — process_and_append_compositions","text":"Integer number rows appended.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/process_bag_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Process user data to handle bag details — process_bag_data","title":"Process user data to handle bag details — process_bag_data","text":"Process user data handle bag details","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/process_bag_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process user data to handle bag details — process_bag_data","text":"","code":"process_bag_data(   df.payload,   con,   location_root_col,   level_I_col,   level_II_col,   dbs_bag_name_col )"},{"path":"https://eppicenter.github.io/sampleDB/reference/process_bag_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process user data to handle bag details — process_bag_data","text":"df.payload dataframe payload data. con database connection object. location_root_col Column name df.payload root location. level_I_col Column name df.payload level location. level_II_col Column name df.payload level II location. dbs_bag_name_col Column name df.payload dbs bag name.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/process_bag_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process user data to handle bag details — process_bag_data","text":"dataframe processed bag details.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/process_blood_spot_collection_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Blood Spot Collection Data — process_blood_spot_collection_data","title":"Process Blood Spot Collection Data — process_blood_spot_collection_data","text":"Process Blood Spot Collection Data","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/process_blood_spot_collection_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Blood Spot Collection Data — process_blood_spot_collection_data","text":"","code":"process_blood_spot_collection_data(df.payload, con, count_col)"},{"path":"https://eppicenter.github.io/sampleDB/reference/process_blood_spot_collection_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Blood Spot Collection Data — process_blood_spot_collection_data","text":"df.payload dataframe containing payload data. con database connection object. count_col Count column.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/process_blood_spot_collection_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process Blood Spot Collection Data — process_blood_spot_collection_data","text":"dataframe processed blood spot collection details.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/process_control_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Process and Validate Control CSV File — process_control_csv","title":"Process and Validate Control CSV File — process_control_csv","text":"function processes validates user-provided control CSV file. process includes reading file, preprocessing remove empty rows columns, validating formatting based given control type action. file meet specific requirements validation rules violated, appropriate errors warnings raised.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/process_control_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process and Validate Control CSV File — process_control_csv","text":"","code":"process_control_csv(   user_csv,   user_action,   control_type,   file_type = \"na\",   bind_data = NULL,   database = Sys.getenv(\"SDB_PATH\"),   config_yml = Sys.getenv(\"SDB_CONFIG\") )"},{"path":"https://eppicenter.github.io/sampleDB/reference/process_control_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process and Validate Control CSV File — process_control_csv","text":"user_csv path user's control CSV file. read data frame. user_action character string indicating action user taking (e.g., 'upload'). control_type character string specifying type controls user CSV. file_type character string indicating type file (default \"na\"). bind_data named list data added user file. list names new columns values respective column. Default NULL, means data binded. database character string indicating path SQLite database used validation checks. Defaults system environment variable 'SDB_PATH'. config_yml character string indicating path configuration YAML file. Defaults system environment variable 'SDB_CONFIG'.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/process_control_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process and Validate Control CSV File — process_control_csv","text":"processed validated control CSV data frame.","code":""},{"path":[]},{"path":"https://eppicenter.github.io/sampleDB/reference/process_control_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process and Validate Control CSV File — process_control_csv","text":"","code":"if (FALSE) { # \\dontrun{ # Provide the path to the user CSV file and action details user_file_path <- \"path/to/user/control_file.csv\" action <- \"upload\" type <- \"quality_control\"  # Process and validate the user CSV processed_data <- process_control_csv(user_file_path, action, type) } # }"},{"path":"https://eppicenter.github.io/sampleDB/reference/process_dbs_control_sheet_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Process user data to handle DBS control sheet details — process_dbs_control_sheet_data","title":"Process user data to handle DBS control sheet details — process_dbs_control_sheet_data","text":"Process user data handle DBS control sheet details","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/process_dbs_control_sheet_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process user data to handle DBS control sheet details — process_dbs_control_sheet_data","text":"","code":"process_dbs_control_sheet_data(df.payload, con, dbs_sheet_name_col)"},{"path":"https://eppicenter.github.io/sampleDB/reference/process_dbs_control_sheet_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process user data to handle DBS control sheet details — process_dbs_control_sheet_data","text":"df.payload dataframe payload data. con database connection object. dbs_sheet_name_col Column name df.payload DBS Sheet name.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/process_dbs_control_sheet_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process user data to handle DBS control sheet details — process_dbs_control_sheet_data","text":"dataframe processed DBS control sheet details.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/process_malaria_blood_control_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Process user data to handle malaria blood control details — process_malaria_blood_control_data","title":"Process user data to handle malaria blood control details — process_malaria_blood_control_data","text":"Process user data handle malaria blood control details","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/process_malaria_blood_control_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process user data to handle malaria blood control details — process_malaria_blood_control_data","text":"","code":"process_malaria_blood_control_data(   df.payload,   con,   density_col,   composition_id_col )"},{"path":"https://eppicenter.github.io/sampleDB/reference/process_malaria_blood_control_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process user data to handle malaria blood control details — process_malaria_blood_control_data","text":"df.payload dataframe payload data. con database connection object. density_col Column name df.payload density value. composition_id_col Column representing CompositionID.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/process_malaria_blood_control_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process user data to handle malaria blood control details — process_malaria_blood_control_data","text":"dataframe processed malaria blood control details.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/process_reference_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Process and Validate Reference CSV File — process_reference_csv","title":"Process and Validate Reference CSV File — process_reference_csv","text":"function processes validates user-provided reference CSV file. process includes reading file, preprocessing remove empty rows columns, validating formatting based given reference type action. file meet specific requirements validation rules violated, appropriate errors warnings raised.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/process_reference_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process and Validate Reference CSV File — process_reference_csv","text":"","code":"process_reference_csv(   user_csv,   user_action,   reference_type,   database = Sys.getenv(\"SDB_PATH\"),   config_yml = Sys.getenv(\"SDB_CONFIG\") )"},{"path":"https://eppicenter.github.io/sampleDB/reference/process_reference_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process and Validate Reference CSV File — process_reference_csv","text":"user_csv path user's reference CSV file. read data frame. user_action character string indicating action user taking (e.g., 'upload'). reference_type character string specifying type references user CSV. Valid types 'compositions' 'strains'. database character string indicating path SQLite database used validation checks. Defaults system environment variable 'SDB_PATH'. config_yml character string indicating path configuration YAML file. Defaults system environment variable 'SDB_CONFIG'.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/process_reference_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process and Validate Reference CSV File — process_reference_csv","text":"processed validated reference CSV data frame.","code":""},{"path":[]},{"path":"https://eppicenter.github.io/sampleDB/reference/process_reference_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process and Validate Reference CSV File — process_reference_csv","text":"","code":"if (FALSE) { # \\dontrun{ # Provide the path to the user CSV file and action details user_file_path <- \"path/to/user/reference_file.csv\" action <- \"upload\" type <- \"compositions\"  # Process and validate the user CSV processed_data <- process_reference_csv(user_file_path, action, type) } # }"},{"path":"https://eppicenter.github.io/sampleDB/reference/process_specimen_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Process and Validate Specimen User CSV File — process_specimen_csv","title":"Process and Validate Specimen User CSV File — process_specimen_csv","text":"function processes validates user's specimen CSV file ensure meets requirements specific action. process includes reading file, preprocessing, validation, formatting specimens. file meet specified requirements specimens, error thrown.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/process_specimen_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process and Validate Specimen User CSV File — process_specimen_csv","text":"","code":"process_specimen_csv(   user_csv,   user_action,   sample_type,   file_type = \"na\",   bind_data = NULL,   database = Sys.getenv(\"SDB_PATH\"),   config_yml = Sys.getenv(\"SDB_CONFIG\") )"},{"path":"https://eppicenter.github.io/sampleDB/reference/process_specimen_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process and Validate Specimen User CSV File — process_specimen_csv","text":"user_csv path user's specimen CSV file. read data frame. user_action character string indicating action user taking specimen data (e.g., 'upload'). sample_type character string specifying type specimens user CSV. file_type character string indicating type file (default \"na\"). bind_data named list data added user file. list names new columns values respective column. Default NULL, means data binded. database character string indicating path SQLite database used specimen validation checks. Defaults system environment variable 'SDB_PATH'. config_yml character string indicating path configuration YAML file specimens. Defaults system environment variable 'SDB_CONFIG'.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/process_specimen_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process and Validate Specimen User CSV File — process_specimen_csv","text":"processed validated user specimen CSV data frame.","code":""},{"path":[]},{"path":"https://eppicenter.github.io/sampleDB/reference/process_specimen_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process and Validate Specimen User CSV File — process_specimen_csv","text":"","code":"if (FALSE) { # \\dontrun{ # Provide the path to the user specimen CSV file and action details user_file_path <- \"path/to/user/specimen/file.csv\" action <- \"upload\" type <- \"blood_sample\"  # Process and validate the user specimen CSV processed_csv <- process_specimen_csv(user_file_path, action, type) } # }"},{"path":"https://eppicenter.github.io/sampleDB/reference/process_whole_blood_location_container.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Whole Blood Box Data — process_whole_blood_location_container","title":"Process Whole Blood Box Data — process_whole_blood_location_container","text":"function check locations add new boxes exist. return boxes locations IDs.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/process_whole_blood_location_container.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Whole Blood Box Data — process_whole_blood_location_container","text":"","code":"process_whole_blood_location_container(   user_data,   con,   created_col,   last_updated_col,   box_name_col,   box_barcode_col,   location_root_col,   level_I_col,   level_II_col )"},{"path":"https://eppicenter.github.io/sampleDB/reference/process_whole_blood_location_container.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Whole Blood Box Data — process_whole_blood_location_container","text":"user_data dataframe containing payload data. con database connection object. created_col Column name user_data created date. last_updated_col Column name user_data last updated date. box_name_col Column name user_data box name. box_barcode_col Column name user_data box barcode.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/process_whole_blood_location_container.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process Whole Blood Box Data — process_whole_blood_location_container","text":"dataframe location ids cryovial box ids.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/read_and_preprocess_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and Preprocess User CSV File — read_and_preprocess_csv","title":"Read and Preprocess User CSV File — read_and_preprocess_csv","text":"function reads provided user CSV file preprocesses based given user action.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/read_and_preprocess_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and Preprocess User CSV File — read_and_preprocess_csv","text":"","code":"read_and_preprocess_csv(user_csv)"},{"path":"https://eppicenter.github.io/sampleDB/reference/read_and_preprocess_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and Preprocess User CSV File — read_and_preprocess_csv","text":"user_file path user's CSV file. read data frame.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/read_and_preprocess_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and Preprocess User CSV File — read_and_preprocess_csv","text":"preprocessed user CSV data frame.","code":""},{"path":[]},{"path":"https://eppicenter.github.io/sampleDB/reference/read_and_preprocess_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and Preprocess User CSV File — read_and_preprocess_csv","text":"","code":"if (FALSE) { # \\dontrun{ user_file_path <- \"path/to/user/file.csv\" action <- \"upload\"  preprocessed_data <- read_and_preprocess_csv(user_file_path, action) } # }"},{"path":"https://eppicenter.github.io/sampleDB/reference/rejoin_box_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Rejoin Whole Blood Box Data — rejoin_box_ids","title":"Rejoin Whole Blood Box Data — rejoin_box_ids","text":"Rejoin Whole Blood Box Data","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/rejoin_box_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rejoin Whole Blood Box Data — rejoin_box_ids","text":"","code":"rejoin_box_ids(con, user_data, box_name_col, box_barcode_col)"},{"path":"https://eppicenter.github.io/sampleDB/reference/rejoin_box_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rejoin Whole Blood Box Data — rejoin_box_ids","text":"con database connection object. user_data dataframe containing payload data. box_name_col Column name user_data box name. box_barcode_col Column name user_data box barcode.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/rejoin_box_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rejoin Whole Blood Box Data — rejoin_box_ids","text":"dataframe location ids cryovial box ids.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/rejoin_dbs_control_sheet_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Rejoin to Get New DBS Control Sheet IDs — rejoin_dbs_control_sheet_ids","title":"Rejoin to Get New DBS Control Sheet IDs — rejoin_dbs_control_sheet_ids","text":"Rejoin Get New DBS Control Sheet IDs","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/rejoin_dbs_control_sheet_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rejoin to Get New DBS Control Sheet IDs — rejoin_dbs_control_sheet_ids","text":"","code":"rejoin_dbs_control_sheet_ids(df.payload, con, dbs_sheet_name_col)"},{"path":"https://eppicenter.github.io/sampleDB/reference/rejoin_dbs_control_sheet_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rejoin to Get New DBS Control Sheet IDs — rejoin_dbs_control_sheet_ids","text":"df.payload dataframe containing payload data. con database connection object.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/rejoin_dbs_control_sheet_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rejoin to Get New DBS Control Sheet IDs — rejoin_dbs_control_sheet_ids","text":"dataframe rejoining get new DBS control sheet IDs.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/rejoin_malaria_controls.html","id":null,"dir":"Reference","previous_headings":"","what":"Rejoin malaria controls based on density and study subject ID — rejoin_malaria_controls","title":"Rejoin malaria controls based on density and study subject ID — rejoin_malaria_controls","text":"Rejoin malaria controls based density study subject ID","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/rejoin_malaria_controls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rejoin malaria controls based on density and study subject ID — rejoin_malaria_controls","text":"","code":"rejoin_malaria_controls(df.payload, con, density_col)"},{"path":"https://eppicenter.github.io/sampleDB/reference/rejoin_malaria_controls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rejoin malaria controls based on density and study subject ID — rejoin_malaria_controls","text":"df.payload dataframe payload data. con database connection object.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/rejoin_malaria_controls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rejoin malaria controls based on density and study subject ID — rejoin_malaria_controls","text":"dataframe joined malaria controls.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/rejoin_to_get_bag_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Rejoin the payload with the database to retrieve bag IDs — rejoin_to_get_bag_ids","title":"Rejoin the payload with the database to retrieve bag IDs — rejoin_to_get_bag_ids","text":"Rejoin payload database retrieve bag IDs","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/rejoin_to_get_bag_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rejoin the payload with the database to retrieve bag IDs — rejoin_to_get_bag_ids","text":"","code":"rejoin_to_get_bag_ids(df.payload, con, manifest_name_col)"},{"path":"https://eppicenter.github.io/sampleDB/reference/rejoin_to_get_bag_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rejoin the payload with the database to retrieve bag IDs — rejoin_to_get_bag_ids","text":"df.payload dataframe payload data. con database connection object. manifest_name_col Column name df.payload manifest name.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/rejoin_to_get_bag_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rejoin the payload with the database to retrieve bag IDs — rejoin_to_get_bag_ids","text":"dataframe updated bag IDs.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/remove_na_columns_in_row.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove columns that have NA in a row — remove_na_columns_in_row","title":"Remove columns that have NA in a row — remove_na_columns_in_row","text":"helper function set_user_file_header. set_header_row can called, need make sure NAs row NAs column headers. point know header row can simply remove columns point. helps resolve bugs - user random character row, create new column. potentially addressed preprocessing advantage handling set_user_file_header columns want can confidently remove anything else.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/remove_na_columns_in_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove columns that have NA in a row — remove_na_columns_in_row","text":"","code":"remove_na_columns_in_row(data, row_num)"},{"path":"https://eppicenter.github.io/sampleDB/reference/remove_na_columns_in_row.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove columns that have NA in a row — remove_na_columns_in_row","text":"data data frame row_num row look NAs ","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/reshape_identifier_to_long_form.html","id":null,"dir":"Reference","previous_headings":"","what":"Reshape Identifier Data to Long Form — reshape_identifier_to_long_form","title":"Reshape Identifier Data to Long Form — reshape_identifier_to_long_form","text":"function takes data frame reshapes long form based strain-percentage pairs 'unique_id' column. separates strain-percentage pair two new columns: 'strain' 'percentage'.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/reshape_identifier_to_long_form.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reshape Identifier Data to Long Form — reshape_identifier_to_long_form","text":"","code":"reshape_identifier_to_long_form(data)"},{"path":"https://eppicenter.github.io/sampleDB/reference/reshape_identifier_to_long_form.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reshape Identifier Data to Long Form — reshape_identifier_to_long_form","text":"data data frame containing 'unique_id' column strain-percentage pairs, separated semicolons (';') hyphens ('-').","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/reshape_identifier_to_long_form.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reshape Identifier Data to Long Form — reshape_identifier_to_long_form","text":"data frame reshaped long form, containing new 'strain' 'percentage' columns.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/retrieve_compositions_by_identifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve compositions from the database by identifier — retrieve_compositions_by_identifier","title":"Retrieve compositions from the database by identifier — retrieve_compositions_by_identifier","text":"function accepts identifier describes composition control, retrieves data matches identifier database.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/retrieve_compositions_by_identifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve compositions from the database by identifier — retrieve_compositions_by_identifier","text":"","code":"retrieve_compositions_by_identifier(con, identifiers)"},{"path":"https://eppicenter.github.io/sampleDB/reference/retrieve_compositions_by_identifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve compositions from the database by identifier — retrieve_compositions_by_identifier","text":"con database connection object. identifiers character vector identifiers matched.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/retrieve_compositions_by_identifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve compositions from the database by identifier — retrieve_compositions_by_identifier","text":"dataframe matched compositions","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/retrieve_compositions_by_label.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve compositions from the database by label — retrieve_compositions_by_label","title":"Retrieve compositions from the database by label — retrieve_compositions_by_label","text":"Retrieve compositions database label","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/retrieve_compositions_by_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve compositions from the database by label — retrieve_compositions_by_label","text":"","code":"retrieve_compositions_by_label(con, labels)"},{"path":"https://eppicenter.github.io/sampleDB/reference/retrieve_compositions_by_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve compositions from the database by label — retrieve_compositions_by_label","text":"con database connection object. labels character vector labels matched.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/retrieve_compositions_by_label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve compositions from the database by label — retrieve_compositions_by_label","text":"dataframe matched compositions","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/safe_extract.html","id":null,"dir":"Reference","previous_headings":"","what":"Safely get a value from a list of possible values — safe_extract","title":"Safely get a value from a list of possible values — safe_extract","text":"function return first column finds list columns","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/safe_extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Safely get a value from a list of possible values — safe_extract","text":"","code":"safe_extract(data_row, ...)"},{"path":"https://eppicenter.github.io/sampleDB/reference/search_by_study_subject_file_upload.html","id":null,"dir":"Reference","previous_headings":"","what":"Search by Study Subject (and other longitudinal study criteria) — search_by_study_subject_file_upload","title":"Search by Study Subject (and other longitudinal study criteria) — search_by_study_subject_file_upload","text":"function takes sample storage type, filters, optional database config parameters search study subjects retrieve relevant data.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/search_by_study_subject_file_upload.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search by Study Subject (and other longitudinal study criteria) — search_by_study_subject_file_upload","text":"","code":"search_by_study_subject_file_upload(   sample_storage_type,   filters,   database = Sys.getenv(\"SDB_PATH\"),   config_yml = Sys.getenv(\"SDB_CONFIG\") )"},{"path":"https://eppicenter.github.io/sampleDB/reference/search_by_study_subject_file_upload.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search by Study Subject (and other longitudinal study criteria) — search_by_study_subject_file_upload","text":"sample_storage_type character string indicating type sample storage (\"micronix\", \"cryovial\"). filters list filters apply query. database optional parameter indicating database path. Defaults value environment variable 'SDB_PATH'. config_yml optional parameter indicating configuration YAML file. Defaults value environment variable 'SDB_CONFIG'.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/search_by_study_subject_file_upload.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search by Study Subject (and other longitudinal study criteria) — search_by_study_subject_file_upload","text":"dataframe containing search results based provided filters sample storage type.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/search_by_study_subject_file_upload.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search by Study Subject (and other longitudinal study criteria) — search_by_study_subject_file_upload","text":"","code":"if (FALSE) { # \\dontrun{   results <- search_by_study_subject_file_upload(\"micronix\", list(short_code = c(\"SC01\"), study_subject = c(\"SS01\")))   print(results) } # }"},{"path":"https://eppicenter.github.io/sampleDB/reference/search_compositions.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for Compositions in Database — search_compositions","title":"Search for Compositions in Database — search_compositions","text":"function searches compositions SQLite database using specified filters. filters include strain, percentage, composition types.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/search_compositions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for Compositions in Database — search_compositions","text":"","code":"search_compositions(filters, database = Sys.getenv(\"SDB_PATH\"))"},{"path":"https://eppicenter.github.io/sampleDB/reference/search_compositions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for Compositions in Database — search_compositions","text":"filters named list containing filter criteria. strain: vector strains filter percentage: vector percentages filter composition_types: vector composition types filter database path SQLite database. Defaults value SDB_PATH environment variable.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/search_compositions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for Compositions in Database — search_compositions","text":"data frame containing filtered compositions.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/search_compositions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search for Compositions in Database — search_compositions","text":"","code":"if (FALSE) { # \\dontrun{ result <- search_compositions(filters = list(strain = c(\"3D7\", \"D6\"), percentage = c(0.32, 0.33))) } # }"},{"path":"https://eppicenter.github.io/sampleDB/reference/search_micronix_tube.html","id":null,"dir":"Reference","previous_headings":"","what":"Search Micronix Tube Samples — search_micronix_tube","title":"Search Micronix Tube Samples — search_micronix_tube","text":"function searches Micronix tube samples database find matches based given DataFrame. identifies discrepancies positions, missing samples, samples archived status.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/search_micronix_tube.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search Micronix Tube Samples — search_micronix_tube","text":"","code":"search_micronix_tube(database, micronix_search_df)"},{"path":"https://eppicenter.github.io/sampleDB/reference/search_micronix_tube.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search Micronix Tube Samples — search_micronix_tube","text":"database string specifying path SQLite database. micronix_search_df DataFrame containing micronix tube samples searched. DataFrame must contain least 'barcode' column.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/search_micronix_tube.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search Micronix Tube Samples — search_micronix_tube","text":"list containing three DataFrames: missing_from_db, additional_in_db, archived_samples. DataFrame provides details samples missing database, additional database search DataFrame, samples archived status, respectively.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/select_relevant_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Select relevant columns from the user CSV file — select_relevant_columns","title":"Select relevant columns from the user CSV file — select_relevant_columns","text":"function selects required, conditional, optional columns user file based provided file column attributes.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/select_relevant_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select relevant columns from the user CSV file — select_relevant_columns","text":"","code":"select_relevant_columns(user_file, file_column_attr, bind_data)"},{"path":"https://eppicenter.github.io/sampleDB/reference/select_relevant_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select relevant columns from the user CSV file — select_relevant_columns","text":"user_file user's CSV file data frame. file_column_attr instance ColumnData containing attributes file columns. bind_data Data bound data frame included selection.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/select_relevant_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select relevant columns from the user CSV file — select_relevant_columns","text":"data frame relevant columns selected.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/set_header_row.html","id":null,"dir":"Reference","previous_headings":"","what":"Set a Specific Row as the Header — set_header_row","title":"Set a Specific Row as the Header — set_header_row","text":"function updates header user file based specified row number.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/set_header_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set a Specific Row as the Header — set_header_row","text":"","code":"set_header_row(user_file, header_row)"},{"path":"https://eppicenter.github.io/sampleDB/reference/set_header_row.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set a Specific Row as the Header — set_header_row","text":"user_file data frame representing user file. header_row numeric value indicating row set header.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/set_header_row.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set a Specific Row as the Header — set_header_row","text":"data frame updated header.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/set_header_row.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set a Specific Row as the Header — set_header_row","text":"","code":"if (FALSE) { # \\dontrun{ user_file <- read.csv(\"path_to_user_file.csv\", header = FALSE) set_header_row(user_file, 2) } # }"},{"path":"https://eppicenter.github.io/sampleDB/reference/set_user_file_header.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the header row for the user CSV file — set_user_file_header","title":"Set the header row for the user CSV file — set_user_file_header","text":"function identifies valid header row user file sets header. valid header row found, formatting error thrown.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/set_user_file_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the header row for the user CSV file — set_user_file_header","text":"","code":"set_user_file_header(user_file, file_column_attr)"},{"path":"https://eppicenter.github.io/sampleDB/reference/set_user_file_header.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the header row for the user CSV file — set_user_file_header","text":"user_file user's CSV file data frame. file_column_attr colum attribute object containing required columns.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/set_user_file_header.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the header row for the user CSV file — set_user_file_header","text":"data frame appropriate header row set.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/setup_database.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup or upgrade the database — setup_database","title":"Setup or upgrade the database — setup_database","text":"function sets new SQLite database upgrades already exists. function : Check current version database. Create new one none exists upgrades existing database target version. Handle errors setup upgrade process revert changes.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/setup_database.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup or upgrade the database — setup_database","text":"","code":"setup_database(expected_database_version, pkgname, database)"},{"path":"https://eppicenter.github.io/sampleDB/reference/setup_database.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup or upgrade the database — setup_database","text":"expected_database_version string contains expected database version application release. pkgname Name R package. database Path SQLite database file.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/setup_database.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup or upgrade the database — setup_database","text":"NULL (function primarily called side effects).","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/setup_database.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setup or upgrade the database — setup_database","text":"","code":"if (FALSE) { # \\dontrun{   setup_database(list(database = \"2.0.0\")) } # }"},{"path":"https://eppicenter.github.io/sampleDB/reference/setup_directory.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup a directory if it does not exist. — setup_directory","title":"Setup a directory if it does not exist. — setup_directory","text":"Setup directory exist.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/setup_directory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup a directory if it does not exist. — setup_directory","text":"","code":"setup_directory(directory)"},{"path":"https://eppicenter.github.io/sampleDB/reference/setup_directory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup a directory if it does not exist. — setup_directory","text":"directory path directory created.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/setup_directory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup a directory if it does not exist. — setup_directory","text":"Returns TRUE directory created, FALSE otherwise.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/setup_directory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setup a directory if it does not exist. — setup_directory","text":"","code":"setup_directory(\"new_directory_path\") #> [1] TRUE"},{"path":"https://eppicenter.github.io/sampleDB/reference/split_and_sort.html","id":null,"dir":"Reference","previous_headings":"","what":"Split and sort strains and percentages — split_and_sort","title":"Split and sort strains and percentages — split_and_sort","text":"function splits strains percentages strings sorts based percentages.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/split_and_sort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split and sort strains and percentages — split_and_sort","text":"","code":"split_and_sort(strains, percentages)"},{"path":"https://eppicenter.github.io/sampleDB/reference/split_and_sort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split and sort strains and percentages — split_and_sort","text":"strains character string strains separated semicolons. percentages character string percentages separated semicolons.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/split_and_sort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split and sort strains and percentages — split_and_sort","text":"list containing sorted strains sorted percentages.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/split_and_unnest_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Split and Unnest Strain and Percentage Columns — split_and_unnest_columns","title":"Split and Unnest Strain and Percentage Columns — split_and_unnest_columns","text":"function takes data frame splits provided strain percentage columns semicolon (;). resulting two lists within row unnested separate rows. commonly used validating strains corresponding compositions.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/split_and_unnest_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split and Unnest Strain and Percentage Columns — split_and_unnest_columns","text":"","code":"split_and_unnest_columns(user_data, strains_col, percentage_col, append = NULL)"},{"path":"https://eppicenter.github.io/sampleDB/reference/split_and_unnest_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split and Unnest Strain and Percentage Columns — split_and_unnest_columns","text":"user_data data frame specified strain percentage columns. strains_col column name data frame containing strain data. percentage_col column name data frame containing percentage data.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/split_and_unnest_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split and Unnest Strain and Percentage Columns — split_and_unnest_columns","text":"data frame unnested strain percentage columns.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/split_and_unnest_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split and Unnest Strain and Percentage Columns — split_and_unnest_columns","text":"","code":"if (FALSE) { # \\dontrun{ result <- split_and_unnest_columns(user_data, \"strain_column_name\", \"percentage_column_name\") } # }"},{"path":"https://eppicenter.github.io/sampleDB/reference/stop_app_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Stop with an application error — stop_app_error","title":"Stop with an application error — stop_app_error","text":"function throws application error given type, provided message additional data.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/stop_app_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stop with an application error — stop_app_error","text":"","code":"stop_app_error(type, message, data = NULL, call = NULL)"},{"path":"https://eppicenter.github.io/sampleDB/reference/stop_app_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stop with an application error — stop_app_error","text":"type type error. character string. message error message. character string. data Additional data associated error.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/stop_app_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stop with an application error — stop_app_error","text":"Never returns, signals error.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/stop_app_error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stop with an application error — stop_app_error","text":"","code":"if (FALSE) { # \\dontrun{ stop_app_error(\"my_error\", \"This is an error!\", data.frame(x = 1:5)) } # }"},{"path":"https://eppicenter.github.io/sampleDB/reference/stop_formatting_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Stop with a formatting error — stop_formatting_error","title":"Stop with a formatting error — stop_formatting_error","text":"function throws formatting error provided message data.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/stop_formatting_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stop with a formatting error — stop_formatting_error","text":"","code":"stop_formatting_error(message, data, call = rlang::caller_env())"},{"path":"https://eppicenter.github.io/sampleDB/reference/stop_formatting_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stop with a formatting error — stop_formatting_error","text":"message error message. character string. data Additional data associated error.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/stop_formatting_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stop with a formatting error — stop_formatting_error","text":"Never returns, signals error.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/stop_formatting_error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stop with a formatting error — stop_formatting_error","text":"","code":"if (FALSE) { # \\dontrun{ stop_formatting_error(\"This is a formatting error!\", data.frame(x = 1:5)) } # }"},{"path":"https://eppicenter.github.io/sampleDB/reference/stop_validation_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Stop with a validation error — stop_validation_error","title":"Stop with a validation error — stop_validation_error","text":"function throws validation error provided message data.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/stop_validation_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stop with a validation error — stop_validation_error","text":"","code":"stop_validation_error(message, data, call = rlang::caller_env())"},{"path":"https://eppicenter.github.io/sampleDB/reference/stop_validation_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stop with a validation error — stop_validation_error","text":"message error message. character string. data Additional data associated error.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/stop_validation_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stop with a validation error — stop_validation_error","text":"Never returns, signals error.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/stop_validation_error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stop with a validation error — stop_validation_error","text":"","code":"if (FALSE) { # \\dontrun{ stop_formatting_error(\"This is a validation error!\", data.frame(x = 1:5)) } # }"},{"path":"https://eppicenter.github.io/sampleDB/reference/update_configuration_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Configuration File — update_configuration_file","title":"Update Configuration File — update_configuration_file","text":"function updates configuration file based package's new configuration. current configuration missing outdated, merged replaced new configuration.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/update_configuration_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Configuration File — update_configuration_file","text":"","code":"update_configuration_file(pkgname, expected_config_version)"},{"path":"https://eppicenter.github.io/sampleDB/reference/update_configuration_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Configuration File — update_configuration_file","text":"pkgname name package containing new configuration. expected_config_version string expected user configuration version.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/update_configuration_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update Configuration File — update_configuration_file","text":"NULL (function primarily called side effects).","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/update_configuration_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update Configuration File — update_configuration_file","text":"","code":"if (FALSE) { # \\dontrun{ update_configuration_file(\"my_package_name\", \"1.1.0\") } # }"},{"path":"https://eppicenter.github.io/sampleDB/reference/update_env_variable.html","id":null,"dir":"Reference","previous_headings":"","what":"Update environment variable — update_env_variable","title":"Update environment variable — update_env_variable","text":"Update environment variable","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/update_env_variable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update environment variable — update_env_variable","text":"","code":"update_env_variable(name, value, environ_file_path)"},{"path":"https://eppicenter.github.io/sampleDB/reference/update_env_variable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update environment variable — update_env_variable","text":"name Character string environment variable name. value Character string environment variable value. environ_file_path Character string path environment file.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/update_env_variable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update environment variable — update_env_variable","text":"None.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/upgrade_database.html","id":null,"dir":"Reference","previous_headings":"","what":"Upgrade Database — upgrade_database","title":"Upgrade Database — upgrade_database","text":"Upgrade Database","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/upgrade_database.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upgrade Database — upgrade_database","text":"","code":"upgrade_database(   database,   current_version,   expected_version,   db_versions,   pkgname )"},{"path":"https://eppicenter.github.io/sampleDB/reference/upgrade_database.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upgrade Database — upgrade_database","text":"database Path database toupgrade current_version Current version database. expected_version Expected version database. db_versions Vector available database versions. pkgname Name package","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/upload_compositions.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload compositions to the database — upload_compositions","title":"Upload compositions to the database — upload_compositions","text":"function uploads user data database generating unique identifiers matching existing entries.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/upload_compositions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload compositions to the database — upload_compositions","text":"","code":"upload_compositions(user_data, database = Sys.getenv(\"SDB_PATH\"))"},{"path":"https://eppicenter.github.io/sampleDB/reference/upload_compositions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload compositions to the database — upload_compositions","text":"user_data data frame containing user compositions. database character string representing database path. Default system environment variable \"SDB_PATH\".","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/upload_compositions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upload compositions to the database — upload_compositions","text":"formatted list labels representing added matched compositions.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/upload_controls.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload Controls to the Database — upload_controls","title":"Upload Controls to the Database — upload_controls","text":"function uploads control data specified database based control type. Currently supports uploading 'dbs_sheet' 'whole_blood' control types.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/upload_controls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload Controls to the Database — upload_controls","text":"","code":"upload_controls(user_data, control_type, database = Sys.getenv(\"SDB_PATH\"))"},{"path":"https://eppicenter.github.io/sampleDB/reference/upload_controls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload Controls to the Database — upload_controls","text":"user_data Data uploaded. match expected format specified control type. control_type type control uploaded. Valid values 'dbs_sheet' 'whole_blood'. database path database. Defaults system environment variable \"SDB_PATH\".","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/upload_controls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upload Controls to the Database — upload_controls","text":"NULL. However, function provides messages inform user number uploaded controls encountered errors.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/upload_controls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upload Controls to the Database — upload_controls","text":"","code":"# Assuming you have a data frame called df_dbs_sheet and df_whole_blood: upload_controls(df_dbs_sheet, control_type = \"dbs_sheet\") #> object 'df_dbs_sheet' not found #> Uploaded 0 DBS Sheet Controls! upload_controls(df_whole_blood, control_type = \"whole_blood\") #> object 'df_whole_blood' not found #>"},{"path":"https://eppicenter.github.io/sampleDB/reference/upload_extracted_dna.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload Extracted DNA Data to SampleDB — upload_extracted_dna","title":"Upload Extracted DNA Data to SampleDB — upload_extracted_dna","text":"function uploads extracted DNA data user-provided data frame SQLite database, specifically SampleDB. function also updates active control count commits changes database.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/upload_extracted_dna.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload Extracted DNA Data to SampleDB — upload_extracted_dna","text":"","code":"upload_extracted_dna(   user_data,   control_extraction,   database = Sys.getenv(\"SDB_PATH\") )"},{"path":"https://eppicenter.github.io/sampleDB/reference/upload_extracted_dna.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload Extracted DNA Data to SampleDB — upload_extracted_dna","text":"user_data data frame containing DNA extraction data. control_extraction character string specifying type control extraction. database character string specifying path SampleDB SQLite database. Default value system environment variable \"SDB_PATH\".","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/upload_extracted_dna.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upload Extracted DNA Data to SampleDB — upload_extracted_dna","text":"message indicating success data upload operation.","code":""},{"path":[]},{"path":"https://eppicenter.github.io/sampleDB/reference/upload_extracted_dna.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upload Extracted DNA Data to SampleDB — upload_extracted_dna","text":"","code":"if (FALSE) { # \\dontrun{ upload_extracted_dna(user_data = my_data_frame, control_extraction = \"dbs_sheet\") } # }"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_and_format_control_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the user CSV file for control meets the requirements — validate_and_format_control_file","title":"Check if the user CSV file for control meets the requirements — validate_and_format_control_file","text":"function checks user CSV file control meets specific upload requirements, including necessary columns formatting checks. Errors thrown requirements met.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_and_format_control_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the user CSV file for control meets the requirements — validate_and_format_control_file","text":"","code":"validate_and_format_control_file(user_file, file_column_attr, bind_data = NULL)"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_and_format_control_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the user CSV file for control meets the requirements — validate_and_format_control_file","text":"user_file user's CSV file data frame. file_column_attr list containing attributes file columns required, conditional, optional columns. bind_data Data added data frame.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_and_format_control_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the user CSV file for control meets the requirements — validate_and_format_control_file","text":"cleaned checked user_file ready processing.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_and_format_reference_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the user CSV file for control meets the requirements — validate_and_format_reference_file","title":"Check if the user CSV file for control meets the requirements — validate_and_format_reference_file","text":"function checks user CSV file control meets specific upload requirements, including necessary columns formatting checks. Errors thrown requirements met.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_and_format_reference_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the user CSV file for control meets the requirements — validate_and_format_reference_file","text":"","code":"validate_and_format_reference_file(   user_file,   file_column_attr,   bind_data = NULL )"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_and_format_reference_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the user CSV file for control meets the requirements — validate_and_format_reference_file","text":"user_file user's CSV file data frame. file_column_attr list containing attributes file columns required, conditional, optional columns.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_and_format_reference_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the user CSV file for control meets the requirements — validate_and_format_reference_file","text":"cleaned checked user_file ready processing.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_and_format_specimen_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the user CSV file meets the requirements — validate_and_format_specimen_file","title":"Check if the user CSV file meets the requirements — validate_and_format_specimen_file","text":"function checks user CSV file meets specific upload requirements, including necessary columns formatting checks. Errors thrown requirements met.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_and_format_specimen_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the user CSV file meets the requirements — validate_and_format_specimen_file","text":"","code":"validate_and_format_specimen_file(   user_file,   sample_type,   user_action,   file_column_attr,   bind_data = NULL )"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_and_format_specimen_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the user CSV file meets the requirements — validate_and_format_specimen_file","text":"user_file user's CSV file data frame. sample_type sample type associated user's CSV file. file_column_attr file column attributes.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_and_format_specimen_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the user CSV file meets the requirements — validate_and_format_specimen_file","text":"cleaned checked user_file ready processing.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Batch Data — validate_batch","title":"Validate Batch Data — validate_batch","text":"function conducts series validation checks Strains data. function return errors encountered validation.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Batch Data — validate_batch","text":"","code":"validate_batch(user_data, action, database)"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Batch Data — validate_batch","text":"user_data data frame containing control data validate. action action performed, either \"create\" \"extraction\". database database connection specification use validation.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Batch Data — validate_batch","text":"list containing validation errors, .","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_box_uniqueness.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if boxes have enough unique cryovial barcodes to be easily identifiable. — validate_box_uniqueness","title":"Check if boxes have enough unique cryovial barcodes to be easily identifiable. — validate_box_uniqueness","text":"function meant check whether box cryovials overly similar another box potentially confused end user. can also used quickly check cryovial box already uploaded database (ie. prevent duplicated uploads). problem cryovials barcodes must unique within box; universally unique.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_box_uniqueness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if boxes have enough unique cryovial barcodes to be easily identifiable. — validate_box_uniqueness","text":"","code":"validate_box_uniqueness(   con,   user_data,   row_number_col,   cryovial_col,   cryovial_box_col,   similarity_tolerance = 10 )"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_box_uniqueness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if boxes have enough unique cryovial barcodes to be easily identifiable. — validate_box_uniqueness","text":"con database connection object. user_data name table user data temporarily stored database. row_number_col column row number user_data. cryovial_col column Cryovial barcodes user_data. cryovial_box_col column Cryovial box IDs user_data. similarity_tolerance percent similarity tolerated.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_box_uniqueness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if boxes have enough unique cryovial barcodes to be easily identifiable. — validate_box_uniqueness","text":"instance ErrorData class NULL.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_composition.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Compositions Data — validate_composition","title":"Validate Compositions Data — validate_composition","text":"function conducts series validation checks Compositions data. function return errors encountered validation.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_composition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Compositions Data — validate_composition","text":"","code":"validate_composition(user_data, action, database)"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_composition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Compositions Data — validate_composition","text":"user_data data frame containing control data validate. action action performed, either \"create\" \"extraction\". database database connection specification use validation.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_composition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Compositions Data — validate_composition","text":"list containing validation errors, .","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_composition_sum.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate if control compositions sum correctly — validate_composition_sum","title":"Validate if control compositions sum correctly — validate_composition_sum","text":"Validate control compositions sum correctly","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_composition_sum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate if control compositions sum correctly — validate_composition_sum","text":"","code":"validate_composition_sum(   user_data,   row_number_col,   strains_col,   percentage_col,   tolerance = 2 )"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_composition_sum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate if control compositions sum correctly — validate_composition_sum","text":"user_data data frame containing user data. row_number_col column name row numbers user_data. percentage_col column name percentage user_data. tolerance Tolerance sum control compositions.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_composition_sum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate if control compositions sum correctly — validate_composition_sum","text":"instance ErrorData class NULL.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_control_uid_in_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Control UID exists within a batch — validate_control_uid_in_batch","title":"Validate Control UID exists within a batch — validate_control_uid_in_batch","text":"Validate control uid exists batch","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_control_uid_in_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Control UID exists within a batch — validate_control_uid_in_batch","text":"","code":"validate_control_uid_in_batch(   con,   user_data,   row_number_col,   control_uid_col,   batch_col,   error_if_exists )"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_control_uid_in_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Control UID exists within a batch — validate_control_uid_in_batch","text":"con database connection object. user_data dataframe containing new extractions validated. must contain columns can used derive blood_spot_collection_id indirectly. row_number_col name column user_data provides unique row identifier. control_uid_col name column user_data corresponds control UID. batch_col name column user_data related batch information.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_control_uid_in_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Control UID exists within a batch — validate_control_uid_in_batch","text":"ErrorData object blood spot collection's new total extractions exceed total counts, detailing violations. Returns NULL new extraction counts within allowed limits.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_controls.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Control Specimens — validate_controls","title":"Validate Control Specimens — validate_controls","text":"Validate Control Specimens","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_controls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Control Specimens — validate_controls","text":"","code":"validate_controls(database, user_data, control_type, user_action)"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_controls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Control Specimens — validate_controls","text":"database database connection reference. control_type type control specimen ('dbs_sheet' 'whole_blood'). user_action user action taken control specimen ('extraction' 'create'). formatted_csv CSV data formatted validation.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_controls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Control Specimens — validate_controls","text":"Nothing","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_cryovial.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Cryovial Specimen Data — validate_cryovial","title":"Validate Cryovial Specimen Data — validate_cryovial","text":"function conducts series validation checks Cryovial specimen data. function return errors encountered validation.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_cryovial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Cryovial Specimen Data — validate_cryovial","text":"","code":"validate_cryovial(user_data, action, database)"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_cryovial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Cryovial Specimen Data — validate_cryovial","text":"user_data data frame containing specimen data validate. action action performed, e.g. \"upload\" \"move\". database database connection specification use validation.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_cryovial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Cryovial Specimen Data — validate_cryovial","text":"list containing validation errors, .","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_cryovial_collection_dates.html","id":null,"dir":"Reference","previous_headings":"","what":"Confirm that Cryovials with no barcodes have collection dates if there's already a sample from that study subject. — validate_cryovial_collection_dates","title":"Confirm that Cryovials with no barcodes have collection dates if there's already a sample from that study subject. — validate_cryovial_collection_dates","text":"Confirm Cryovials barcodes collection dates already sample study subject.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_cryovial_collection_dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confirm that Cryovials with no barcodes have collection dates if there's already a sample from that study subject. — validate_cryovial_collection_dates","text":"","code":"validate_cryovial_collection_dates(   con,   table_name,   row_number_col,   study_short_code_col,   study_subject_col,   barcode_col,   collection_date_col )"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_cryovial_collection_dates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confirm that Cryovials with no barcodes have collection dates if there's already a sample from that study subject. — validate_cryovial_collection_dates","text":"con database connection. table_name table name database contains data. row_number_col column name row numbers. study_short_code_col column name study short codes. study_subject_col column name study subjects. barcode_col column name barcodes. collection_date_col column name collection dates.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_cryovial_collection_dates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confirm that Cryovials with no barcodes have collection dates if there's already a sample from that study subject. — validate_cryovial_collection_dates","text":"ErrorData object NULL errors found.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_cryovial_moves.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Cryovial Moves — validate_cryovial_moves","title":"Validate Cryovial Moves — validate_cryovial_moves","text":"Conducts specific validation checks moving Cryovial specimens.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_cryovial_moves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Cryovial Moves — validate_cryovial_moves","text":"","code":"validate_cryovial_moves(cryovial_test)"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_cryovial_moves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Cryovial Moves — validate_cryovial_moves","text":"con database connection. cryovial_upload_test utility function performing tests.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_cryovial_moves.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Cryovial Moves — validate_cryovial_moves","text":"list object containing validation errors, .","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_cryovial_position.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Cryovial-specific position rules — validate_cryovial_position","title":"Validate Cryovial-specific position rules — validate_cryovial_position","text":"Validate Cryovial-specific position rules","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_cryovial_position.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Cryovial-specific position rules — validate_cryovial_position","text":"","code":"validate_cryovial_position(data, position_column, row_number_column)"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_cryovial_position.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Cryovial-specific position rules — validate_cryovial_position","text":"data dataframe containing data validated. position_column character string specifying column name 'position'. row_number_column character string specifying column name 'RowNumber'.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_cryovial_position.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Cryovial-specific position rules — validate_cryovial_position","text":"ErrorData object Cryovial position rules violated, NULL otherwise.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_cryovial_uploads.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Cryovial Uploads — validate_cryovial_uploads","title":"Validate Cryovial Uploads — validate_cryovial_uploads","text":"Conducts specific validation checks uploading Cryovial specimens.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_cryovial_uploads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Cryovial Uploads — validate_cryovial_uploads","text":"","code":"validate_cryovial_uploads(cryovial_test)"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_cryovial_uploads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Cryovial Uploads — validate_cryovial_uploads","text":"cryovial_test utility function performing tests. con database connection.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_cryovial_uploads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Cryovial Uploads — validate_cryovial_uploads","text":"list object containing validation errors, .","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_date_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Date Format — validate_date_format","title":"Validate Date Format — validate_date_format","text":"Validates date column provided data frame ensures dates recognized format.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_date_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Date Format — validate_date_format","text":"","code":"validate_date_format(data, date_col, allowed_date_formats)"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_date_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Date Format — validate_date_format","text":"data data frame. date_col name date column. allowed_date_formats character vector allowed date formats.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_date_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Date Format — validate_date_format","text":"ErrorData object NULL errors.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dates_with_tokens.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Dates with Tokens — validate_dates_with_tokens","title":"Validate Dates with Tokens — validate_dates_with_tokens","text":"Validates date column provided data frame. ensures dates recognized format set allowed tokens indicating date unknown.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dates_with_tokens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Dates with Tokens — validate_dates_with_tokens","text":"","code":"validate_dates_with_tokens(data, date_col, allowed_date_formats, tokens)"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dates_with_tokens.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Dates with Tokens — validate_dates_with_tokens","text":"data data frame. date_col name date column. allowed_date_formats character vector allowed date formats. tokens Recognized tokens indicating unknown dates.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dates_with_tokens.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Dates with Tokens — validate_dates_with_tokens","text":"list elements error_data (ErrorData object NULL errors), parsed_dates (vector parsed dates), token_mask (logical mask identifying rows recognized tokens indicating unknown dates).","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_bag_label_is_unique.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate DBS Bag Label is unique at a location — validate_dbs_bag_label_is_unique","title":"Validate DBS Bag Label is unique at a location — validate_dbs_bag_label_is_unique","text":"function checks DBS bag label unique location.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_bag_label_is_unique.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate DBS Bag Label is unique at a location — validate_dbs_bag_label_is_unique","text":"","code":"validate_dbs_bag_label_is_unique(   con,   table_name,   row_number_col,   bag_label_col,   freezer_col,   shelf_col,   basket_col,   error_if_exists = FALSE )"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_bag_label_is_unique.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate DBS Bag Label is unique at a location — validate_dbs_bag_label_is_unique","text":"con database connection. table_name name table check. row_number_col name row number column. bag_label_col name bag label column. freezer_col name freezer column. shelf_col name shelf column. basket_col name basket column. error_if_exists TRUE, returns error bag label exists. FALSE, returns error bag label exist.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_bag_label_is_unique.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate DBS Bag Label is unique at a location — validate_dbs_bag_label_is_unique","text":"list containing validation errors, .","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_box_bag_exists.html","id":null,"dir":"Reference","previous_headings":"","what":"Check DBS Specimen Box and Bag exist — validate_dbs_box_bag_exists","title":"Check DBS Specimen Box and Bag exist — validate_dbs_box_bag_exists","text":"function checks Box Bag exists database.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_box_bag_exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check DBS Specimen Box and Bag exist — validate_dbs_box_bag_exists","text":"","code":"validate_dbs_box_bag_exists(   con,   user_data,   row_number_col,   container_name_col,   container_type_col )"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_box_bag_exists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check DBS Specimen Box and Bag exist — validate_dbs_box_bag_exists","text":"con database connection object. user_data name formatted CSV table database. row_number_col column name representing row number table_name. container_name_col column name representing Cryovial container name table_name. label_col column name representing position table_name.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_box_bag_exists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check DBS Specimen Box and Bag exist — validate_dbs_box_bag_exists","text":"object class ErrorData. errors, NULL returned.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate DBS Specimen Data — validate_dbs_sample","title":"Validate DBS Specimen Data — validate_dbs_sample","text":"function conducts series validation checks DBS specimen data. function return errors encountered validation.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate DBS Specimen Data — validate_dbs_sample","text":"","code":"validate_dbs_sample(user_data, action, database)"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate DBS Specimen Data — validate_dbs_sample","text":"user_data data frame containing specimen data validate. action action performed, e.g. \"upload\" \"move\". database database connection specification use validation.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate DBS Specimen Data — validate_dbs_sample","text":"list containing validation errors, .","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_sample_label_uniqueness.html","id":null,"dir":"Reference","previous_headings":"","what":"DBS Specimen paper identifier uniqueness check — validate_dbs_sample_label_uniqueness","title":"DBS Specimen paper identifier uniqueness check — validate_dbs_sample_label_uniqueness","text":"function checks provided paper DBS specimen dataset unique position.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_sample_label_uniqueness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DBS Specimen paper identifier uniqueness check — validate_dbs_sample_label_uniqueness","text":"","code":"validate_dbs_sample_label_uniqueness(   con,   user_data,   row_number_col,   label_col,   container_name_col,   container_type_col,   error_if_exists )"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_sample_label_uniqueness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DBS Specimen paper identifier uniqueness check — validate_dbs_sample_label_uniqueness","text":"con database connection object. user_data name formatted CSV table database. row_number_col column name representing row number table_name. label_col column name representing position table_name. container_name_col column name representing Cryovial container name table_name.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_sample_label_uniqueness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DBS Specimen paper identifier uniqueness check — validate_dbs_sample_label_uniqueness","text":"object class ErrorData. errors, NULL returned.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_sample_moves.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate DBS Specimen Moves — validate_dbs_sample_moves","title":"Validate DBS Specimen Moves — validate_dbs_sample_moves","text":"Conducts specific validation checks moving DBS Specimen specimens.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_sample_moves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate DBS Specimen Moves — validate_dbs_sample_moves","text":"","code":"validate_dbs_sample_moves(dbs_sample_test)"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_sample_moves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate DBS Specimen Moves — validate_dbs_sample_moves","text":"con database connection. cryovial_upload_test utility function performing tests.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_sample_moves.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate DBS Specimen Moves — validate_dbs_sample_moves","text":"list object containing validation errors, .","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_sample_uploads.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Micronix Uploads — validate_dbs_sample_uploads","title":"Validate Micronix Uploads — validate_dbs_sample_uploads","text":"Conducts specific validation checks uploading Micronix specimens.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_sample_uploads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Micronix Uploads — validate_dbs_sample_uploads","text":"","code":"validate_dbs_sample_uploads(dbs_sample_test)"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_sample_uploads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Micronix Uploads — validate_dbs_sample_uploads","text":"micronix_test utility function performing validation checks.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_sample_uploads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Micronix Uploads — validate_dbs_sample_uploads","text":"list containing validation errors, .","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_sheet.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate DBS Sheet Control Data — validate_dbs_sheet","title":"Validate DBS Sheet Control Data — validate_dbs_sheet","text":"function conducts series validation checks DBS sheet control data. function return errors encountered validation.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_sheet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate DBS Sheet Control Data — validate_dbs_sheet","text":"","code":"validate_dbs_sheet(user_data, action, database)"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_sheet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate DBS Sheet Control Data — validate_dbs_sheet","text":"user_data data frame containing control data validate. action action performed, either \"create\" \"extraction\". database database connection specification use validation.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_sheet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate DBS Sheet Control Data — validate_dbs_sheet","text":"list containing validation errors, .","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_sheet_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate DBS Sheet Create — validate_dbs_sheet_create","title":"Validate DBS Sheet Create — validate_dbs_sheet_create","text":"Conducts specific validation checks creating DBS sheet controls.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_sheet_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate DBS Sheet Create — validate_dbs_sheet_create","text":"","code":"validate_dbs_sheet_create(dbs_sheet_test)"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_sheet_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate DBS Sheet Create — validate_dbs_sheet_create","text":"dbs_sheet_test utility function performing validation checks.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_sheet_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate DBS Sheet Create — validate_dbs_sheet_create","text":"list containing validation errors, .","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_sheet_extraction.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate DBS Sheet Extraction — validate_dbs_sheet_extraction","title":"Validate DBS Sheet Extraction — validate_dbs_sheet_extraction","text":"Conducts specific validation checks extracting DBS sheet controls.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_sheet_extraction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate DBS Sheet Extraction — validate_dbs_sheet_extraction","text":"","code":"validate_dbs_sheet_extraction(dbs_sheet_test)"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_sheet_extraction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate DBS Sheet Extraction — validate_dbs_sheet_extraction","text":"dbs_sheet_test utility function performing validation checks.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_sheet_extraction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate DBS Sheet Extraction — validate_dbs_sheet_extraction","text":"list containing validation errors, .","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_sheet_label_maps_to_uids.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate that a sheet name for a batch consistently contains the same densities and compositions. Sheet names (or labels) should be descriptive of the contents that are on the sheet. This validation check is in place to enforce sheet name specificity by only allowing a sheet name to link to composition types and densities that we're used with the first named sheet on upload. — validate_dbs_sheet_label_maps_to_uids","title":"Validate that a sheet name for a batch consistently contains the same densities and compositions. Sheet names (or labels) should be descriptive of the contents that are on the sheet. This validation check is in place to enforce sheet name specificity by only allowing a sheet name to link to composition types and densities that we're used with the first named sheet on upload. — validate_dbs_sheet_label_maps_to_uids","text":"New sheets allowed reuse sheet name label must composition type density combinations.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_sheet_label_maps_to_uids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate that a sheet name for a batch consistently contains the same densities and compositions. Sheet names (or labels) should be descriptive of the contents that are on the sheet. This validation check is in place to enforce sheet name specificity by only allowing a sheet name to link to composition types and densities that we're used with the first named sheet on upload. — validate_dbs_sheet_label_maps_to_uids","text":"","code":"validate_dbs_sheet_label_maps_to_uids(   con,   table_name,   row_number_col,   batch_col,   composition_id_col,   density_col,   sheet_name_col )"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_sheet_label_maps_to_uids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate that a sheet name for a batch consistently contains the same densities and compositions. Sheet names (or labels) should be descriptive of the contents that are on the sheet. This validation check is in place to enforce sheet name specificity by only allowing a sheet name to link to composition types and densities that we're used with the first named sheet on upload. — validate_dbs_sheet_label_maps_to_uids","text":"con database connection. table_name name table check. row_number_col name row number column. sheet_name_col name freezer column. control_uid_col name bag label column.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_sheet_label_maps_to_uids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate that a sheet name for a batch consistently contains the same densities and compositions. Sheet names (or labels) should be descriptive of the contents that are on the sheet. This validation check is in place to enforce sheet name specificity by only allowing a sheet name to link to composition types and densities that we're used with the first named sheet on upload. — validate_dbs_sheet_label_maps_to_uids","text":"list containing validation errors, .","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_sheet_move.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate DBS Sheet Move — validate_dbs_sheet_move","title":"Validate DBS Sheet Move — validate_dbs_sheet_move","text":"Conducts specific validation checks moving DBS sheet controls.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_sheet_move.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate DBS Sheet Move — validate_dbs_sheet_move","text":"","code":"validate_dbs_sheet_move(dbs_sheet_test)"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_sheet_move.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate DBS Sheet Move — validate_dbs_sheet_move","text":"dbs_sheet_test utility function performing validation checks.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_dbs_sheet_move.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate DBS Sheet Move — validate_dbs_sheet_move","text":"list containing validation errors, .","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_empty_cryovial_well_upload.html","id":null,"dir":"Reference","previous_headings":"","what":"Cryovial Empty Well Validation — validate_empty_cryovial_well_upload","title":"Cryovial Empty Well Validation — validate_empty_cryovial_well_upload","text":"function checks provided sample Cryovial dataset uploaded empty well.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_empty_cryovial_well_upload.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cryovial Empty Well Validation — validate_empty_cryovial_well_upload","text":"","code":"validate_empty_cryovial_well_upload(   con,   table_name,   row_number_col,   position_col,   container_name_col,   container_barcode_col )"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_empty_cryovial_well_upload.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cryovial Empty Well Validation — validate_empty_cryovial_well_upload","text":"con database connection object. table_name name formatted CSV table database. row_number_col column name representing row number table_name. position_col column name representing position table_name. container_name_col column name representing Cryovial container name table_name.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_empty_cryovial_well_upload.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cryovial Empty Well Validation — validate_empty_cryovial_well_upload","text":"object class ErrorData. errors, NULL returned.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_empty_micronix_well_upload.html","id":null,"dir":"Reference","previous_headings":"","what":"Micronix Empty Well Validation — validate_empty_micronix_well_upload","title":"Micronix Empty Well Validation — validate_empty_micronix_well_upload","text":"function checks provided sample Micronix dataset uploaded empty well.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_empty_micronix_well_upload.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Micronix Empty Well Validation — validate_empty_micronix_well_upload","text":"","code":"validate_empty_micronix_well_upload(   con,   table_name,   row_number_col,   position_col,   container_name_col,   container_barcode_col )"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_empty_micronix_well_upload.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Micronix Empty Well Validation — validate_empty_micronix_well_upload","text":"con database connection object. table_name name formatted CSV table database. row_number_col column name representing row number table_name. position_col column name representing position table_name. container_name_col column name representing Micronix container name table_name. container_barcode col column name representing Micronix container barcode table_name.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_empty_micronix_well_upload.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Micronix Empty Well Validation — validate_empty_micronix_well_upload","text":"object class ErrorData. errors, NULL returned.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_existing_barcodes_by_study.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate if barcodes already exist for a given study — validate_existing_barcodes_by_study","title":"Validate if barcodes already exist for a given study — validate_existing_barcodes_by_study","text":"Validate barcodes already exist given study","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_existing_barcodes_by_study.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate if barcodes already exist for a given study — validate_existing_barcodes_by_study","text":"","code":"validate_existing_barcodes_by_study(   con,   user_data,   row_number_col,   barcode_col,   study_short_code_col )"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_existing_barcodes_by_study.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate if barcodes already exist for a given study — validate_existing_barcodes_by_study","text":"con database connection object. user_data data frame containing user data. row_number_col name column containing row number. barcode_col column name barcodes user_data. study_short_code_col column name study short codes user_data.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_existing_barcodes_by_study.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate if barcodes already exist for a given study — validate_existing_barcodes_by_study","text":"instance ErrorData class NULL.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_extraction_counts_with_totals.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Extraction Counts Against Blood Spot Collection Totals — validate_extraction_counts_with_totals","title":"Validate Extraction Counts Against Blood Spot Collection Totals — validate_extraction_counts_with_totals","text":"function checks sum new extractions blood spot collection provided user data exceed total count available collection. ensures extractions within limits available blood spots dynamically joining user data related tables identify relevant blood_spot_collection_id record.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_extraction_counts_with_totals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Extraction Counts Against Blood Spot Collection Totals — validate_extraction_counts_with_totals","text":"","code":"validate_extraction_counts_with_totals(   con,   user_data,   row_number_col,   control_uid_col,   batch_col,   sheet_name_col,   sheet_barcode_col )"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_extraction_counts_with_totals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Extraction Counts Against Blood Spot Collection Totals — validate_extraction_counts_with_totals","text":"con database connection object. user_data dataframe containing new extractions validated. must contain columns can used derive blood_spot_collection_id indirectly. row_number_col name column user_data provides unique row identifier. control_uid_col name column user_data corresponds control UID. batch_col name column user_data related batch information. sheet_name_col name column user_data sheet name. sheet_label_col name column user_data sheet label, may contain NA values.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_extraction_counts_with_totals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Extraction Counts Against Blood Spot Collection Totals — validate_extraction_counts_with_totals","text":"ErrorData object blood spot collection's new total extractions exceed total counts, detailing violations. Returns NULL new extraction counts within allowed limits.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_location_reference_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate location references (Database Version) — validate_location_reference_db","title":"Validate location references (Database Version) — validate_location_reference_db","text":"function checks location reference provided dataset exists database. Note: function assumes data already present database.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_location_reference_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate location references (Database Version) — validate_location_reference_db","text":"","code":"validate_location_reference_db(   con,   table_name,   row_number_col,   name_col,   level_I_col,   level_II_col )"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_location_reference_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate location references (Database Version) — validate_location_reference_db","text":"con database connection object. table_name name formatted CSV table database. row_number_col name row number column. name_col name name column locations. level_I_col name Level column locations. level_II_col name Level II column locations.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_location_reference_db.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate location references (Database Version) — validate_location_reference_db","text":"ErrorData object indicating locations found.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_longitudinal_study.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensure uniqueness of study subjects and collection dates within longitudinal studies. — validate_longitudinal_study","title":"Ensure uniqueness of study subjects and collection dates within longitudinal studies. — validate_longitudinal_study","text":"Ensure uniqueness study subjects collection dates within longitudinal studies.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_longitudinal_study.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensure uniqueness of study subjects and collection dates within longitudinal studies. — validate_longitudinal_study","text":"","code":"validate_longitudinal_study(   con,   table_name,   row_number_col,   study_short_code_col,   study_subject_col,   collection_date_col )"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_longitudinal_study.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensure uniqueness of study subjects and collection dates within longitudinal studies. — validate_longitudinal_study","text":"con database connection. table_name table name database contains data. row_number_col column name row numbers. study_short_code_col column name study short codes. study_subject_col column name study subjects. collection_date_col column name collection dates.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_longitudinal_study.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensure uniqueness of study subjects and collection dates within longitudinal studies. — validate_longitudinal_study","text":"ErrorData object NULL errors found.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_matrix_container.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Matrix Container position — validate_matrix_container","title":"Validate Matrix Container position — validate_matrix_container","text":"Validate Matrix Container position","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_matrix_container.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Matrix Container position — validate_matrix_container","text":"","code":"validate_matrix_container(   con,   user_data,   row_number_col,   container_name_col,   container_position_col,   matrix_tablename,   container_tablename,   error_if_exists )"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_matrix_container.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Matrix Container position — validate_matrix_container","text":"con database connection object. user_data name table user data temporarily stored database. row_number_col column row number user_data. container_name_col column container name user_data. container_position_col column container positions user_data. matrix_tablename tablename database checked. container_tablename sample container tablename. used position checks. error_if_exists Logical. TRUE, error returned barcode exists database.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_matrix_container.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Matrix Container position — validate_matrix_container","text":"ErrorData object Micronix position rules violated, NULL otherwise.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_micronix.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Micronix Specimen Data — validate_micronix","title":"Validate Micronix Specimen Data — validate_micronix","text":"function conducts series validation checks Micronix specimen data. function return errors encountered validation.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_micronix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Micronix Specimen Data — validate_micronix","text":"","code":"validate_micronix(user_data, action, file_type, database)"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_micronix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Micronix Specimen Data — validate_micronix","text":"user_data data frame containing specimen data validate. action action performed, e.g. \"upload\" \"move\". database database connection specification use validation.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_micronix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Micronix Specimen Data — validate_micronix","text":"ErrorDataList object containing validation errors, .","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_micronix_barcode_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Micronix-specific barcode length rules — validate_micronix_barcode_length","title":"Validate Micronix-specific barcode length rules — validate_micronix_barcode_length","text":"Validate Micronix-specific barcode length rules","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_micronix_barcode_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Micronix-specific barcode length rules — validate_micronix_barcode_length","text":"","code":"validate_micronix_barcode_length(data, barcode_column, row_number_column)"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_micronix_barcode_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Micronix-specific barcode length rules — validate_micronix_barcode_length","text":"data dataframe containing data validated. barcode_column character string specifying column name 'barcode'. row_number_column character string specifying column name 'RowNumber'.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_micronix_barcode_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Micronix-specific barcode length rules — validate_micronix_barcode_length","text":"ErrorData object Micronix barcode rules violated, NULL otherwise.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_micronix_moves.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Micronix Moves — validate_micronix_moves","title":"Validate Micronix Moves — validate_micronix_moves","text":"Conducts specific validation checks moving Micronix specimens.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_micronix_moves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Micronix Moves — validate_micronix_moves","text":"","code":"validate_micronix_moves(micronix_test, variable_colnames)"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_micronix_moves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Micronix Moves — validate_micronix_moves","text":"micronix_test utility function performing validation checks.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_micronix_moves.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Micronix Moves — validate_micronix_moves","text":"list containing validation errors, .","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_micronix_position.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Micronix-specific position rules — validate_micronix_position","title":"Validate Micronix-specific position rules — validate_micronix_position","text":"Validate Micronix-specific position rules","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_micronix_position.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Micronix-specific position rules — validate_micronix_position","text":"","code":"validate_micronix_position(data, position_column, row_number_column)"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_micronix_position.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Micronix-specific position rules — validate_micronix_position","text":"data dataframe containing data validated. position_column character string specifying column name 'position'. row_number_column character string specifying column name 'RowNumber'.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_micronix_position.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Micronix-specific position rules — validate_micronix_position","text":"ErrorData object Micronix position rules violated, NULL otherwise.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_micronix_uploads.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Micronix Uploads — validate_micronix_uploads","title":"Validate Micronix Uploads — validate_micronix_uploads","text":"Conducts specific validation checks uploading Micronix specimens.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_micronix_uploads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Micronix Uploads — validate_micronix_uploads","text":"","code":"validate_micronix_uploads(micronix_test, variable_colnames)"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_micronix_uploads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Micronix Uploads — validate_micronix_uploads","text":"micronix_test utility function performing validation checks.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_micronix_uploads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Micronix Uploads — validate_micronix_uploads","text":"list containing validation errors, .","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_non_longitudinal_study_subjects.html","id":null,"dir":"Reference","previous_headings":"","what":"Check uniqueness of StudySubject within non-longitudinal studies. — validate_non_longitudinal_study_subjects","title":"Check uniqueness of StudySubject within non-longitudinal studies. — validate_non_longitudinal_study_subjects","text":"Check uniqueness StudySubject within non-longitudinal studies.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_non_longitudinal_study_subjects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check uniqueness of StudySubject within non-longitudinal studies. — validate_non_longitudinal_study_subjects","text":"","code":"validate_non_longitudinal_study_subjects(   con,   table_name,   row_number_col,   study_short_code_col,   study_subject_col,   specimen_type_col )"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_non_longitudinal_study_subjects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check uniqueness of StudySubject within non-longitudinal studies. — validate_non_longitudinal_study_subjects","text":"con database connection. table_name table name database contains data. row_number_col column name row numbers. study_short_code_col column name study short codes. study_subject_col column name study subjects. specimen_type_col column name speciment type.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_non_longitudinal_study_subjects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check uniqueness of StudySubject within non-longitudinal studies. — validate_non_longitudinal_study_subjects","text":"ErrorData object NULL errors found.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_references.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate References — validate_references","title":"Validate References — validate_references","text":"Validate References","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_references.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate References — validate_references","text":"","code":"validate_references(database, user_data, reference_type, user_action)"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_references.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate References — validate_references","text":"database database connection reference. reference_type type reference ('strains' 'compositions'). user_action user action taken control specimen ('extraction' 'create'). formatted_csv CSV data formatted validation.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_references.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate References — validate_references","text":"nothing","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_specimen_type_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate specimen type references (Database Version) — validate_specimen_type_db","title":"Validate specimen type references (Database Version) — validate_specimen_type_db","text":"function checks specimen type reference provided dataset exists database. Note: function assumes data already present database.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_specimen_type_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate specimen type references (Database Version) — validate_specimen_type_db","text":"","code":"validate_specimen_type_db(con, table_name, row_number_col, specimen_type_col)"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_specimen_type_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate specimen type references (Database Version) — validate_specimen_type_db","text":"con database connection object. table_name name formatted CSV table database. row_number_col name row number column. specimen_type_col name specimen type column.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_specimen_type_db.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate specimen type references (Database Version) — validate_specimen_type_db","text":"ErrorData object indicating specimen types found.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_specimens.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Specimens Main Function — validate_specimens","title":"Validate Specimens Main Function — validate_specimens","text":"validate_specimens function serves main driver validating specimens data, Micronix Cryovial specimens. process involves several key steps:","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_specimens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Specimens Main Function — validate_specimens","text":"","code":"validate_specimens(   user_data,   sample_type,   user_action,   file_type,   database = Sys.getenv(\"SDB_PATH\") )"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_specimens.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Specimens Main Function — validate_specimens","text":"user_data Character string. path user-provided CSV file validated. sample_type Character string. type sample validated. Expected values \"micronix\" \"cryovial\". user_action Character string. action performed user, e.g. \"upload\". database Character string. database connection specification validation. Default system environment variable \"SDB_PATH\".","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_specimens.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Specimens Main Function — validate_specimens","text":"data frame. validated potentially modified user data validation passes. validation pass, error raised.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_specimens.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate Specimens Main Function — validate_specimens","text":"Formatting provided user CSV based sample type action format_user_csv. Validation based sample type using either validate_micronix validate_cryovial. user action \"upload\", dates data validated using validate_dates_with_tokens. errors validation steps accumulated , present, trigger error message, stopping process. unknown date tokens found validation, handled using handle_unknown_date_tokens function. end validation process, user data either ready upload database returned user errors.","code":""},{"path":[]},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_strain.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Strains Data — validate_strain","title":"Validate Strains Data — validate_strain","text":"function conducts series validation checks Strains data. function return errors encountered validation.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_strain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Strains Data — validate_strain","text":"","code":"validate_strain(user_data, action, database)"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_strain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Strains Data — validate_strain","text":"user_data data frame containing control data validate. action action performed, either \"create\" \"extraction\". database database connection specification use validation.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_strain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Strains Data — validate_strain","text":"list containing validation errors, .","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_strains_in_database.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate strains recorded in the database — validate_strains_in_database","title":"Validate strains recorded in the database — validate_strains_in_database","text":"Validate strains recorded database","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_strains_in_database.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate strains recorded in the database — validate_strains_in_database","text":"","code":"validate_strains_in_database(   con,   table_name,   row_number_col,   strain_col,   error_select,   error_if_exists = TRUE )"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_strains_in_database.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate strains recorded in the database — validate_strains_in_database","text":"con database connection object. table_name name table database contains user data. row_number_col column name row numbers. strain_col column name strains. error_select Select column report errors. column used depend data want user see regarding strains. error_if_exists Logical. TRUE, checks strain exists database. FALSE, checks absent.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_strains_in_database.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate strains recorded in the database — validate_strains_in_database","text":"instance ErrorData class NULL.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_study_reference_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate study references (Database Version) — validate_study_reference_db","title":"Validate study references (Database Version) — validate_study_reference_db","text":"function checks study reference provided dataset exists database. Note: function assumes data already present database.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_study_reference_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate study references (Database Version) — validate_study_reference_db","text":"","code":"validate_study_reference_db(   con,   table_name,   row_number_col,   study_short_code_col,   controls = FALSE,   error_if_exists = FALSE )"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_study_reference_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate study references (Database Version) — validate_study_reference_db","text":"con database connection object. table_name name formatted CSV table database. row_number_col name row number column. study_short_code_col name study short code column. controls Whether validating controls. Controls 'Batches' instead studies. error_if_exists Whether indicate error study / batch already database.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_study_reference_db.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate study references (Database Version) — validate_study_reference_db","text":"ErrorData object indicating studies found.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_study_short_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate that study does not have a date for it's short code — validate_study_short_code","title":"Validate that study does not have a date for it's short code — validate_study_short_code","text":"function helps validate study date short code, reserved control batches.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_study_short_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate that study does not have a date for it's short code — validate_study_short_code","text":"","code":"validate_study_short_code(con, table_name, row_number, study_short_code_col)"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_study_short_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate that study does not have a date for it's short code — validate_study_short_code","text":"con database connection object. table_name name formatted CSV table database. study_short_code_col name study short code column. row_number_col name row number column.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_whole_blood.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Whole Blood Control Data — validate_whole_blood","title":"Validate Whole Blood Control Data — validate_whole_blood","text":"function conducts series validation checks whole blood control data. function return errors encountered validation.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_whole_blood.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Whole Blood Control Data — validate_whole_blood","text":"","code":"validate_whole_blood(user_data, action, database)"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_whole_blood.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Whole Blood Control Data — validate_whole_blood","text":"user_data data frame containing control data validate. action action performed, either \"create\" \"extraction\". database database connection specification use validation.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_whole_blood.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Whole Blood Control Data — validate_whole_blood","text":"list containing validation errors, .","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_whole_blood_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Whole Blood Create — validate_whole_blood_create","title":"Validate Whole Blood Create — validate_whole_blood_create","text":"Conducts specific validation checks creating whole blood controls.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_whole_blood_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Whole Blood Create — validate_whole_blood_create","text":"","code":"validate_whole_blood_create(whole_blood_test)"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_whole_blood_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Whole Blood Create — validate_whole_blood_create","text":"whole_blood_test utility function performing validation checks.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_whole_blood_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Whole Blood Create — validate_whole_blood_create","text":"list containing validation errors, .","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_whole_blood_extraction.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Whole Blood Extraction — validate_whole_blood_extraction","title":"Validate Whole Blood Extraction — validate_whole_blood_extraction","text":"Conducts specific validation checks extracting whole blood controls.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_whole_blood_extraction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Whole Blood Extraction — validate_whole_blood_extraction","text":"","code":"validate_whole_blood_extraction(whole_blood_test)"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_whole_blood_extraction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Whole Blood Extraction — validate_whole_blood_extraction","text":"whole_blood_test utility function performing validation checks.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_whole_blood_extraction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Whole Blood Extraction — validate_whole_blood_extraction","text":"list containing validation errors, .","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_whole_blood_move.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Whole Blood Move — validate_whole_blood_move","title":"Validate Whole Blood Move — validate_whole_blood_move","text":"Conducts specific validation checks creating whole blood controls.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_whole_blood_move.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Whole Blood Move — validate_whole_blood_move","text":"","code":"validate_whole_blood_move(whole_blood_test)"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_whole_blood_move.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Whole Blood Move — validate_whole_blood_move","text":"whole_blood_test utility function performing validation checks.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_whole_blood_move.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Whole Blood Move — validate_whole_blood_move","text":"list containing validation errors, .","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_whole_blood_tube_exists.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Cryovial Tube Exists — validate_whole_blood_tube_exists","title":"Validate Cryovial Tube Exists — validate_whole_blood_tube_exists","text":"function checks cryovial exists position, boxname, barcode box barcode, provided.","code":""},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_whole_blood_tube_exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Cryovial Tube Exists — validate_whole_blood_tube_exists","text":"","code":"validate_whole_blood_tube_exists(   con,   table_name,   row_number_col,   position_col,   box_name_col,   box_barcode_col,   control_uid_col,   batch_col )"},{"path":"https://eppicenter.github.io/sampleDB/reference/validate_whole_blood_tube_exists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Cryovial Tube Exists — validate_whole_blood_tube_exists","text":"list containing validation errors, .","code":""}]
